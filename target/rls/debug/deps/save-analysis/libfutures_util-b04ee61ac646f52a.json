{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19","program":"/Users/idealmine/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","futures_util","--edition=2018","/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"alloc\"","-C","metadata=b04ee61ac646f52a","-C","extra-filename=-b04ee61ac646f52a","--out-dir","/Users/idealmine/Desktop/projects/zero2prod/target/rls/debug/deps","-L","dependency=/Users/idealmine/Desktop/projects/zero2prod/target/rls/debug/deps","--extern","futures_core=/Users/idealmine/Desktop/projects/zero2prod/target/rls/debug/deps/libfutures_core-ebb528397f28c82e.rmeta","--extern","futures_task=/Users/idealmine/Desktop/projects/zero2prod/target/rls/debug/deps/libfutures_task-f3cb43510d125a7d.rmeta","--extern","pin_project_lite=/Users/idealmine/Desktop/projects/zero2prod/target/rls/debug/deps/libpin_project_lite-703c8f1511d632e8.rmeta","--extern","pin_utils=/Users/idealmine/Desktop/projects/zero2prod/target/rls/debug/deps/libpin_utils-ffed1cacd7ec989a.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/idealmine/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/idealmine/Desktop/projects/zero2prod/target/rls/debug/deps/libfutures_util-b04ee61ac646f52a.rmeta"},"prelude":{"crate_id":{"name":"futures_util","disambiguator":[10023652018475284219,0]},"crate_root":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src","external_crates":[{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[12597453921046050400,0]}},{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[10337807943449432441,0]}},{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[15255728868105367331,0]}},{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[3332034203136216330,0]}},{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","num":5,"id":{"name":"futures_core","disambiguator":[7139768861018805285,0]}},{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","num":6,"id":{"name":"std","disambiguator":[13397687447365136237,0]}},{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","num":7,"id":{"name":"libc","disambiguator":[4768259444744658338,0]}},{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[14770965832479625303,0]}},{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","num":9,"id":{"name":"cfg_if","disambiguator":[9296703136347489161,0]}},{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","num":10,"id":{"name":"hashbrown","disambiguator":[2508387316696144016,0]}},{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","num":11,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11194842143487016821,0]}},{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[677485867405505285,0]}},{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11695788395232495118,0]}},{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","num":14,"id":{"name":"addr2line","disambiguator":[1893355350187676699,0]}},{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","num":15,"id":{"name":"gimli","disambiguator":[4235596681029805678,0]}},{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","num":16,"id":{"name":"object","disambiguator":[4025428084964080381,0]}},{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","num":17,"id":{"name":"memchr","disambiguator":[9641156662954966841,0]}},{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[3359352200029954805,0]}},{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","num":19,"id":{"name":"pin_utils","disambiguator":[17740961729953240498,0]}},{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","num":20,"id":{"name":"futures_task","disambiguator":[9173417844079974359,0]}},{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/flatten.rs","num":21,"id":{"name":"pin_project_lite","disambiguator":[15171946887197477454,0]}}],"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":0,"byte_end":11572,"line_start":1,"line_end":337,"column_start":1,"column_end":18}},"imports":[{"kind":"Use","ref_id":{"krate":5,"index":169},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":861,"byte_end":866,"line_start":29,"line_end":29,"column_start":23,"column_end":28},"alias_span":null,"name":"ready","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":19,"index":7},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":887,"byte_end":894,"line_start":30,"line_end":30,"column_start":20,"column_end":27},"alias_span":null,"name":"pin_mut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":1,"index":12613},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12041,"byte_end":12047,"line_start":13,"line_end":13,"column_start":23,"column_end":29},"alias_span":null,"name":"Future","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":5,"index":21},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12107,"byte_end":12116,"line_start":16,"line_end":16,"column_start":32,"column_end":41},"alias_span":null,"name":"BoxFuture","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":5,"index":24},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12118,"byte_end":12132,"line_start":16,"line_end":16,"column_start":43,"column_end":57},"alias_span":null,"name":"LocalBoxFuture","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":5,"index":27},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12166,"byte_end":12177,"line_start":17,"line_end":17,"column_start":32,"column_end":43},"alias_span":null,"name":"FusedFuture","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":5,"index":44},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12179,"byte_end":12188,"line_start":17,"line_end":17,"column_start":45,"column_end":54},"alias_span":null,"name":"TryFuture","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":20,"index":237},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12214,"byte_end":12223,"line_start":18,"line_end":18,"column_start":24,"column_end":33},"alias_span":null,"name":"FutureObj","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":20,"index":203},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12225,"byte_end":12239,"line_start":18,"line_end":18,"column_start":35,"column_end":49},"alias_span":null,"name":"LocalFutureObj","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":20,"index":258},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12241,"byte_end":12256,"line_start":18,"line_end":18,"column_start":51,"column_end":66},"alias_span":null,"name":"UnsafeFutureObj","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":6539},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12371,"byte_end":12378,"line_start":24,"line_end":24,"column_start":5,"column_end":12},"alias_span":null,"name":"Flatten","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":6453},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12380,"byte_end":12384,"line_start":24,"line_end":24,"column_start":14,"column_end":18},"alias_span":null,"name":"Fuse","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":239},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12386,"byte_end":12395,"line_start":24,"line_end":24,"column_start":20,"column_end":29},"alias_span":null,"name":"FutureExt","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":6882},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12397,"byte_end":12404,"line_start":24,"line_end":24,"column_start":31,"column_end":38},"alias_span":null,"name":"Inspect","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":6697},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12406,"byte_end":12416,"line_start":24,"line_end":24,"column_start":40,"column_end":50},"alias_span":null,"name":"IntoStream","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":6637},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12418,"byte_end":12421,"line_start":24,"line_end":24,"column_start":52,"column_end":55},"alias_span":null,"name":"Map","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":6747},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12423,"byte_end":12430,"line_start":24,"line_end":24,"column_start":57,"column_end":64},"alias_span":null,"name":"MapInto","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":6942},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12432,"byte_end":12442,"line_start":24,"line_end":24,"column_start":66,"column_end":76},"alias_span":null,"name":"NeverError","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":6809},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12444,"byte_end":12448,"line_start":24,"line_end":24,"column_start":78,"column_end":82},"alias_span":null,"name":"Then","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":6990},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12450,"byte_end":12459,"line_start":24,"line_end":24,"column_start":84,"column_end":93},"alias_span":null,"name":"UnitError","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":6587},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12555,"byte_end":12568,"line_start":28,"line_end":28,"column_start":23,"column_end":36},"alias_span":null,"name":"FlattenStream","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":7341},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12898,"byte_end":12905,"line_start":43,"line_end":43,"column_start":5,"column_end":12},"alias_span":null,"name":"AndThen","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":7488},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12907,"byte_end":12914,"line_start":43,"line_end":43,"column_start":14,"column_end":21},"alias_span":null,"name":"ErrInto","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":7671},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12916,"byte_end":12926,"line_start":43,"line_end":43,"column_start":23,"column_end":33},"alias_span":null,"name":"InspectErr","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":7610},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12928,"byte_end":12937,"line_start":43,"line_end":43,"column_start":35,"column_end":44},"alias_span":null,"name":"InspectOk","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":7041},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12939,"byte_end":12949,"line_start":43,"line_end":43,"column_start":46,"column_end":56},"alias_span":null,"name":"IntoFuture","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":7793},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12951,"byte_end":12957,"line_start":43,"line_end":43,"column_start":58,"column_end":64},"alias_span":null,"name":"MapErr","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":7732},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12959,"byte_end":12964,"line_start":43,"line_end":43,"column_start":66,"column_end":71},"alias_span":null,"name":"MapOk","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":7855},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12966,"byte_end":12977,"line_start":43,"line_end":43,"column_start":73,"column_end":84},"alias_span":null,"name":"MapOkOrElse","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":7549},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12979,"byte_end":12985,"line_start":43,"line_end":43,"column_start":86,"column_end":92},"alias_span":null,"name":"OkInto","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":7415},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12991,"byte_end":12997,"line_start":44,"line_end":44,"column_start":5,"column_end":11},"alias_span":null,"name":"OrElse","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":7169},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":12999,"byte_end":13009,"line_start":44,"line_end":44,"column_start":13,"column_end":23},"alias_span":null,"name":"TryFlatten","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":7290},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13011,"byte_end":13027,"line_start":44,"line_end":44,"column_start":25,"column_end":41},"alias_span":null,"name":"TryFlattenStream","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":506},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13029,"byte_end":13041,"line_start":44,"line_end":44,"column_start":43,"column_end":55},"alias_span":null,"name":"TryFutureExt","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":7928},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13043,"byte_end":13055,"line_start":44,"line_end":44,"column_start":57,"column_end":69},"alias_span":null,"name":"UnwrapOrElse","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":603},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13227,"byte_end":13231,"line_start":54,"line_end":54,"column_start":22,"column_end":26},"alias_span":null,"name":"lazy","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":7986},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13233,"byte_end":13237,"line_start":54,"line_end":54,"column_start":28,"column_end":32},"alias_span":null,"name":"Lazy","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":649},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13278,"byte_end":13285,"line_start":57,"line_end":57,"column_start":25,"column_end":32},"alias_span":null,"name":"pending","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":7992},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13287,"byte_end":13294,"line_start":57,"line_end":57,"column_start":34,"column_end":41},"alias_span":null,"name":"Pending","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":696},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13341,"byte_end":13351,"line_start":60,"line_end":60,"column_start":28,"column_end":38},"alias_span":null,"name":"maybe_done","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":7998},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13353,"byte_end":13362,"line_start":60,"line_end":60,"column_start":40,"column_end":49},"alias_span":null,"name":"MaybeDone","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":748},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13417,"byte_end":13431,"line_start":63,"line_end":63,"column_start":32,"column_end":46},"alias_span":null,"name":"try_maybe_done","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":8011},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13433,"byte_end":13445,"line_start":63,"line_end":63,"column_start":48,"column_end":60},"alias_span":null,"name":"TryMaybeDone","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":8029},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13483,"byte_end":13495,"line_start":66,"line_end":66,"column_start":23,"column_end":35},"alias_span":null,"name":"OptionFuture","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":830},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13535,"byte_end":13542,"line_start":69,"line_end":69,"column_start":25,"column_end":32},"alias_span":null,"name":"poll_fn","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":825},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13544,"byte_end":13550,"line_start":69,"line_end":69,"column_start":34,"column_end":40},"alias_span":null,"name":"PollFn","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":889},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13605,"byte_end":13619,"line_start":72,"line_end":72,"column_start":32,"column_end":46},"alias_span":null,"name":"poll_immediate","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":8068},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13621,"byte_end":13634,"line_start":72,"line_end":72,"column_start":48,"column_end":61},"alias_span":null,"name":"PollImmediate","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":936},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13671,"byte_end":13674,"line_start":75,"line_end":75,"column_start":23,"column_end":26},"alias_span":null,"name":"err","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":933},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13676,"byte_end":13678,"line_start":75,"line_end":75,"column_start":28,"column_end":30},"alias_span":null,"name":"ok","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":931},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13680,"byte_end":13685,"line_start":75,"line_end":75,"column_start":32,"column_end":37},"alias_span":null,"name":"ready","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":8102},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13687,"byte_end":13692,"line_start":75,"line_end":75,"column_start":39,"column_end":44},"alias_span":null,"name":"Ready","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":987},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13727,"byte_end":13731,"line_start":78,"line_end":78,"column_start":22,"column_end":26},"alias_span":null,"name":"join","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":990},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13733,"byte_end":13738,"line_start":78,"line_end":78,"column_start":28,"column_end":33},"alias_span":null,"name":"join3","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":994},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13740,"byte_end":13745,"line_start":78,"line_end":78,"column_start":35,"column_end":40},"alias_span":null,"name":"join4","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":999},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13747,"byte_end":13752,"line_start":78,"line_end":78,"column_start":42,"column_end":47},"alias_span":null,"name":"join5","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":8204},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13754,"byte_end":13758,"line_start":78,"line_end":78,"column_start":49,"column_end":53},"alias_span":null,"name":"Join","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":8249},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13760,"byte_end":13765,"line_start":78,"line_end":78,"column_start":55,"column_end":60},"alias_span":null,"name":"Join3","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":8306},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13767,"byte_end":13772,"line_start":78,"line_end":78,"column_start":62,"column_end":67},"alias_span":null,"name":"Join4","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":8375},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13774,"byte_end":13779,"line_start":78,"line_end":78,"column_start":69,"column_end":74},"alias_span":null,"name":"Join5","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":1093},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13874,"byte_end":13882,"line_start":83,"line_end":83,"column_start":26,"column_end":34},"alias_span":null,"name":"join_all","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":1080},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13884,"byte_end":13891,"line_start":83,"line_end":83,"column_start":36,"column_end":43},"alias_span":null,"name":"JoinAll","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":1142},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13930,"byte_end":13936,"line_start":86,"line_end":86,"column_start":24,"column_end":30},"alias_span":null,"name":"select","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":8456},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":13938,"byte_end":13944,"line_start":86,"line_end":86,"column_start":32,"column_end":38},"alias_span":null,"name":"Select","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":1192},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14043,"byte_end":14053,"line_start":91,"line_end":91,"column_start":28,"column_end":38},"alias_span":null,"name":"select_all","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":8464},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14055,"byte_end":14064,"line_start":91,"line_end":91,"column_start":40,"column_end":49},"alias_span":null,"name":"SelectAll","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":1248},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14112,"byte_end":14120,"line_start":95,"line_end":95,"column_start":5,"column_end":13},"alias_span":null,"name":"try_join","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":1251},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14122,"byte_end":14131,"line_start":95,"line_end":95,"column_start":15,"column_end":24},"alias_span":null,"name":"try_join3","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":1255},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14133,"byte_end":14142,"line_start":95,"line_end":95,"column_start":26,"column_end":35},"alias_span":null,"name":"try_join4","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":1260},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14144,"byte_end":14153,"line_start":95,"line_end":95,"column_start":37,"column_end":46},"alias_span":null,"name":"try_join5","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":8540},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14155,"byte_end":14162,"line_start":95,"line_end":95,"column_start":48,"column_end":55},"alias_span":null,"name":"TryJoin","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":8585},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14164,"byte_end":14172,"line_start":95,"line_end":95,"column_start":57,"column_end":65},"alias_span":null,"name":"TryJoin3","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":8642},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14174,"byte_end":14182,"line_start":95,"line_end":95,"column_start":67,"column_end":75},"alias_span":null,"name":"TryJoin4","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":8711},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14184,"byte_end":14192,"line_start":95,"line_end":95,"column_start":77,"column_end":85},"alias_span":null,"name":"TryJoin5","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":1349},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14297,"byte_end":14309,"line_start":101,"line_end":101,"column_start":30,"column_end":42},"alias_span":null,"name":"try_join_all","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":1343},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14311,"byte_end":14321,"line_start":101,"line_end":101,"column_start":44,"column_end":54},"alias_span":null,"name":"TryJoinAll","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":1395},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14368,"byte_end":14378,"line_start":104,"line_end":104,"column_start":28,"column_end":38},"alias_span":null,"name":"try_select","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":8792},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14380,"byte_end":14389,"line_start":104,"line_end":104,"column_start":40,"column_end":49},"alias_span":null,"name":"TrySelect","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":1445},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14486,"byte_end":14495,"line_start":109,"line_end":109,"column_start":27,"column_end":36},"alias_span":null,"name":"select_ok","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":8800},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14497,"byte_end":14505,"line_start":109,"line_end":109,"column_start":38,"column_end":46},"alias_span":null,"name":"SelectOk","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":8806},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14543,"byte_end":14549,"line_start":112,"line_end":112,"column_start":23,"column_end":29},"alias_span":null,"name":"Either","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":12646},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14716,"byte_end":14727,"line_start":119,"line_end":119,"column_start":28,"column_end":39},"alias_span":null,"name":"AbortHandle","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":12642},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14729,"byte_end":14746,"line_start":119,"line_end":119,"column_start":41,"column_end":58},"alias_span":null,"name":"AbortRegistration","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":12604},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14748,"byte_end":14757,"line_start":119,"line_end":119,"column_start":60,"column_end":69},"alias_span":null,"name":"Abortable","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":12657},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14759,"byte_end":14766,"line_start":119,"line_end":119,"column_start":71,"column_end":78},"alias_span":null,"name":"Aborted","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":12658},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14759,"byte_end":14766,"line_start":119,"line_end":119,"column_start":71,"column_end":78},"alias_span":null,"name":"Aborted","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":1544},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":14849,"byte_end":14858,"line_start":122,"line_end":122,"column_start":20,"column_end":29},"alias_span":null,"name":"abortable","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":1,"index":12613},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":10673,"byte_end":10679,"line_start":296,"line_end":296,"column_start":25,"column_end":31},"alias_span":null,"name":"Future","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":239},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":10681,"byte_end":10690,"line_start":296,"line_end":296,"column_start":33,"column_end":42},"alias_span":null,"name":"FutureExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":44},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":10692,"byte_end":10701,"line_start":296,"line_end":296,"column_start":44,"column_end":53},"alias_span":null,"name":"TryFuture","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":506},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":10703,"byte_end":10715,"line_start":296,"line_end":296,"column_start":55,"column_end":67},"alias_span":null,"name":"TryFutureExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":90},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135143,"byte_end":135152,"line_start":13,"line_end":13,"column_start":32,"column_end":41},"alias_span":null,"name":"BoxStream","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":5,"index":93},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135154,"byte_end":135168,"line_start":13,"line_end":13,"column_start":43,"column_end":57},"alias_span":null,"name":"LocalBoxStream","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":5,"index":110},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135202,"byte_end":135213,"line_start":14,"line_end":14,"column_start":32,"column_end":43},"alias_span":null,"name":"FusedStream","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":5,"index":96},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135215,"byte_end":135221,"line_start":14,"line_end":14,"column_start":45,"column_end":51},"alias_span":null,"name":"Stream","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":5,"index":127},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135223,"byte_end":135232,"line_start":14,"line_end":14,"column_start":53,"column_end":62},"alias_span":null,"name":"TryStream","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":10523},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":143926,"byte_end":143932,"line_start":172,"line_end":172,"column_start":23,"column_end":29},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":1596}},{"kind":"Use","ref_id":{"krate":0,"index":10571},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":144109,"byte_end":144120,"line_start":178,"line_end":178,"column_start":29,"column_end":40},"alias_span":null,"name":"ReadyChunks","value":"","parent":{"krate":0,"index":1596}},{"kind":"Use","ref_id":{"krate":0,"index":8830},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135348,"byte_end":135353,"line_start":21,"line_end":21,"column_start":5,"column_end":10},"alias_span":null,"name":"Chain","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":8879},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135355,"byte_end":135362,"line_start":21,"line_end":21,"column_start":12,"column_end":19},"alias_span":null,"name":"Collect","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":8988},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135364,"byte_end":135370,"line_start":21,"line_end":21,"column_start":21,"column_end":27},"alias_span":null,"name":"Concat","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":9065},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135372,"byte_end":135377,"line_start":21,"line_end":21,"column_start":29,"column_end":34},"alias_span":null,"name":"Cycle","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":9105},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135379,"byte_end":135388,"line_start":21,"line_end":21,"column_start":36,"column_end":45},"alias_span":null,"name":"Enumerate","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":9144},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135390,"byte_end":135396,"line_start":21,"line_end":21,"column_start":47,"column_end":53},"alias_span":null,"name":"Filter","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":9209},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135398,"byte_end":135407,"line_start":21,"line_end":21,"column_start":55,"column_end":64},"alias_span":null,"name":"FilterMap","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":9798},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135409,"byte_end":135416,"line_start":21,"line_end":21,"column_start":66,"column_end":73},"alias_span":null,"name":"FlatMap","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":9325},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135418,"byte_end":135425,"line_start":21,"line_end":21,"column_start":75,"column_end":82},"alias_span":null,"name":"Flatten","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":9378},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135427,"byte_end":135431,"line_start":21,"line_end":21,"column_start":84,"column_end":88},"alias_span":null,"name":"Fold","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":9569},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135433,"byte_end":135440,"line_start":21,"line_end":21,"column_start":90,"column_end":97},"alias_span":null,"name":"ForEach","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":9631},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135446,"byte_end":135450,"line_start":22,"line_end":22,"column_start":5,"column_end":9},"alias_span":null,"name":"Fuse","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":9679},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135452,"byte_end":135459,"line_start":22,"line_end":22,"column_start":11,"column_end":18},"alias_span":null,"name":"Inspect","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":9745},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135461,"byte_end":135464,"line_start":22,"line_end":22,"column_start":20,"column_end":23},"alias_span":null,"name":"Map","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":9877},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135466,"byte_end":135470,"line_start":22,"line_end":22,"column_start":25,"column_end":29},"alias_span":null,"name":"Next","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":10019},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135472,"byte_end":135478,"line_start":22,"line_end":22,"column_start":31,"column_end":37},"alias_span":null,"name":"NextIf","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":10068},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135480,"byte_end":135488,"line_start":22,"line_end":22,"column_start":39,"column_end":47},"alias_span":null,"name":"NextIfEq","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":9937},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135490,"byte_end":135494,"line_start":22,"line_end":22,"column_start":49,"column_end":53},"alias_span":null,"name":"Peek","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":9978},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135496,"byte_end":135503,"line_start":22,"line_end":22,"column_start":55,"column_end":62},"alias_span":null,"name":"PeekMut","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":9898},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135505,"byte_end":135513,"line_start":22,"line_end":22,"column_start":64,"column_end":72},"alias_span":null,"name":"Peekable","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":10614},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135515,"byte_end":135519,"line_start":22,"line_end":22,"column_start":74,"column_end":78},"alias_span":null,"name":"Scan","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":9885},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135521,"byte_end":135535,"line_start":22,"line_end":22,"column_start":80,"column_end":94},"alias_span":null,"name":"SelectNextSome","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":10122},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135541,"byte_end":135545,"line_start":23,"line_end":23,"column_start":5,"column_end":9},"alias_span":null,"name":"Skip","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":10161},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135547,"byte_end":135556,"line_start":23,"line_end":23,"column_start":11,"column_end":20},"alias_span":null,"name":"SkipWhile","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":3401},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135558,"byte_end":135567,"line_start":23,"line_end":23,"column_start":22,"column_end":31},"alias_span":null,"name":"StreamExt","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":9670},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135569,"byte_end":135581,"line_start":23,"line_end":23,"column_start":33,"column_end":45},"alias_span":null,"name":"StreamFuture","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":10235},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135583,"byte_end":135587,"line_start":23,"line_end":23,"column_start":47,"column_end":51},"alias_span":null,"name":"Take","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":10343},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135589,"byte_end":135598,"line_start":23,"line_end":23,"column_start":53,"column_end":62},"alias_span":null,"name":"TakeUntil","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":10274},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135600,"byte_end":135609,"line_start":23,"line_end":23,"column_start":64,"column_end":73},"alias_span":null,"name":"TakeWhile","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":10400},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135611,"byte_end":135615,"line_start":23,"line_end":23,"column_start":75,"column_end":79},"alias_span":null,"name":"Then","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":8930},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135617,"byte_end":135622,"line_start":23,"line_end":23,"column_start":81,"column_end":86},"alias_span":null,"name":"Unzip","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":10468},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135624,"byte_end":135627,"line_start":23,"line_end":23,"column_start":88,"column_end":91},"alias_span":null,"name":"Zip","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":10523},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135741,"byte_end":135747,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":10571},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135798,"byte_end":135809,"line_start":33,"line_end":33,"column_start":23,"column_end":34},"alias_span":null,"name":"ReadyChunks","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":10683},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136001,"byte_end":136016,"line_start":41,"line_end":41,"column_start":24,"column_end":39},"alias_span":null,"name":"BufferUnordered","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":10728},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136018,"byte_end":136026,"line_start":41,"line_end":41,"column_start":41,"column_end":49},"alias_span":null,"name":"Buffered","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":10773},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136028,"byte_end":136045,"line_start":41,"line_end":41,"column_start":51,"column_end":68},"alias_span":null,"name":"ForEachConcurrent","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":4321},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136294,"byte_end":136304,"line_start":51,"line_end":51,"column_start":5,"column_end":15},"alias_span":null,"name":"try_unfold","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":10834},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136306,"byte_end":136313,"line_start":51,"line_end":51,"column_start":17,"column_end":24},"alias_span":null,"name":"AndThen","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":10898},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136315,"byte_end":136322,"line_start":51,"line_end":51,"column_start":26,"column_end":33},"alias_span":null,"name":"ErrInto","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":11036},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136324,"byte_end":136334,"line_start":51,"line_end":51,"column_start":35,"column_end":45},"alias_span":null,"name":"InspectErr","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":10967},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136336,"byte_end":136345,"line_start":51,"line_end":51,"column_start":47,"column_end":56},"alias_span":null,"name":"InspectOk","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":11107},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136347,"byte_end":136357,"line_start":51,"line_end":51,"column_start":58,"column_end":68},"alias_span":null,"name":"IntoStream","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":11214},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136359,"byte_end":136365,"line_start":51,"line_end":51,"column_start":70,"column_end":76},"alias_span":null,"name":"MapErr","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":11145},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136367,"byte_end":136372,"line_start":51,"line_end":51,"column_start":78,"column_end":83},"alias_span":null,"name":"MapOk","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":11280},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136374,"byte_end":136380,"line_start":51,"line_end":51,"column_start":85,"column_end":91},"alias_span":null,"name":"OrElse","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":11583},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136386,"byte_end":136396,"line_start":52,"line_end":52,"column_start":5,"column_end":15},"alias_span":null,"name":"TryCollect","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":11630},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136398,"byte_end":136407,"line_start":52,"line_end":52,"column_start":17,"column_end":26},"alias_span":null,"name":"TryConcat","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":11406},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136409,"byte_end":136418,"line_start":52,"line_end":52,"column_start":28,"column_end":37},"alias_span":null,"name":"TryFilter","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":11471},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136420,"byte_end":136432,"line_start":52,"line_end":52,"column_start":39,"column_end":51},"alias_span":null,"name":"TryFilterMap","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":11537},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136434,"byte_end":136444,"line_start":52,"line_end":52,"column_start":53,"column_end":63},"alias_span":null,"name":"TryFlatten","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":11734},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136446,"byte_end":136453,"line_start":52,"line_end":52,"column_start":65,"column_end":72},"alias_span":null,"name":"TryFold","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":11349},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136455,"byte_end":136465,"line_start":52,"line_end":52,"column_start":74,"column_end":84},"alias_span":null,"name":"TryForEach","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":11341},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136467,"byte_end":136474,"line_start":52,"line_end":52,"column_start":86,"column_end":93},"alias_span":null,"name":"TryNext","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":11860},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136480,"byte_end":136492,"line_start":53,"line_end":53,"column_start":5,"column_end":17},"alias_span":null,"name":"TrySkipWhile","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":4636},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136494,"byte_end":136506,"line_start":53,"line_end":53,"column_start":19,"column_end":31},"alias_span":null,"name":"TryStreamExt","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":11929},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136508,"byte_end":136520,"line_start":53,"line_end":53,"column_start":33,"column_end":45},"alias_span":null,"name":"TryTakeWhile","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":11803},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136522,"byte_end":136531,"line_start":53,"line_end":53,"column_start":47,"column_end":56},"alias_span":null,"name":"TryUnfold","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":12003},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136760,"byte_end":136778,"line_start":63,"line_end":63,"column_start":28,"column_end":46},"alias_span":null,"name":"TryBufferUnordered","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":12051},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136780,"byte_end":136791,"line_start":63,"line_end":63,"column_start":48,"column_end":59},"alias_span":null,"name":"TryBuffered","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":12094},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136793,"byte_end":136813,"line_start":63,"line_end":63,"column_start":61,"column_end":81},"alias_span":null,"name":"TryForEachConcurrent","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":11670},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136870,"byte_end":136879,"line_start":66,"line_end":66,"column_start":28,"column_end":37},"alias_span":null,"name":"TryChunks","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":11713},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136881,"byte_end":136895,"line_start":66,"line_end":66,"column_start":39,"column_end":53},"alias_span":null,"name":"TryChunksError","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":11714},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136881,"byte_end":136895,"line_start":66,"line_end":66,"column_start":39,"column_end":53},"alias_span":null,"name":"TryChunksError","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":4789},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136952,"byte_end":136956,"line_start":71,"line_end":71,"column_start":22,"column_end":26},"alias_span":null,"name":"iter","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":12155},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":136958,"byte_end":136962,"line_start":71,"line_end":71,"column_start":28,"column_end":32},"alias_span":null,"name":"Iter","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":4824},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137001,"byte_end":137007,"line_start":74,"line_end":74,"column_start":24,"column_end":30},"alias_span":null,"name":"repeat","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":12164},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137009,"byte_end":137015,"line_start":74,"line_end":74,"column_start":32,"column_end":38},"alias_span":null,"name":"Repeat","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":4877},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137064,"byte_end":137075,"line_start":77,"line_end":77,"column_start":29,"column_end":40},"alias_span":null,"name":"repeat_with","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":12173},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137077,"byte_end":137087,"line_start":77,"line_end":77,"column_start":42,"column_end":52},"alias_span":null,"name":"RepeatWith","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":4911},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137124,"byte_end":137129,"line_start":80,"line_end":80,"column_start":23,"column_end":28},"alias_span":null,"name":"empty","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":12182},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137131,"byte_end":137136,"line_start":80,"line_end":80,"column_start":30,"column_end":35},"alias_span":null,"name":"Empty","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":4963},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137171,"byte_end":137175,"line_start":83,"line_end":83,"column_start":22,"column_end":26},"alias_span":null,"name":"once","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":12193},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137177,"byte_end":137181,"line_start":83,"line_end":83,"column_start":28,"column_end":32},"alias_span":null,"name":"Once","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":5007},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137222,"byte_end":137229,"line_start":86,"line_end":86,"column_start":25,"column_end":32},"alias_span":null,"name":"pending","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":12224},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137231,"byte_end":137238,"line_start":86,"line_end":86,"column_start":34,"column_end":41},"alias_span":null,"name":"Pending","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":5057},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137279,"byte_end":137286,"line_start":89,"line_end":89,"column_start":25,"column_end":32},"alias_span":null,"name":"poll_fn","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":5049},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137288,"byte_end":137294,"line_start":89,"line_end":89,"column_start":34,"column_end":40},"alias_span":null,"name":"PollFn","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":5098},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137349,"byte_end":137363,"line_start":92,"line_end":92,"column_start":32,"column_end":46},"alias_span":null,"name":"poll_immediate","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":12235},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137365,"byte_end":137378,"line_start":92,"line_end":92,"column_start":48,"column_end":61},"alias_span":null,"name":"PollImmediate","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":5141},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137417,"byte_end":137423,"line_start":95,"line_end":95,"column_start":24,"column_end":30},"alias_span":null,"name":"select","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":12276},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137425,"byte_end":137431,"line_start":95,"line_end":95,"column_start":32,"column_end":38},"alias_span":null,"name":"Select","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":5207},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137498,"byte_end":137518,"line_start":98,"line_end":98,"column_start":38,"column_end":58},"alias_span":null,"name":"select_with_strategy","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":12314},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137520,"byte_end":137528,"line_start":98,"line_end":98,"column_start":60,"column_end":68},"alias_span":null,"name":"PollNext","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":12333},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137530,"byte_end":137548,"line_start":98,"line_end":98,"column_start":70,"column_end":88},"alias_span":null,"name":"SelectWithStrategy","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":5289},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137587,"byte_end":137593,"line_start":101,"line_end":101,"column_start":24,"column_end":30},"alias_span":null,"name":"unfold","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":12402},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137595,"byte_end":137601,"line_start":101,"line_end":101,"column_start":32,"column_end":38},"alias_span":null,"name":"Unfold","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":5389},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137779,"byte_end":137793,"line_start":108,"line_end":108,"column_start":32,"column_end":46},"alias_span":null,"name":"FuturesOrdered","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":12534},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":409027,"byte_end":409035,"line_start":26,"line_end":26,"column_start":22,"column_end":30},"alias_span":null,"name":"IntoIter","value":"","parent":{"krate":0,"index":5429}},{"kind":"Use","ref_id":{"krate":0,"index":12525},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":409037,"byte_end":409041,"line_start":26,"line_end":26,"column_start":32,"column_end":36},"alias_span":null,"name":"Iter","value":"","parent":{"krate":0,"index":5429}},{"kind":"Use","ref_id":{"krate":0,"index":12526},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":409037,"byte_end":409041,"line_start":26,"line_end":26,"column_start":32,"column_end":36},"alias_span":null,"name":"Iter","value":"","parent":{"krate":0,"index":5429}},{"kind":"Use","ref_id":{"krate":0,"index":12505},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":409043,"byte_end":409050,"line_start":26,"line_end":26,"column_start":38,"column_end":45},"alias_span":null,"name":"IterMut","value":"","parent":{"krate":0,"index":5429}},{"kind":"Use","ref_id":{"krate":0,"index":12506},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":409043,"byte_end":409050,"line_start":26,"line_end":26,"column_start":38,"column_end":45},"alias_span":null,"name":"IterMut","value":"","parent":{"krate":0,"index":5429}},{"kind":"Use","ref_id":{"krate":0,"index":12495},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":409052,"byte_end":409062,"line_start":26,"line_end":26,"column_start":47,"column_end":57},"alias_span":null,"name":"IterPinMut","value":"","parent":{"krate":0,"index":5429}},{"kind":"Use","ref_id":{"krate":0,"index":12514},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":409064,"byte_end":409074,"line_start":26,"line_end":26,"column_start":59,"column_end":69},"alias_span":null,"name":"IterPinRef","value":"","parent":{"krate":0,"index":5429}},{"kind":"Use","ref_id":{"krate":0,"index":5747},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137993,"byte_end":138009,"line_start":116,"line_end":116,"column_start":34,"column_end":50},"alias_span":null,"name":"FuturesUnordered","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":5907},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":138196,"byte_end":138206,"line_start":124,"line_end":124,"column_start":28,"column_end":38},"alias_span":null,"name":"select_all","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":12541},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":138208,"byte_end":138217,"line_start":124,"line_end":124,"column_start":40,"column_end":49},"alias_span":null,"name":"SelectAll","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":12646},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":138385,"byte_end":138396,"line_start":131,"line_end":131,"column_start":28,"column_end":39},"alias_span":null,"name":"AbortHandle","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":12642},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":138398,"byte_end":138415,"line_start":131,"line_end":131,"column_start":41,"column_end":58},"alias_span":null,"name":"AbortRegistration","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":12604},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":138417,"byte_end":138426,"line_start":131,"line_end":131,"column_start":60,"column_end":69},"alias_span":null,"name":"Abortable","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":12657},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":138428,"byte_end":138435,"line_start":131,"line_end":131,"column_start":71,"column_end":78},"alias_span":null,"name":"Aborted","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":12658},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":138428,"byte_end":138435,"line_start":131,"line_end":131,"column_start":71,"column_end":78},"alias_span":null,"name":"Aborted","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":0,"index":5978},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":138518,"byte_end":138527,"line_start":134,"line_end":134,"column_start":20,"column_end":29},"alias_span":null,"name":"abortable","value":"","parent":{"krate":0,"index":1578}},{"kind":"Use","ref_id":{"krate":5,"index":96},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":10777,"byte_end":10783,"line_start":300,"line_end":300,"column_start":25,"column_end":31},"alias_span":null,"name":"Stream","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3401},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":10785,"byte_end":10794,"line_start":300,"line_end":300,"column_start":33,"column_end":42},"alias_span":null,"name":"StreamExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":127},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":10796,"byte_end":10805,"line_start":300,"line_end":300,"column_start":44,"column_end":53},"alias_span":null,"name":"TryStream","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4636},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":10807,"byte_end":10819,"line_start":300,"line_end":300,"column_start":55,"column_end":67},"alias_span":null,"name":"TryStreamExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":1,"index":12869},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458240,"byte_end":458247,"line_start":14,"line_end":14,"column_start":22,"column_end":29},"alias_span":null,"name":"Context","value":"","parent":{"krate":0,"index":6012}},{"kind":"Use","ref_id":{"krate":1,"index":46111},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458249,"byte_end":458253,"line_start":14,"line_end":14,"column_start":31,"column_end":35},"alias_span":null,"name":"Poll","value":"","parent":{"krate":0,"index":6012}},{"kind":"Use","ref_id":{"krate":1,"index":46147},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458255,"byte_end":458263,"line_start":14,"line_end":14,"column_start":37,"column_end":45},"alias_span":null,"name":"RawWaker","value":"","parent":{"krate":0,"index":6012}},{"kind":"Use","ref_id":{"krate":1,"index":46156},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458265,"byte_end":458279,"line_start":14,"line_end":14,"column_start":47,"column_end":61},"alias_span":null,"name":"RawWakerVTable","value":"","parent":{"krate":0,"index":6012}},{"kind":"Use","ref_id":{"krate":1,"index":12879},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458281,"byte_end":458286,"line_start":14,"line_end":14,"column_start":63,"column_end":68},"alias_span":null,"name":"Waker","value":"","parent":{"krate":0,"index":6012}},{"kind":"Use","ref_id":{"krate":20,"index":237},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458313,"byte_end":458322,"line_start":16,"line_end":16,"column_start":24,"column_end":33},"alias_span":null,"name":"FutureObj","value":"","parent":{"krate":0,"index":6012}},{"kind":"Use","ref_id":{"krate":20,"index":203},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458324,"byte_end":458338,"line_start":16,"line_end":16,"column_start":35,"column_end":49},"alias_span":null,"name":"LocalFutureObj","value":"","parent":{"krate":0,"index":6012}},{"kind":"Use","ref_id":{"krate":20,"index":19},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458340,"byte_end":458350,"line_start":16,"line_end":16,"column_start":51,"column_end":61},"alias_span":null,"name":"LocalSpawn","value":"","parent":{"krate":0,"index":6012}},{"kind":"Use","ref_id":{"krate":20,"index":16},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458352,"byte_end":458357,"line_start":16,"line_end":16,"column_start":63,"column_end":68},"alias_span":null,"name":"Spawn","value":"","parent":{"krate":0,"index":6012}},{"kind":"Use","ref_id":{"krate":20,"index":22},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458359,"byte_end":458369,"line_start":16,"line_end":16,"column_start":70,"column_end":80},"alias_span":null,"name":"SpawnError","value":"","parent":{"krate":0,"index":6012}},{"kind":"Use","ref_id":{"krate":20,"index":258},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458371,"byte_end":458386,"line_start":16,"line_end":16,"column_start":82,"column_end":97},"alias_span":null,"name":"UnsafeFutureObj","value":"","parent":{"krate":0,"index":6012}},{"kind":"Use","ref_id":{"krate":20,"index":378},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458412,"byte_end":458422,"line_start":18,"line_end":18,"column_start":23,"column_end":33},"alias_span":null,"name":"noop_waker","value":"","parent":{"krate":0,"index":6012}},{"kind":"Use","ref_id":{"krate":20,"index":379},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458446,"byte_end":458460,"line_start":19,"line_end":19,"column_start":23,"column_end":37},"alias_span":null,"name":"noop_waker_ref","value":"","parent":{"krate":0,"index":6012}},{"kind":"Use","ref_id":{"krate":20,"index":94},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458546,"byte_end":458553,"line_start":23,"line_end":23,"column_start":23,"column_end":30},"alias_span":null,"name":"ArcWake","value":"","parent":{"krate":0,"index":6012}},{"kind":"Use","ref_id":{"krate":20,"index":122},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458639,"byte_end":458644,"line_start":27,"line_end":27,"column_start":23,"column_end":28},"alias_span":null,"name":"waker","value":"","parent":{"krate":0,"index":6012}},{"kind":"Use","ref_id":{"krate":20,"index":170},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458731,"byte_end":458740,"line_start":31,"line_end":31,"column_start":24,"column_end":33},"alias_span":null,"name":"waker_ref","value":"","parent":{"krate":0,"index":6012}},{"kind":"Use","ref_id":{"krate":20,"index":407},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458742,"byte_end":458750,"line_start":31,"line_end":31,"column_start":35,"column_end":43},"alias_span":null,"name":"WakerRef","value":"","parent":{"krate":0,"index":6012}},{"kind":"Use","ref_id":{"krate":5,"index":194},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458829,"byte_end":458840,"line_start":34,"line_end":34,"column_start":41,"column_end":52},"alias_span":null,"name":"AtomicWaker","value":"","parent":{"krate":0,"index":6012}},{"kind":"Use","ref_id":{"krate":0,"index":6101},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458876,"byte_end":458889,"line_start":37,"line_end":37,"column_start":23,"column_end":36},"alias_span":null,"name":"LocalSpawnExt","value":"","parent":{"krate":0,"index":6012}},{"kind":"Use","ref_id":{"krate":0,"index":6098},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458891,"byte_end":458899,"line_start":37,"line_end":37,"column_start":38,"column_end":46},"alias_span":null,"name":"SpawnExt","value":"","parent":{"krate":0,"index":6012}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":0,"byte_end":11572,"line_start":1,"line_end":337,"column_start":1,"column_end":18},"name":"","qualname":"::","value":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":1565},{"krate":0,"index":1566},{"krate":0,"index":1569},{"krate":0,"index":1572},{"krate":0,"index":1575},{"krate":0,"index":1578},{"krate":0,"index":5999},{"krate":0,"index":6000},{"krate":0,"index":6003},{"krate":0,"index":6006},{"krate":0,"index":6009},{"krate":0,"index":6012},{"krate":0,"index":6111},{"krate":0,"index":6113},{"krate":0,"index":6114},{"krate":0,"index":6175},{"krate":0,"index":6389}],"decl_id":null,"docs":" Combinators and utilities for working with `Future`s, `Stream`s, `Sink`s,\n and the `AsyncRead` and `AsyncWrite` traits.\n","sig":null,"attributes":[{"value":"/ Combinators and utilities for working with `Future`s, `Stream`s, `Sink`s,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":0,"byte_end":77,"line_start":1,"line_end":1,"column_start":1,"column_end":78}},{"value":"/ and the `AsyncRead` and `AsyncWrite` traits.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":78,"byte_end":126,"line_start":2,"line_end":2,"column_start":1,"column_end":49}},{"value":"no_std","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":234,"byte_end":240,"line_start":5,"line_end":5,"column_start":35,"column_end":41}},{"value":"warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\n       single_use_lifetimes, unreachable_pub)","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":243,"byte_end":375,"line_start":6,"line_end":12,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":15},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"future","qualname":"::future","value":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","parent":null,"children":[{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":270},{"krate":0,"index":273},{"krate":0,"index":276},{"krate":0,"index":279},{"krate":0,"index":282},{"krate":0,"index":285},{"krate":0,"index":288},{"krate":0,"index":291},{"krate":0,"index":294},{"krate":0,"index":297},{"krate":0,"index":300},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":544},{"krate":0,"index":547},{"krate":0,"index":550},{"krate":0,"index":553},{"krate":0,"index":556},{"krate":0,"index":559},{"krate":0,"index":562},{"krate":0,"index":565},{"krate":0,"index":568},{"krate":0,"index":571},{"krate":0,"index":574},{"krate":0,"index":577},{"krate":0,"index":580},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":619},{"krate":0,"index":622},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":664},{"krate":0,"index":667},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":713},{"krate":0,"index":716},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":765},{"krate":0,"index":768},{"krate":0,"index":802},{"krate":0,"index":805},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":845},{"krate":0,"index":848},{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":895},{"krate":0,"index":898},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":943},{"krate":0,"index":946},{"krate":0,"index":949},{"krate":0,"index":952},{"krate":0,"index":1005},{"krate":0,"index":1006},{"krate":0,"index":1009},{"krate":0,"index":1012},{"krate":0,"index":1015},{"krate":0,"index":1018},{"krate":0,"index":1021},{"krate":0,"index":1024},{"krate":0,"index":1027},{"krate":0,"index":1030},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1108},{"krate":0,"index":1111},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1158},{"krate":0,"index":1161},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1210},{"krate":0,"index":1213},{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":1270},{"krate":0,"index":1273},{"krate":0,"index":1276},{"krate":0,"index":1279},{"krate":0,"index":1282},{"krate":0,"index":1285},{"krate":0,"index":1288},{"krate":0,"index":1291},{"krate":0,"index":1360},{"krate":0,"index":1361},{"krate":0,"index":1364},{"krate":0,"index":1367},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1407},{"krate":0,"index":1410},{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1460},{"krate":0,"index":1463},{"krate":0,"index":1524},{"krate":0,"index":1527},{"krate":0,"index":1546},{"krate":0,"index":1547},{"krate":0,"index":1550},{"krate":0,"index":1553},{"krate":0,"index":1556},{"krate":0,"index":1557},{"krate":0,"index":1559},{"krate":0,"index":1562}],"decl_id":null,"docs":" Asynchronous values.","sig":null,"attributes":[{"value":"/ Asynchronous values.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":11574,"byte_end":11598,"line_start":1,"line_end":1,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":11599,"byte_end":11602,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module contains:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":11603,"byte_end":11628,"line_start":3,"line_end":3,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":11629,"byte_end":11632,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ - The [`Future`] trait.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":11633,"byte_end":11660,"line_start":5,"line_end":5,"column_start":1,"column_end":28}},{"value":"/ - The [`FutureExt`] and [`TryFutureExt`] trait, which provides adapters for","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":11661,"byte_end":11740,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/   chaining and composing futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":11741,"byte_end":11778,"line_start":7,"line_end":7,"column_start":1,"column_end":38}},{"value":"/ - Top-level future combinators like [`lazy`](lazy()) which creates a future","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":11779,"byte_end":11858,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/   from a closure that defines its return value, and [`ready`](ready()),","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":11859,"byte_end":11934,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"/   which constructs a future with an immediate defined value.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/mod.rs","byte_start":11935,"byte_end":11999,"line_start":10,"line_end":10,"column_start":1,"column_end":65}}]},{"kind":"StructVariant","id":{"krate":0,"index":6408},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/flatten.rs","byte_start":35381,"byte_end":35386,"line_start":14,"line_end":14,"column_start":9,"column_end":14},"name":"First","qualname":"::future::future::flatten::Flatten::First","value":"Flatten::First { f }","parent":{"krate":0,"index":6405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6410},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/flatten.rs","byte_start":35415,"byte_end":35421,"line_start":15,"line_end":15,"column_start":9,"column_end":15},"name":"Second","qualname":"::future::future::flatten::Flatten::Second","value":"Flatten::Second { f }","parent":{"krate":0,"index":6405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6412},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/flatten.rs","byte_start":35450,"byte_end":35455,"line_start":16,"line_end":16,"column_start":9,"column_end":14},"name":"Empty","qualname":"::future::future::flatten::Flatten::Empty","value":"Flatten::Empty","parent":{"krate":0,"index":6405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6405},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/flatten.rs","byte_start":35351,"byte_end":35358,"line_start":13,"line_end":13,"column_start":14,"column_end":21},"name":"Flatten","qualname":"::future::future::flatten::Flatten","value":"pub enum Flatten<Fut1, Fut2> {\n    First {\n        f: Fut1,\n    },\n    Second {\n        f: Fut2,\n    },\n    Empty,\n}","parent":null,"children":[{"krate":0,"index":6408},{"krate":0,"index":6410},{"krate":0,"index":6412}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6453},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":39812,"byte_end":39816,"line_start":11,"line_end":11,"column_start":16,"column_end":20},"name":"Fuse","qualname":"::future::future::fuse::Fuse","value":"Fuse {  }","parent":null,"children":[{"krate":0,"index":6455}],"decl_id":null,"docs":" Future for the [`fuse`](super::FutureExt::fuse) method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":41635,"byte_end":41645,"line_start":69,"line_end":69,"column_start":12,"column_end":22},"name":"terminated","qualname":"<Fuse<Fut>>::terminated","value":"pub fn terminated() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Fuse`-wrapped future which is already terminated.","sig":null,"attributes":[{"value":"/ Creates a new `Fuse`-wrapped future which is already terminated.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40013,"byte_end":40081,"line_start":24,"line_end":24,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40086,"byte_end":40089,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ This can be useful in combination with looping and the `select!`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40094,"byte_end":40162,"line_start":26,"line_end":26,"column_start":5,"column_end":73}},{"value":"/ macro, which bypasses terminated futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40167,"byte_end":40212,"line_start":27,"line_end":27,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40217,"byte_end":40220,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40225,"byte_end":40239,"line_start":29,"line_end":29,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40244,"byte_end":40247,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40252,"byte_end":40259,"line_start":31,"line_end":31,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40264,"byte_end":40305,"line_start":32,"line_end":32,"column_start":5,"column_end":46}},{"value":"/ use futures::channel::mpsc;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40310,"byte_end":40341,"line_start":33,"line_end":33,"column_start":5,"column_end":36}},{"value":"/ use futures::future::{Fuse, FusedFuture, FutureExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40346,"byte_end":40402,"line_start":34,"line_end":34,"column_start":5,"column_end":61}},{"value":"/ use futures::select;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40407,"byte_end":40431,"line_start":35,"line_end":35,"column_start":5,"column_end":29}},{"value":"/ use futures::stream::StreamExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40436,"byte_end":40471,"line_start":36,"line_end":36,"column_start":5,"column_end":40}},{"value":"/ use futures::pin_mut;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40476,"byte_end":40501,"line_start":37,"line_end":37,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40506,"byte_end":40509,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ let (sender, mut stream) = mpsc::unbounded();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40514,"byte_end":40563,"line_start":39,"line_end":39,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40568,"byte_end":40571,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ // Send a few messages into the stream","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40576,"byte_end":40618,"line_start":41,"line_end":41,"column_start":5,"column_end":47}},{"value":"/ sender.unbounded_send(()).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40623,"byte_end":40662,"line_start":42,"line_end":42,"column_start":5,"column_end":44}},{"value":"/ sender.unbounded_send(()).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40667,"byte_end":40706,"line_start":43,"line_end":43,"column_start":5,"column_end":44}},{"value":"/ drop(sender);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40711,"byte_end":40728,"line_start":44,"line_end":44,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40733,"byte_end":40736,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ // Use `Fuse::terminated()` to create an already-terminated future","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40741,"byte_end":40811,"line_start":46,"line_end":46,"column_start":5,"column_end":75}},{"value":"/ // which may be instantiated later.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40816,"byte_end":40855,"line_start":47,"line_end":47,"column_start":5,"column_end":44}},{"value":"/ let foo_printer = Fuse::terminated();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40860,"byte_end":40901,"line_start":48,"line_end":48,"column_start":5,"column_end":46}},{"value":"/ pin_mut!(foo_printer);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40906,"byte_end":40932,"line_start":49,"line_end":49,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40937,"byte_end":40940,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ loop {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40945,"byte_end":40955,"line_start":51,"line_end":51,"column_start":5,"column_end":15}},{"value":"/     select! {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40960,"byte_end":40977,"line_start":52,"line_end":52,"column_start":5,"column_end":22}},{"value":"/         _ = foo_printer => {},","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":40982,"byte_end":41016,"line_start":53,"line_end":53,"column_start":5,"column_end":39}},{"value":"/         () = stream.select_next_some() => {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":41021,"byte_end":41068,"line_start":54,"line_end":54,"column_start":5,"column_end":52}},{"value":"/             if !foo_printer.is_terminated() {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":41073,"byte_end":41122,"line_start":55,"line_end":55,"column_start":5,"column_end":54}},{"value":"/                 println!(\"Foo is already being printed!\");","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":41127,"byte_end":41189,"line_start":56,"line_end":56,"column_start":5,"column_end":67}},{"value":"/             } else {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":41194,"byte_end":41218,"line_start":57,"line_end":57,"column_start":5,"column_end":29}},{"value":"/                 foo_printer.set(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":41223,"byte_end":41266,"line_start":58,"line_end":58,"column_start":5,"column_end":48}},{"value":"/                     // do some other async operations","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":41271,"byte_end":41328,"line_start":59,"line_end":59,"column_start":5,"column_end":62}},{"value":"/                     println!(\"Printing foo from `foo_printer` future\");","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":41333,"byte_end":41408,"line_start":60,"line_end":60,"column_start":5,"column_end":80}},{"value":"/                 }.fuse());","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":41413,"byte_end":41443,"line_start":61,"line_end":61,"column_start":5,"column_end":35}},{"value":"/             }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":41448,"byte_end":41465,"line_start":62,"line_end":62,"column_start":5,"column_end":22}},{"value":"/         },","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":41470,"byte_end":41484,"line_start":63,"line_end":63,"column_start":5,"column_end":19}},{"value":"/         complete => break, // `foo_printer` is terminated and the stream is done","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":41489,"byte_end":41573,"line_start":64,"line_end":64,"column_start":5,"column_end":89}},{"value":"/     }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":41578,"byte_end":41587,"line_start":65,"line_end":65,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":41592,"byte_end":41597,"line_start":66,"line_end":66,"column_start":5,"column_end":10}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":41602,"byte_end":41611,"line_start":67,"line_end":67,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":41616,"byte_end":41623,"line_start":68,"line_end":68,"column_start":5,"column_end":12}}]},{"kind":"StructVariant","id":{"krate":0,"index":6491},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/map.rs","byte_start":42703,"byte_end":42713,"line_start":16,"line_end":16,"column_start":9,"column_end":19},"name":"Incomplete","qualname":"::future::future::map::Map::Incomplete","value":"Map::Incomplete { future, f }","parent":{"krate":0,"index":6488},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6494},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/map.rs","byte_start":42797,"byte_end":42805,"line_start":21,"line_end":21,"column_start":9,"column_end":17},"name":"Complete","qualname":"::future::future::map::Map::Complete","value":"Map::Complete","parent":{"krate":0,"index":6488},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6488},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/map.rs","byte_start":42681,"byte_end":42684,"line_start":15,"line_end":15,"column_start":14,"column_end":17},"name":"Map","qualname":"::future::future::map::Map","value":"pub enum Map<Fut, F> {\n    Incomplete {\n        future: Fut,\n        f: F,\n    },\n    Complete,\n}","parent":null,"children":[{"krate":0,"index":6491},{"krate":0,"index":6494}],"decl_id":null,"docs":" Internal Map future\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10757891,"byte_end":10757900,"line_start":542,"line_end":542,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":6539},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":15807,"byte_end":15814,"line_start":31,"line_end":31,"column_start":5,"column_end":12},"name":"Flatten","qualname":"::future::future::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":6541}],"decl_id":null,"docs":" Future for the [`flatten`](super::FutureExt::flatten) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":6587},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":16065,"byte_end":16078,"line_start":39,"line_end":39,"column_start":5,"column_end":18},"name":"FlattenStream","qualname":"::future::future::FlattenStream","value":"FlattenStream {  }","parent":null,"children":[{"krate":0,"index":6589}],"decl_id":null,"docs":" Stream for the [`flatten_stream`](FutureExt::flatten_stream) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":6637},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":16418,"byte_end":16421,"line_start":50,"line_end":50,"column_start":5,"column_end":8},"name":"Map","qualname":"::future::future::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":6640}],"decl_id":null,"docs":" Future for the [`map`](super::FutureExt::map) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":6697},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":16628,"byte_end":16638,"line_start":57,"line_end":57,"column_start":5,"column_end":15},"name":"IntoStream","qualname":"::future::future::IntoStream","value":"IntoStream {  }","parent":null,"children":[{"krate":0,"index":6699}],"decl_id":null,"docs":" Stream for the [`into_stream`](FutureExt::into_stream) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":6747},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":16844,"byte_end":16851,"line_start":64,"line_end":64,"column_start":5,"column_end":12},"name":"MapInto","qualname":"::future::future::MapInto","value":"MapInto {  }","parent":null,"children":[{"krate":0,"index":6750}],"decl_id":null,"docs":" Future for the [`map_into`](FutureExt::map_into) combinator.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":6809},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":17044,"byte_end":17048,"line_start":71,"line_end":71,"column_start":5,"column_end":9},"name":"Then","qualname":"::future::future::Then","value":"Then {  }","parent":null,"children":[{"krate":0,"index":6813}],"decl_id":null,"docs":" Future for the [`then`](FutureExt::then) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":6882},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":17293,"byte_end":17300,"line_start":78,"line_end":78,"column_start":5,"column_end":12},"name":"Inspect","qualname":"::future::future::Inspect","value":"Inspect {  }","parent":null,"children":[{"krate":0,"index":6885}],"decl_id":null,"docs":" Future for the [`inspect`](FutureExt::inspect) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":6942},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":17541,"byte_end":17551,"line_start":85,"line_end":85,"column_start":5,"column_end":15},"name":"NeverError","qualname":"::future::future::NeverError","value":"NeverError {  }","parent":null,"children":[{"krate":0,"index":6944}],"decl_id":null,"docs":" Future for the [`never_error`](super::FutureExt::never_error) combinator.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":6990},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":17764,"byte_end":17773,"line_start":92,"line_end":92,"column_start":5,"column_end":14},"name":"UnitError","qualname":"::future::future::UnitError","value":"UnitError {  }","parent":null,"children":[{"krate":0,"index":6992}],"decl_id":null,"docs":" Future for the [`unit_error`](super::FutureExt::unit_error) combinator.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Trait","id":{"krate":0,"index":239},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":18755,"byte_end":18764,"line_start":123,"line_end":123,"column_start":11,"column_end":20},"name":"FutureExt","qualname":"::future::future::FutureExt","value":"FutureExt: Future","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":243},{"krate":0,"index":245},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265}],"decl_id":null,"docs":" An extension trait for `Future`s that provides a variety of convenient\n adapters.\n","sig":null,"attributes":[{"value":"/ An extension trait for `Future`s that provides a variety of convenient","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":18656,"byte_end":18730,"line_start":121,"line_end":121,"column_start":1,"column_end":75}},{"value":"/ adapters.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":18731,"byte_end":18744,"line_start":122,"line_end":122,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19596,"byte_end":19599,"line_start":146,"line_end":146,"column_start":8,"column_end":11},"name":"map","qualname":"::future::future::FutureExt::map","value":"pub fn map<U, F>(Self, F) -> Map<Self, F> where F: FnOnce(Self::Output) -> U,\nSelf: Sized","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Map this future's output to a different type, returning a new future of\n the resulting type.","sig":null,"attributes":[{"value":"/ Map this future's output to a different type, returning a new future of","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":18779,"byte_end":18854,"line_start":124,"line_end":124,"column_start":5,"column_end":80}},{"value":"/ the resulting type.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":18859,"byte_end":18882,"line_start":125,"line_end":125,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":18887,"byte_end":18890,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ This function is similar to the `Option::map` or `Iterator::map` where","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":18895,"byte_end":18969,"line_start":127,"line_end":127,"column_start":5,"column_end":79}},{"value":"/ it will change the type of the underlying future. This is useful to","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":18974,"byte_end":19045,"line_start":128,"line_end":128,"column_start":5,"column_end":76}},{"value":"/ chain along a computation once a future has been resolved.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19050,"byte_end":19112,"line_start":129,"line_end":129,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19117,"byte_end":19120,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ Note that this function consumes the receiving future and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19125,"byte_end":19196,"line_start":131,"line_end":131,"column_start":5,"column_end":76}},{"value":"/ wrapped version of it, similar to the existing `map` methods in the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19201,"byte_end":19272,"line_start":132,"line_end":132,"column_start":5,"column_end":76}},{"value":"/ standard library.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19277,"byte_end":19298,"line_start":133,"line_end":133,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19303,"byte_end":19306,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19311,"byte_end":19325,"line_start":135,"line_end":135,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19330,"byte_end":19333,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19338,"byte_end":19345,"line_start":137,"line_end":137,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19350,"byte_end":19391,"line_start":138,"line_end":138,"column_start":5,"column_end":46}},{"value":"/ use futures::future::FutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19396,"byte_end":19431,"line_start":139,"line_end":139,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19436,"byte_end":19439,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ let future = async { 1 };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19444,"byte_end":19473,"line_start":141,"line_end":141,"column_start":5,"column_end":34}},{"value":"/ let new_future = future.map(|x| x + 3);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19478,"byte_end":19521,"line_start":142,"line_end":142,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(new_future.await, 4);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19526,"byte_end":19562,"line_start":143,"line_end":143,"column_start":5,"column_end":41}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19567,"byte_end":19576,"line_start":144,"line_end":144,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19581,"byte_end":19588,"line_start":145,"line_end":145,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19996,"byte_end":20004,"line_start":159,"line_end":159,"column_start":8,"column_end":16},"name":"map_into","qualname":"::future::future::FutureExt::map_into","value":"pub fn map_into<U>(Self) -> MapInto<Self, U> where Self::Output: Into<U>,\nSelf: Sized","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Map this future's output to a different type, returning a new future of\n the resulting type.","sig":null,"attributes":[{"value":"/ Map this future's output to a different type, returning a new future of","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19769,"byte_end":19844,"line_start":154,"line_end":154,"column_start":5,"column_end":80}},{"value":"/ the resulting type.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19849,"byte_end":19872,"line_start":155,"line_end":155,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19877,"byte_end":19880,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ This function is equivalent to calling `map(Into::into)` but allows naming","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19885,"byte_end":19963,"line_start":157,"line_end":157,"column_start":5,"column_end":83}},{"value":"/ the return type.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":19968,"byte_end":19988,"line_start":158,"line_end":158,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21016,"byte_end":21020,"line_start":191,"line_end":191,"column_start":8,"column_end":12},"name":"then","qualname":"::future::future::FutureExt::then","value":"pub fn then<Fut, F>(Self, F) -> Then<Self, Fut, F> where\nF: FnOnce(Self::Output) -> Fut, Fut: Future, Self: Sized","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Chain on a computation for when a future finished, passing the result of\n the future to the provided closure `f`.","sig":null,"attributes":[{"value":"/ Chain on a computation for when a future finished, passing the result of","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20163,"byte_end":20239,"line_start":167,"line_end":167,"column_start":5,"column_end":81}},{"value":"/ the future to the provided closure `f`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20244,"byte_end":20287,"line_start":168,"line_end":168,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20292,"byte_end":20295,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ The returned value of the closure must implement the `Future` trait","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20300,"byte_end":20371,"line_start":170,"line_end":170,"column_start":5,"column_end":76}},{"value":"/ and can represent some more work to be done before the composed future","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20376,"byte_end":20450,"line_start":171,"line_end":171,"column_start":5,"column_end":79}},{"value":"/ is finished.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20455,"byte_end":20471,"line_start":172,"line_end":172,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20476,"byte_end":20479,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ The closure `f` is only run *after* successful completion of the `self`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20484,"byte_end":20559,"line_start":174,"line_end":174,"column_start":5,"column_end":80}},{"value":"/ future.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20564,"byte_end":20575,"line_start":175,"line_end":175,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20580,"byte_end":20583,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Note that this function consumes the receiving future and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20588,"byte_end":20659,"line_start":177,"line_end":177,"column_start":5,"column_end":76}},{"value":"/ wrapped version of it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20664,"byte_end":20690,"line_start":178,"line_end":178,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20695,"byte_end":20698,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20703,"byte_end":20717,"line_start":180,"line_end":180,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20722,"byte_end":20725,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20730,"byte_end":20737,"line_start":182,"line_end":182,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20742,"byte_end":20783,"line_start":183,"line_end":183,"column_start":5,"column_end":46}},{"value":"/ use futures::future::FutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20788,"byte_end":20823,"line_start":184,"line_end":184,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20828,"byte_end":20831,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ let future_of_1 = async { 1 };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20836,"byte_end":20870,"line_start":186,"line_end":186,"column_start":5,"column_end":39}},{"value":"/ let future_of_4 = future_of_1.then(|x| async move { x + 3 });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20875,"byte_end":20940,"line_start":187,"line_end":187,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(future_of_4.await, 4);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20945,"byte_end":20982,"line_start":188,"line_end":188,"column_start":5,"column_end":42}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":20987,"byte_end":20996,"line_start":189,"line_end":189,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21001,"byte_end":21008,"line_start":190,"line_end":190,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21890,"byte_end":21901,"line_start":222,"line_end":222,"column_start":8,"column_end":19},"name":"left_future","qualname":"::future::future::FutureExt::left_future","value":"pub fn left_future<B>(Self) -> Either<Self, B> where B: Future<Output =\nSelf::Output>, Self: Sized","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Wrap this future in an `Either` future, making it the left-hand variant\n of that `Either`.","sig":null,"attributes":[{"value":"/ Wrap this future in an `Either` future, making it the left-hand variant","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21232,"byte_end":21307,"line_start":200,"line_end":200,"column_start":5,"column_end":80}},{"value":"/ of that `Either`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21312,"byte_end":21333,"line_start":201,"line_end":201,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21338,"byte_end":21341,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ This can be used in combination with the `right_future` method to write `if`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21346,"byte_end":21426,"line_start":203,"line_end":203,"column_start":5,"column_end":85}},{"value":"/ statements that evaluate to different futures in different branches.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21431,"byte_end":21503,"line_start":204,"line_end":204,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21508,"byte_end":21511,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21516,"byte_end":21530,"line_start":206,"line_end":206,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21535,"byte_end":21538,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21543,"byte_end":21550,"line_start":208,"line_end":208,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21555,"byte_end":21596,"line_start":209,"line_end":209,"column_start":5,"column_end":46}},{"value":"/ use futures::future::FutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21601,"byte_end":21636,"line_start":210,"line_end":210,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21641,"byte_end":21644,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ let x = 6;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21649,"byte_end":21663,"line_start":212,"line_end":212,"column_start":5,"column_end":19}},{"value":"/ let future = if x < 10 {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21668,"byte_end":21696,"line_start":213,"line_end":213,"column_start":5,"column_end":33}},{"value":"/     async { true }.left_future()","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21701,"byte_end":21737,"line_start":214,"line_end":214,"column_start":5,"column_end":41}},{"value":"/ } else {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21742,"byte_end":21754,"line_start":215,"line_end":215,"column_start":5,"column_end":17}},{"value":"/     async { false }.right_future()","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21759,"byte_end":21797,"line_start":216,"line_end":216,"column_start":5,"column_end":43}},{"value":"/ };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21802,"byte_end":21808,"line_start":217,"line_end":217,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21813,"byte_end":21816,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(future.await, true);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21821,"byte_end":21856,"line_start":219,"line_end":219,"column_start":5,"column_end":40}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21861,"byte_end":21870,"line_start":220,"line_end":220,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":21875,"byte_end":21882,"line_start":221,"line_end":221,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22740,"byte_end":22752,"line_start":252,"line_end":252,"column_start":8,"column_end":20},"name":"right_future","qualname":"::future::future::FutureExt::right_future","value":"pub fn right_future<A>(Self) -> Either<A, Self> where A: Future<Output =\nSelf::Output>, Self: Sized","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Wrap this future in an `Either` future, making it the right-hand variant\n of that `Either`.","sig":null,"attributes":[{"value":"/ Wrap this future in an `Either` future, making it the right-hand variant","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22081,"byte_end":22157,"line_start":230,"line_end":230,"column_start":5,"column_end":81}},{"value":"/ of that `Either`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22162,"byte_end":22183,"line_start":231,"line_end":231,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22188,"byte_end":22191,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ This can be used in combination with the `left_future` method to write `if`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22196,"byte_end":22275,"line_start":233,"line_end":233,"column_start":5,"column_end":84}},{"value":"/ statements that evaluate to different futures in different branches.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22280,"byte_end":22352,"line_start":234,"line_end":234,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22357,"byte_end":22360,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22365,"byte_end":22379,"line_start":236,"line_end":236,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22384,"byte_end":22387,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22392,"byte_end":22399,"line_start":238,"line_end":238,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22404,"byte_end":22445,"line_start":239,"line_end":239,"column_start":5,"column_end":46}},{"value":"/ use futures::future::FutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22450,"byte_end":22485,"line_start":240,"line_end":240,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22490,"byte_end":22493,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ let x = 6;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22498,"byte_end":22512,"line_start":242,"line_end":242,"column_start":5,"column_end":19}},{"value":"/ let future = if x > 10 {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22517,"byte_end":22545,"line_start":243,"line_end":243,"column_start":5,"column_end":33}},{"value":"/     async { true }.left_future()","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22550,"byte_end":22586,"line_start":244,"line_end":244,"column_start":5,"column_end":41}},{"value":"/ } else {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22591,"byte_end":22603,"line_start":245,"line_end":245,"column_start":5,"column_end":17}},{"value":"/     async { false }.right_future()","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22608,"byte_end":22646,"line_start":246,"line_end":246,"column_start":5,"column_end":43}},{"value":"/ };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22651,"byte_end":22657,"line_start":247,"line_end":247,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22662,"byte_end":22665,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(future.await, false);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22670,"byte_end":22706,"line_start":249,"line_end":249,"column_start":5,"column_end":41}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22711,"byte_end":22720,"line_start":250,"line_end":250,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22725,"byte_end":22732,"line_start":251,"line_end":251,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23531,"byte_end":23542,"line_start":278,"line_end":278,"column_start":8,"column_end":19},"name":"into_stream","qualname":"::future::future::FutureExt::into_stream","value":"pub fn into_stream(Self) -> IntoStream<Self> where Self: Sized","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Convert this future into a single element stream.","sig":null,"attributes":[{"value":"/ Convert this future into a single element stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22933,"byte_end":22986,"line_start":260,"line_end":260,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22991,"byte_end":22994,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ The returned stream contains single success if this future resolves to","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":22999,"byte_end":23073,"line_start":262,"line_end":262,"column_start":5,"column_end":79}},{"value":"/ success or single error if this future resolves into error.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23078,"byte_end":23141,"line_start":263,"line_end":263,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23146,"byte_end":23149,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23154,"byte_end":23168,"line_start":265,"line_end":265,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23173,"byte_end":23176,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23181,"byte_end":23188,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23193,"byte_end":23234,"line_start":268,"line_end":268,"column_start":5,"column_end":46}},{"value":"/ use futures::future::FutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23239,"byte_end":23274,"line_start":269,"line_end":269,"column_start":5,"column_end":40}},{"value":"/ use futures::stream::StreamExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23279,"byte_end":23314,"line_start":270,"line_end":270,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23319,"byte_end":23322,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ let future = async { 17 };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23327,"byte_end":23357,"line_start":272,"line_end":272,"column_start":5,"column_end":35}},{"value":"/ let stream = future.into_stream();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23362,"byte_end":23400,"line_start":273,"line_end":273,"column_start":5,"column_end":43}},{"value":"/ let collected: Vec<_> = stream.collect().await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23405,"byte_end":23456,"line_start":274,"line_end":274,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(collected, vec![17]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23461,"byte_end":23497,"line_start":275,"line_end":275,"column_start":5,"column_end":41}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23502,"byte_end":23511,"line_start":276,"line_end":276,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23516,"byte_end":23523,"line_start":277,"line_end":277,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24407,"byte_end":24414,"line_start":307,"line_end":307,"column_start":8,"column_end":15},"name":"flatten","qualname":"::future::future::FutureExt::flatten","value":"pub fn flatten(Self) -> Flatten<Self> where Self::Output: Future, Self: Sized","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Flatten the execution of this future when the output of this\n future is itself another future.","sig":null,"attributes":[{"value":"/ Flatten the execution of this future when the output of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23681,"byte_end":23745,"line_start":285,"line_end":285,"column_start":5,"column_end":69}},{"value":"/ future is itself another future.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23750,"byte_end":23786,"line_start":286,"line_end":286,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23791,"byte_end":23794,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ This can be useful when combining futures together to flatten the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23799,"byte_end":23868,"line_start":288,"line_end":288,"column_start":5,"column_end":74}},{"value":"/ computation out the final result.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23873,"byte_end":23910,"line_start":289,"line_end":289,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23915,"byte_end":23918,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ This method is roughly equivalent to `self.then(|x| x)`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23923,"byte_end":23983,"line_start":291,"line_end":291,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23988,"byte_end":23991,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ Note that this function consumes the receiving future and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":23996,"byte_end":24067,"line_start":293,"line_end":293,"column_start":5,"column_end":76}},{"value":"/ wrapped version of it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24072,"byte_end":24098,"line_start":294,"line_end":294,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24103,"byte_end":24106,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24111,"byte_end":24125,"line_start":296,"line_end":296,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24130,"byte_end":24133,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24138,"byte_end":24145,"line_start":298,"line_end":298,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24150,"byte_end":24191,"line_start":299,"line_end":299,"column_start":5,"column_end":46}},{"value":"/ use futures::future::FutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24196,"byte_end":24231,"line_start":300,"line_end":300,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24236,"byte_end":24239,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ let nested_future = async { async { 1 } };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24244,"byte_end":24290,"line_start":302,"line_end":302,"column_start":5,"column_end":51}},{"value":"/ let future = nested_future.flatten();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24295,"byte_end":24336,"line_start":303,"line_end":303,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(future.await, 1);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24341,"byte_end":24373,"line_start":304,"line_end":304,"column_start":5,"column_end":37}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24378,"byte_end":24387,"line_start":305,"line_end":305,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24392,"byte_end":24399,"line_start":306,"line_end":306,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25519,"byte_end":25533,"line_start":341,"line_end":341,"column_start":8,"column_end":22},"name":"flatten_stream","qualname":"::future::future::FutureExt::flatten_stream","value":"pub fn flatten_stream(Self) -> FlattenStream<Self> where Self::Output: Stream,\nSelf: Sized","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Flatten the execution of this future when the successful result of this\n future is a stream.","sig":null,"attributes":[{"value":"/ Flatten the execution of this future when the successful result of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24628,"byte_end":24703,"line_start":316,"line_end":316,"column_start":5,"column_end":80}},{"value":"/ future is a stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24708,"byte_end":24731,"line_start":317,"line_end":317,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24736,"byte_end":24739,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ This can be useful when stream initialization is deferred, and it is","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24744,"byte_end":24816,"line_start":319,"line_end":319,"column_start":5,"column_end":77}},{"value":"/ convenient to work with that stream as if stream was available at the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24821,"byte_end":24894,"line_start":320,"line_end":320,"column_start":5,"column_end":78}},{"value":"/ call site.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24899,"byte_end":24913,"line_start":321,"line_end":321,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24918,"byte_end":24921,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ Note that this function consumes this future and returns a wrapped","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":24926,"byte_end":24996,"line_start":323,"line_end":323,"column_start":5,"column_end":75}},{"value":"/ version of it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25001,"byte_end":25019,"line_start":324,"line_end":324,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25024,"byte_end":25027,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25032,"byte_end":25046,"line_start":326,"line_end":326,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25051,"byte_end":25054,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25059,"byte_end":25066,"line_start":328,"line_end":328,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25071,"byte_end":25112,"line_start":329,"line_end":329,"column_start":5,"column_end":46}},{"value":"/ use futures::future::FutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25117,"byte_end":25152,"line_start":330,"line_end":330,"column_start":5,"column_end":40}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25157,"byte_end":25200,"line_start":331,"line_end":331,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25205,"byte_end":25208,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ let stream_items = vec![17, 18, 19];","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25213,"byte_end":25253,"line_start":333,"line_end":333,"column_start":5,"column_end":45}},{"value":"/ let future_of_a_stream = async { stream::iter(stream_items) };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25258,"byte_end":25324,"line_start":334,"line_end":334,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25329,"byte_end":25332,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ let stream = future_of_a_stream.flatten_stream();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25337,"byte_end":25390,"line_start":336,"line_end":336,"column_start":5,"column_end":58}},{"value":"/ let list: Vec<_> = stream.collect().await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25395,"byte_end":25441,"line_start":337,"line_end":337,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(list, vec![17, 18, 19]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25446,"byte_end":25485,"line_start":338,"line_end":338,"column_start":5,"column_end":44}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25490,"byte_end":25499,"line_start":339,"line_end":339,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25504,"byte_end":25511,"line_start":340,"line_end":340,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":26621,"byte_end":26625,"line_start":365,"line_end":365,"column_start":8,"column_end":12},"name":"fuse","qualname":"::future::future::FutureExt::fuse","value":"pub fn fuse(Self) -> Fuse<Self> where Self: Sized","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Fuse a future such that `poll` will never again be called once it has\n completed. This method can be used to turn any `Future` into a\n `FusedFuture`.","sig":null,"attributes":[{"value":"/ Fuse a future such that `poll` will never again be called once it has","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25726,"byte_end":25799,"line_start":349,"line_end":349,"column_start":5,"column_end":78}},{"value":"/ completed. This method can be used to turn any `Future` into a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25804,"byte_end":25870,"line_start":350,"line_end":350,"column_start":5,"column_end":71}},{"value":"/ `FusedFuture`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25875,"byte_end":25893,"line_start":351,"line_end":351,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25898,"byte_end":25901,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ Normally, once a future has returned `Poll::Ready` from `poll`,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25906,"byte_end":25973,"line_start":353,"line_end":353,"column_start":5,"column_end":72}},{"value":"/ any further calls could exhibit bad behavior such as blocking","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":25978,"byte_end":26043,"line_start":354,"line_end":354,"column_start":5,"column_end":70}},{"value":"/ forever, panicking, never returning, etc. If it is known that `poll`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":26048,"byte_end":26120,"line_start":355,"line_end":355,"column_start":5,"column_end":77}},{"value":"/ may be called too often then this method can be used to ensure that it","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":26125,"byte_end":26199,"line_start":356,"line_end":356,"column_start":5,"column_end":79}},{"value":"/ has defined semantics.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":26204,"byte_end":26230,"line_start":357,"line_end":357,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":26235,"byte_end":26238,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ If a `fuse`d future is `poll`ed after having returned `Poll::Ready`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":26243,"byte_end":26314,"line_start":359,"line_end":359,"column_start":5,"column_end":76}},{"value":"/ previously, it will return `Poll::Pending`, from `poll` again (and will","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":26319,"byte_end":26394,"line_start":360,"line_end":360,"column_start":5,"column_end":80}},{"value":"/ continue to do so for all future calls to `poll`).","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":26399,"byte_end":26453,"line_start":361,"line_end":361,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":26458,"byte_end":26461,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ This combinator will drop the underlying future as soon as it has been","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":26466,"byte_end":26540,"line_start":363,"line_end":363,"column_start":5,"column_end":79}},{"value":"/ completed to ensure resources are reclaimed as soon as possible.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":26545,"byte_end":26613,"line_start":364,"line_end":364,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":27465,"byte_end":27472,"line_start":391,"line_end":391,"column_start":8,"column_end":15},"name":"inspect","qualname":"::future::future::FutureExt::inspect","value":"pub fn inspect<F>(Self, F) -> Inspect<Self, F> where F: FnOnce(&Self::Output)\n-> (), Self: Sized","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Do something with the output of a future before passing it on.","sig":null,"attributes":[{"value":"/ Do something with the output of a future before passing it on.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":26771,"byte_end":26837,"line_start":373,"line_end":373,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":26842,"byte_end":26845,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ When using futures, you'll often chain several of them together.  While","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":26850,"byte_end":26925,"line_start":375,"line_end":375,"column_start":5,"column_end":80}},{"value":"/ working on such code, you might want to check out what's happening at","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":26930,"byte_end":27003,"line_start":376,"line_end":376,"column_start":5,"column_end":78}},{"value":"/ various parts in the pipeline, without consuming the intermediate","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":27008,"byte_end":27077,"line_start":377,"line_end":377,"column_start":5,"column_end":74}},{"value":"/ value. To do that, insert a call to `inspect`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":27082,"byte_end":27132,"line_start":378,"line_end":378,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":27137,"byte_end":27140,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":27145,"byte_end":27159,"line_start":380,"line_end":380,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":27164,"byte_end":27167,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":27172,"byte_end":27179,"line_start":382,"line_end":382,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":27184,"byte_end":27225,"line_start":383,"line_end":383,"column_start":5,"column_end":46}},{"value":"/ use futures::future::FutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":27230,"byte_end":27265,"line_start":384,"line_end":384,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":27270,"byte_end":27273,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ let future = async { 1 };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":27278,"byte_end":27307,"line_start":386,"line_end":386,"column_start":5,"column_end":34}},{"value":"/ let new_future = future.inspect(|&x| println!(\"about to resolve: {}\", x));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":27312,"byte_end":27390,"line_start":387,"line_end":387,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(new_future.await, 1);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":27395,"byte_end":27431,"line_start":388,"line_end":388,"column_start":5,"column_end":41}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":27436,"byte_end":27445,"line_start":389,"line_end":389,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":27450,"byte_end":27457,"line_start":390,"line_end":390,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":31942,"byte_end":31947,"line_start":518,"line_end":518,"column_start":8,"column_end":13},"name":"boxed","qualname":"::future::future::FutureExt::boxed","value":"pub fn boxed<'a>(Self) -> BoxFuture where Self: Sized + Send + 'a","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Wrap the future in a Box, pinning it.","sig":null,"attributes":[{"value":"/ Wrap the future in a Box, pinning it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":31713,"byte_end":31754,"line_start":513,"line_end":513,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":31759,"byte_end":31762,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ This method is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":31767,"byte_end":31842,"line_start":515,"line_end":515,"column_start":5,"column_end":80}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":31847,"byte_end":31904,"line_start":516,"line_end":516,"column_start":5,"column_end":62}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":31909,"byte_end":31934,"line_start":517,"line_end":517,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":32407,"byte_end":32418,"line_start":532,"line_end":532,"column_start":8,"column_end":19},"name":"boxed_local","qualname":"::future::future::FutureExt::boxed_local","value":"pub fn boxed_local<'a>(Self) -> LocalBoxFuture where Self: Sized + 'a","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Wrap the future in a Box, pinning it.","sig":null,"attributes":[{"value":"/ Wrap the future in a Box, pinning it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":32106,"byte_end":32147,"line_start":525,"line_end":525,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":32152,"byte_end":32155,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ Similar to `boxed`, but without the `Send` requirement.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":32160,"byte_end":32219,"line_start":527,"line_end":527,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":32224,"byte_end":32227,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ This method is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":32232,"byte_end":32307,"line_start":529,"line_end":529,"column_start":5,"column_end":80}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":32312,"byte_end":32369,"line_start":530,"line_end":530,"column_start":5,"column_end":62}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":32374,"byte_end":32399,"line_start":531,"line_end":531,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":32708,"byte_end":32718,"line_start":541,"line_end":541,"column_start":8,"column_end":18},"name":"unit_error","qualname":"::future::future::FutureExt::unit_error","value":"pub fn unit_error(Self) -> UnitError<Self> where Self: Sized","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Turns a [`Future<Output = T>`](Future) into a\n [`TryFuture<Ok = T, Error = ()`>](futures_core::future::TryFuture).\n","sig":null,"attributes":[{"value":"/ Turns a [`Future<Output = T>`](Future) into a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":32575,"byte_end":32624,"line_start":539,"line_end":539,"column_start":5,"column_end":54}},{"value":"/ [`TryFuture<Ok = T, Error = ()`>](futures_core::future::TryFuture).","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":32629,"byte_end":32700,"line_start":540,"line_end":540,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":33003,"byte_end":33014,"line_start":550,"line_end":550,"column_start":8,"column_end":19},"name":"never_error","qualname":"::future::future::FutureExt::never_error","value":"pub fn never_error(Self) -> NeverError<Self> where Self: Sized","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Turns a [`Future<Output = T>`](Future) into a\n [`TryFuture<Ok = T, Error = Never`>](futures_core::future::TryFuture).\n","sig":null,"attributes":[{"value":"/ Turns a [`Future<Output = T>`](Future) into a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":32867,"byte_end":32916,"line_start":548,"line_end":548,"column_start":5,"column_end":54}},{"value":"/ [`TryFuture<Ok = T, Error = Never`>](futures_core::future::TryFuture).","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":32921,"byte_end":32995,"line_start":549,"line_end":549,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":33245,"byte_end":33255,"line_start":558,"line_end":558,"column_start":8,"column_end":18},"name":"poll_unpin","qualname":"::future::future::FutureExt::poll_unpin","value":"pub fn poll_unpin(&mut Self, &mut Context) -> Poll<Self::Output> where\nSelf: Unpin","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" A convenience for calling `Future::poll` on `Unpin` future types.\n","sig":null,"attributes":[{"value":"/ A convenience for calling `Future::poll` on `Unpin` future types.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":33168,"byte_end":33237,"line_start":557,"line_end":557,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":34651,"byte_end":34663,"line_start":596,"line_end":596,"column_start":8,"column_end":20},"name":"now_or_never","qualname":"::future::future::FutureExt::now_or_never","value":"pub fn now_or_never(Self) -> Option<Self::Output> where Self: Sized","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Evaluates and consumes the future, returning the resulting output if\n the future is ready after the first call to `Future::poll`.","sig":null,"attributes":[{"value":"/ Evaluates and consumes the future, returning the resulting output if","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":33391,"byte_end":33463,"line_start":565,"line_end":565,"column_start":5,"column_end":77}},{"value":"/ the future is ready after the first call to `Future::poll`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":33468,"byte_end":33531,"line_start":566,"line_end":566,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":33536,"byte_end":33539,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ If `poll` instead returns `Poll::Pending`, `None` is returned.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":33544,"byte_end":33610,"line_start":568,"line_end":568,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":33615,"byte_end":33618,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ This method is useful in cases where immediacy is more important than","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":33623,"byte_end":33696,"line_start":570,"line_end":570,"column_start":5,"column_end":78}},{"value":"/ waiting for a result. It is also convenient for quickly obtaining","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":33701,"byte_end":33770,"line_start":571,"line_end":571,"column_start":5,"column_end":74}},{"value":"/ the value of a future that is known to always resolve immediately.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":33775,"byte_end":33845,"line_start":572,"line_end":572,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":33850,"byte_end":33853,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":33858,"byte_end":33872,"line_start":574,"line_end":574,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":33877,"byte_end":33880,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":33885,"byte_end":33892,"line_start":576,"line_end":576,"column_start":5,"column_end":12}},{"value":"/ # use futures::prelude::*;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":33897,"byte_end":33927,"line_start":577,"line_end":577,"column_start":5,"column_end":35}},{"value":"/ use futures::{future::ready, future::pending};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":33932,"byte_end":33982,"line_start":578,"line_end":578,"column_start":5,"column_end":55}},{"value":"/ let future_ready = ready(\"foobar\");","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":33987,"byte_end":34026,"line_start":579,"line_end":579,"column_start":5,"column_end":44}},{"value":"/ let future_pending = pending::<&'static str>();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":34031,"byte_end":34082,"line_start":580,"line_end":580,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":34087,"byte_end":34090,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(future_ready.now_or_never(), Some(\"foobar\"));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":34095,"byte_end":34155,"line_start":582,"line_end":582,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(future_pending.now_or_never(), None);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":34160,"byte_end":34212,"line_start":583,"line_end":583,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":34217,"byte_end":34224,"line_start":584,"line_end":584,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":34229,"byte_end":34232,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ In cases where it is absolutely known that a future should always","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":34237,"byte_end":34306,"line_start":586,"line_end":586,"column_start":5,"column_end":74}},{"value":"/ resolve immediately and never return `Poll::Pending`, this method can","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":34311,"byte_end":34384,"line_start":587,"line_end":587,"column_start":5,"column_end":78}},{"value":"/ be combined with `expect()`:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":34389,"byte_end":34421,"line_start":588,"line_end":588,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":34426,"byte_end":34429,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":34434,"byte_end":34441,"line_start":590,"line_end":590,"column_start":5,"column_end":12}},{"value":"/ # use futures::{prelude::*, future::ready};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":34446,"byte_end":34493,"line_start":591,"line_end":591,"column_start":5,"column_end":52}},{"value":"/ let future_ready = ready(\"foobar\");","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":34498,"byte_end":34537,"line_start":592,"line_end":592,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":34542,"byte_end":34545,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(future_ready.now_or_never().expect(\"Future not ready\"), \"foobar\");","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":34550,"byte_end":34631,"line_start":594,"line_end":594,"column_start":5,"column_end":86}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":34636,"byte_end":34643,"line_start":595,"line_end":595,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":7041},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/into_future.rs","byte_start":66003,"byte_end":66013,"line_start":10,"line_end":10,"column_start":16,"column_end":26},"name":"IntoFuture","qualname":"::future::try_future::into_future::IntoFuture","value":"IntoFuture {  }","parent":null,"children":[{"krate":0,"index":7043}],"decl_id":null,"docs":" Future for the [`into_future`](super::TryFutureExt::into_future) method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"StructVariant","id":{"krate":0,"index":7079},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten.rs","byte_start":66987,"byte_end":66992,"line_start":14,"line_end":14,"column_start":9,"column_end":14},"name":"First","qualname":"::future::try_future::try_flatten::TryFlatten::First","value":"TryFlatten::First { f }","parent":{"krate":0,"index":7076},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":7081},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten.rs","byte_start":67021,"byte_end":67027,"line_start":15,"line_end":15,"column_start":9,"column_end":15},"name":"Second","qualname":"::future::try_future::try_flatten::TryFlatten::Second","value":"TryFlatten::Second { f }","parent":{"krate":0,"index":7076},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7083},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten.rs","byte_start":67056,"byte_end":67061,"line_start":16,"line_end":16,"column_start":9,"column_end":14},"name":"Empty","qualname":"::future::try_future::try_flatten::TryFlatten::Empty","value":"TryFlatten::Empty","parent":{"krate":0,"index":7076},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7076},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten.rs","byte_start":66954,"byte_end":66964,"line_start":13,"line_end":13,"column_start":14,"column_end":24},"name":"TryFlatten","qualname":"::future::try_future::try_flatten::TryFlatten","value":"pub enum TryFlatten<Fut1, Fut2> {\n    First {\n        f: Fut1,\n    },\n    Second {\n        f: Fut2,\n    },\n    Empty,\n}","parent":null,"children":[{"krate":0,"index":7079},{"krate":0,"index":7081},{"krate":0,"index":7083}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":7126},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten_err.rs","byte_start":71930,"byte_end":71935,"line_start":11,"line_end":11,"column_start":9,"column_end":14},"name":"First","qualname":"::future::try_future::try_flatten_err::TryFlattenErr::First","value":"TryFlattenErr::First { f }","parent":{"krate":0,"index":7123},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":7128},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten_err.rs","byte_start":71964,"byte_end":71970,"line_start":12,"line_end":12,"column_start":9,"column_end":15},"name":"Second","qualname":"::future::try_future::try_flatten_err::TryFlattenErr::Second","value":"TryFlattenErr::Second { f }","parent":{"krate":0,"index":7123},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7130},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten_err.rs","byte_start":71999,"byte_end":72004,"line_start":13,"line_end":13,"column_start":9,"column_end":14},"name":"Empty","qualname":"::future::try_future::try_flatten_err::TryFlattenErr::Empty","value":"TryFlattenErr::Empty","parent":{"krate":0,"index":7123},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7123},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten_err.rs","byte_start":71894,"byte_end":71907,"line_start":10,"line_end":10,"column_start":14,"column_end":27},"name":"TryFlattenErr","qualname":"::future::try_future::try_flatten_err::TryFlattenErr","value":"pub enum TryFlattenErr<Fut1, Fut2> {\n    First {\n        f: Fut1,\n    },\n    Second {\n        f: Fut2,\n    },\n    Empty,\n}","parent":null,"children":[{"krate":0,"index":7126},{"krate":0,"index":7128},{"krate":0,"index":7130}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7169},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":44838,"byte_end":44848,"line_start":32,"line_end":32,"column_start":5,"column_end":15},"name":"TryFlatten","qualname":"::future::try_future::TryFlatten","value":"TryFlatten {  }","parent":null,"children":[{"krate":0,"index":7172}],"decl_id":null,"docs":" Future for the [`try_flatten`](TryFutureExt::try_flatten) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7230},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":45096,"byte_end":45109,"line_start":39,"line_end":39,"column_start":5,"column_end":18},"name":"TryFlattenErr","qualname":"::future::try_future::TryFlattenErr","value":"TryFlattenErr {  }","parent":null,"children":[{"krate":0,"index":7233}],"decl_id":null,"docs":" Future for the [`try_flatten_err`](TryFutureExt::try_flatten_err) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7290},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":45377,"byte_end":45393,"line_start":46,"line_end":46,"column_start":5,"column_end":21},"name":"TryFlattenStream","qualname":"::future::try_future::TryFlattenStream","value":"TryFlattenStream {  }","parent":null,"children":[{"krate":0,"index":7292}],"decl_id":null,"docs":" Future for the [`try_flatten_stream`](TryFutureExt::try_flatten_stream) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7341},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":45981,"byte_end":45988,"line_start":63,"line_end":63,"column_start":5,"column_end":12},"name":"AndThen","qualname":"::future::try_future::AndThen","value":"AndThen {  }","parent":null,"children":[{"krate":0,"index":7345}],"decl_id":null,"docs":" Future for the [`and_then`](TryFutureExt::and_then) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7415},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":46228,"byte_end":46234,"line_start":70,"line_end":70,"column_start":5,"column_end":11},"name":"OrElse","qualname":"::future::try_future::OrElse","value":"OrElse {  }","parent":null,"children":[{"krate":0,"index":7419}],"decl_id":null,"docs":" Future for the [`or_else`](TryFutureExt::or_else) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7488},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":46484,"byte_end":46491,"line_start":77,"line_end":77,"column_start":5,"column_end":12},"name":"ErrInto","qualname":"::future::try_future::ErrInto","value":"ErrInto {  }","parent":null,"children":[{"krate":0,"index":7491}],"decl_id":null,"docs":" Future for the [`err_into`](TryFutureExt::err_into) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7549},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":46699,"byte_end":46705,"line_start":84,"line_end":84,"column_start":5,"column_end":11},"name":"OkInto","qualname":"::future::try_future::OkInto","value":"OkInto {  }","parent":null,"children":[{"krate":0,"index":7552}],"decl_id":null,"docs":" Future for the [`ok_into`](TryFutureExt::ok_into) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7610},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":46924,"byte_end":46933,"line_start":91,"line_end":91,"column_start":5,"column_end":14},"name":"InspectOk","qualname":"::future::try_future::InspectOk","value":"InspectOk {  }","parent":null,"children":[{"krate":0,"index":7613}],"decl_id":null,"docs":" Future for the [`inspect_ok`](super::TryFutureExt::inspect_ok) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7671},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":47205,"byte_end":47215,"line_start":98,"line_end":98,"column_start":5,"column_end":15},"name":"InspectErr","qualname":"::future::try_future::InspectErr","value":"InspectErr {  }","parent":null,"children":[{"krate":0,"index":7674}],"decl_id":null,"docs":" Future for the [`inspect_err`](super::TryFutureExt::inspect_err) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7732},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":47588,"byte_end":47593,"line_start":108,"line_end":108,"column_start":5,"column_end":10},"name":"MapOk","qualname":"::future::try_future::MapOk","value":"MapOk {  }","parent":null,"children":[{"krate":0,"index":7735}],"decl_id":null,"docs":" Future for the [`map_ok`](TryFutureExt::map_ok) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7793},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":47834,"byte_end":47840,"line_start":115,"line_end":115,"column_start":5,"column_end":11},"name":"MapErr","qualname":"::future::try_future::MapErr","value":"MapErr {  }","parent":null,"children":[{"krate":0,"index":7796}],"decl_id":null,"docs":" Future for the [`map_err`](TryFutureExt::map_err) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7855},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":48097,"byte_end":48108,"line_start":122,"line_end":122,"column_start":5,"column_end":16},"name":"MapOkOrElse","qualname":"::future::try_future::MapOkOrElse","value":"MapOkOrElse {  }","parent":null,"children":[{"krate":0,"index":7859}],"decl_id":null,"docs":" Future for the [`map_ok_or_else`](TryFutureExt::map_ok_or_else) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7928},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":48392,"byte_end":48404,"line_start":129,"line_end":129,"column_start":5,"column_end":17},"name":"UnwrapOrElse","qualname":"::future::try_future::UnwrapOrElse","value":"UnwrapOrElse {  }","parent":null,"children":[{"krate":0,"index":7931}],"decl_id":null,"docs":" Future for the [`unwrap_or_else`](TryFutureExt::unwrap_or_else) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Trait","id":{"krate":0,"index":506},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":48694,"byte_end":48706,"line_start":137,"line_end":137,"column_start":11,"column_end":23},"name":"TryFutureExt","qualname":"::future::try_future::TryFutureExt","value":"TryFutureExt: TryFuture","parent":null,"children":[{"krate":0,"index":507},{"krate":0,"index":510},{"krate":0,"index":514},{"krate":0,"index":517},{"krate":0,"index":519},{"krate":0,"index":521},{"krate":0,"index":524},{"krate":0,"index":527},{"krate":0,"index":529},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":535},{"krate":0,"index":536}],"decl_id":null,"docs":" Adapters specific to [`Result`]-returning futures\n","sig":null,"attributes":[{"value":"/ Adapters specific to [`Result`]-returning futures","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":48630,"byte_end":48683,"line_start":136,"line_end":136,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51466,"byte_end":51472,"line_start":217,"line_end":217,"column_start":8,"column_end":14},"name":"map_ok","qualname":"::future::try_future::TryFutureExt::map_ok","value":"pub fn map_ok<T, F>(Self, F) -> MapOk<Self, F> where F: FnOnce(Self::Ok) -> T,\nSelf: Sized","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Maps this future's success value to a different value.","sig":null,"attributes":[{"value":"/ Maps this future's success value to a different value.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50094,"byte_end":50152,"line_start":179,"line_end":179,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50157,"byte_end":50160,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ This method can be used to change the [`Ok`](TryFuture::Ok) type of the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50165,"byte_end":50240,"line_start":181,"line_end":181,"column_start":5,"column_end":80}},{"value":"/ future into a different type. It is similar to the [`Result::map`]","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50245,"byte_end":50315,"line_start":182,"line_end":182,"column_start":5,"column_end":75}},{"value":"/ method. You can use this method to chain along a computation once the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50320,"byte_end":50393,"line_start":183,"line_end":183,"column_start":5,"column_end":78}},{"value":"/ future has been resolved.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50398,"byte_end":50427,"line_start":184,"line_end":184,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50432,"byte_end":50435,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ The provided closure `f` will only be called if this future is resolved","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50440,"byte_end":50515,"line_start":186,"line_end":186,"column_start":5,"column_end":80}},{"value":"/ to an [`Ok`]. If it resolves to an [`Err`], panics, or is dropped, then","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50520,"byte_end":50595,"line_start":187,"line_end":187,"column_start":5,"column_end":80}},{"value":"/ the provided closure will never be invoked.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50600,"byte_end":50647,"line_start":188,"line_end":188,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50652,"byte_end":50655,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ Note that this method consumes the future it is called on and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50660,"byte_end":50735,"line_start":190,"line_end":190,"column_start":5,"column_end":80}},{"value":"/ wrapped version of it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50740,"byte_end":50766,"line_start":191,"line_end":191,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50771,"byte_end":50774,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50779,"byte_end":50793,"line_start":193,"line_end":193,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50798,"byte_end":50801,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50806,"byte_end":50813,"line_start":195,"line_end":195,"column_start":5,"column_end":12}},{"value":"/ use futures::future::TryFutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50818,"byte_end":50856,"line_start":196,"line_end":196,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50861,"byte_end":50864,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50869,"byte_end":50910,"line_start":198,"line_end":198,"column_start":5,"column_end":46}},{"value":"/ let future = async { Ok::<i32, i32>(1) };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50915,"byte_end":50960,"line_start":199,"line_end":199,"column_start":5,"column_end":50}},{"value":"/ let future = future.map_ok(|x| x + 3);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":50965,"byte_end":51007,"line_start":200,"line_end":200,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(future.await, Ok(4));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51012,"byte_end":51048,"line_start":201,"line_end":201,"column_start":5,"column_end":41}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51053,"byte_end":51062,"line_start":202,"line_end":202,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51067,"byte_end":51074,"line_start":203,"line_end":203,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51079,"byte_end":51082,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ Calling [`map_ok`](TryFutureExt::map_ok) on an errored future has no","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51087,"byte_end":51159,"line_start":205,"line_end":205,"column_start":5,"column_end":77}},{"value":"/ effect:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51164,"byte_end":51175,"line_start":206,"line_end":206,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51180,"byte_end":51183,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51188,"byte_end":51195,"line_start":208,"line_end":208,"column_start":5,"column_end":12}},{"value":"/ use futures::future::TryFutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51200,"byte_end":51238,"line_start":209,"line_end":209,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51243,"byte_end":51246,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51251,"byte_end":51292,"line_start":211,"line_end":211,"column_start":5,"column_end":46}},{"value":"/ let future = async { Err::<i32, i32>(1) };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51297,"byte_end":51343,"line_start":212,"line_end":212,"column_start":5,"column_end":51}},{"value":"/ let future = future.map_ok(|x| x + 3);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51348,"byte_end":51390,"line_start":213,"line_end":213,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(future.await, Err(1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51395,"byte_end":51432,"line_start":214,"line_end":214,"column_start":5,"column_end":42}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51437,"byte_end":51446,"line_start":215,"line_end":215,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51451,"byte_end":51458,"line_start":216,"line_end":216,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":53031,"byte_end":53045,"line_start":257,"line_end":257,"column_start":8,"column_end":22},"name":"map_ok_or_else","qualname":"::future::try_future::TryFutureExt::map_ok_or_else","value":"pub fn map_ok_or_else<T, E, F>(Self, E, F) -> MapOkOrElse<Self, F, E> where\nF: FnOnce(Self::Ok) -> T, E: FnOnce(Self::Error) -> T, Self: Sized","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Maps this future's success value to a different value, and permits for error handling resulting in the same type.","sig":null,"attributes":[{"value":"/ Maps this future's success value to a different value, and permits for error handling resulting in the same type.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51663,"byte_end":51780,"line_start":225,"line_end":225,"column_start":5,"column_end":122}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51785,"byte_end":51788,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ This method can be used to coalesce your [`Ok`](TryFuture::Ok) type and [`Error`](TryFuture::Error) into another type,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51793,"byte_end":51915,"line_start":227,"line_end":227,"column_start":5,"column_end":127}},{"value":"/ where that type is the same for both outcomes.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51920,"byte_end":51970,"line_start":228,"line_end":228,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51975,"byte_end":51978,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ The provided closure `f` will only be called if this future is resolved","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":51983,"byte_end":52058,"line_start":230,"line_end":230,"column_start":5,"column_end":80}},{"value":"/ to an [`Ok`]. If it resolves to an [`Err`], panics, or is dropped, then","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52063,"byte_end":52138,"line_start":231,"line_end":231,"column_start":5,"column_end":80}},{"value":"/ the provided closure will never be invoked.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52143,"byte_end":52190,"line_start":232,"line_end":232,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52195,"byte_end":52198,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ The provided closure `e` will only be called if this future is resolved","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52203,"byte_end":52278,"line_start":234,"line_end":234,"column_start":5,"column_end":80}},{"value":"/ to an [`Err`]. If it resolves to an [`Ok`], panics, or is dropped, then","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52283,"byte_end":52358,"line_start":235,"line_end":235,"column_start":5,"column_end":80}},{"value":"/ the provided closure will never be invoked.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52363,"byte_end":52410,"line_start":236,"line_end":236,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52415,"byte_end":52418,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ Note that this method consumes the future it is called on and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52423,"byte_end":52498,"line_start":238,"line_end":238,"column_start":5,"column_end":80}},{"value":"/ wrapped version of it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52503,"byte_end":52529,"line_start":239,"line_end":239,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52534,"byte_end":52537,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52542,"byte_end":52556,"line_start":241,"line_end":241,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52561,"byte_end":52564,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52569,"byte_end":52576,"line_start":243,"line_end":243,"column_start":5,"column_end":12}},{"value":"/ use futures::future::TryFutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52581,"byte_end":52619,"line_start":244,"line_end":244,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52624,"byte_end":52627,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52632,"byte_end":52673,"line_start":246,"line_end":246,"column_start":5,"column_end":46}},{"value":"/ let future = async { Ok::<i32, i32>(5) };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52678,"byte_end":52723,"line_start":247,"line_end":247,"column_start":5,"column_end":50}},{"value":"/ let future = future.map_ok_or_else(|x| x * 2, |x| x + 3);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52728,"byte_end":52789,"line_start":248,"line_end":248,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(future.await, 8);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52794,"byte_end":52826,"line_start":249,"line_end":249,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52831,"byte_end":52834,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ let future = async { Err::<i32, i32>(5) };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52839,"byte_end":52885,"line_start":251,"line_end":251,"column_start":5,"column_end":51}},{"value":"/ let future = future.map_ok_or_else(|x| x * 2, |x| x + 3);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52890,"byte_end":52951,"line_start":252,"line_end":252,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(future.await, 10);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52956,"byte_end":52989,"line_start":253,"line_end":253,"column_start":5,"column_end":38}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":52994,"byte_end":53003,"line_start":254,"line_end":254,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":53008,"byte_end":53015,"line_start":255,"line_end":255,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":53020,"byte_end":53023,"line_start":256,"line_end":256,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54728,"byte_end":54735,"line_start":305,"line_end":305,"column_start":8,"column_end":15},"name":"map_err","qualname":"::future::try_future::TryFutureExt::map_err","value":"pub fn map_err<E, F>(Self, F) -> MapErr<Self, F> where F: FnOnce(Self::Error)\n-> E, Self: Sized","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Maps this future's error value to a different value.","sig":null,"attributes":[{"value":"/ Maps this future's error value to a different value.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":53279,"byte_end":53335,"line_start":266,"line_end":266,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":53340,"byte_end":53343,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ This method can be used to change the [`Error`](TryFuture::Error) type","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":53348,"byte_end":53422,"line_start":268,"line_end":268,"column_start":5,"column_end":79}},{"value":"/ of the future into a different type. It is similar to the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":53427,"byte_end":53488,"line_start":269,"line_end":269,"column_start":5,"column_end":66}},{"value":"/ [`Result::map_err`] method. You can use this method for example to","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":53493,"byte_end":53563,"line_start":270,"line_end":270,"column_start":5,"column_end":75}},{"value":"/ ensure that futures have the same [`Error`](TryFuture::Error) type when","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":53568,"byte_end":53643,"line_start":271,"line_end":271,"column_start":5,"column_end":80}},{"value":"/ using [`select!`] or [`join!`].","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":53648,"byte_end":53683,"line_start":272,"line_end":272,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":53688,"byte_end":53691,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ The provided closure `f` will only be called if this future is resolved","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":53696,"byte_end":53771,"line_start":274,"line_end":274,"column_start":5,"column_end":80}},{"value":"/ to an [`Err`]. If it resolves to an [`Ok`], panics, or is dropped, then","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":53776,"byte_end":53851,"line_start":275,"line_end":275,"column_start":5,"column_end":80}},{"value":"/ the provided closure will never be invoked.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":53856,"byte_end":53903,"line_start":276,"line_end":276,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":53908,"byte_end":53911,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ Note that this method consumes the future it is called on and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":53916,"byte_end":53991,"line_start":278,"line_end":278,"column_start":5,"column_end":80}},{"value":"/ wrapped version of it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":53996,"byte_end":54022,"line_start":279,"line_end":279,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54027,"byte_end":54030,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54035,"byte_end":54049,"line_start":281,"line_end":281,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54054,"byte_end":54057,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54062,"byte_end":54069,"line_start":283,"line_end":283,"column_start":5,"column_end":12}},{"value":"/ use futures::future::TryFutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54074,"byte_end":54112,"line_start":284,"line_end":284,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54117,"byte_end":54120,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54125,"byte_end":54166,"line_start":286,"line_end":286,"column_start":5,"column_end":46}},{"value":"/ let future = async { Err::<i32, i32>(1) };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54171,"byte_end":54217,"line_start":287,"line_end":287,"column_start":5,"column_end":51}},{"value":"/ let future = future.map_err(|x| x + 3);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54222,"byte_end":54265,"line_start":288,"line_end":288,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(future.await, Err(4));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54270,"byte_end":54307,"line_start":289,"line_end":289,"column_start":5,"column_end":42}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54312,"byte_end":54321,"line_start":290,"line_end":290,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54326,"byte_end":54333,"line_start":291,"line_end":291,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54338,"byte_end":54341,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ Calling [`map_err`](TryFutureExt::map_err) on a successful future has","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54346,"byte_end":54419,"line_start":293,"line_end":293,"column_start":5,"column_end":78}},{"value":"/ no effect:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54424,"byte_end":54438,"line_start":294,"line_end":294,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54443,"byte_end":54446,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54451,"byte_end":54458,"line_start":296,"line_end":296,"column_start":5,"column_end":12}},{"value":"/ use futures::future::TryFutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54463,"byte_end":54501,"line_start":297,"line_end":297,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54506,"byte_end":54509,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54514,"byte_end":54555,"line_start":299,"line_end":299,"column_start":5,"column_end":46}},{"value":"/ let future = async { Ok::<i32, i32>(1) };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54560,"byte_end":54605,"line_start":300,"line_end":300,"column_start":5,"column_end":50}},{"value":"/ let future = future.map_err(|x| x + 3);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54610,"byte_end":54653,"line_start":301,"line_end":301,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(future.await, Ok(1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54658,"byte_end":54694,"line_start":302,"line_end":302,"column_start":5,"column_end":41}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54699,"byte_end":54708,"line_start":303,"line_end":303,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54713,"byte_end":54720,"line_start":304,"line_end":304,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55825,"byte_end":55833,"line_start":335,"line_end":335,"column_start":8,"column_end":16},"name":"err_into","qualname":"::future::try_future::TryFutureExt::err_into","value":"pub fn err_into<E>(Self) -> ErrInto<Self, E> where Self: Sized,\nSelf::Error: Into<E>","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Maps this future's [`Error`](TryFuture::Error) to a new error type\n using the [`Into`](std::convert::Into) trait.","sig":null,"attributes":[{"value":"/ Maps this future's [`Error`](TryFuture::Error) to a new error type","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":54928,"byte_end":54998,"line_start":313,"line_end":313,"column_start":5,"column_end":75}},{"value":"/ using the [`Into`](std::convert::Into) trait.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55003,"byte_end":55052,"line_start":314,"line_end":314,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55057,"byte_end":55060,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ This method does for futures what the `?`-operator does for","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55065,"byte_end":55128,"line_start":316,"line_end":316,"column_start":5,"column_end":68}},{"value":"/ [`Result`]: It lets the compiler infer the type of the resulting","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55133,"byte_end":55201,"line_start":317,"line_end":317,"column_start":5,"column_end":73}},{"value":"/ error. Just as [`map_err`](TryFutureExt::map_err), this is useful for","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55206,"byte_end":55279,"line_start":318,"line_end":318,"column_start":5,"column_end":78}},{"value":"/ example to ensure that futures have the same [`Error`](TryFuture::Error)","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55284,"byte_end":55360,"line_start":319,"line_end":319,"column_start":5,"column_end":81}},{"value":"/ type when using [`select!`] or [`join!`].","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55365,"byte_end":55410,"line_start":320,"line_end":320,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55415,"byte_end":55418,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ Note that this method consumes the future it is called on and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55423,"byte_end":55498,"line_start":322,"line_end":322,"column_start":5,"column_end":80}},{"value":"/ wrapped version of it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55503,"byte_end":55529,"line_start":323,"line_end":323,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55534,"byte_end":55537,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55542,"byte_end":55556,"line_start":325,"line_end":325,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55561,"byte_end":55564,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55569,"byte_end":55576,"line_start":327,"line_end":327,"column_start":5,"column_end":12}},{"value":"/ use futures::future::TryFutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55581,"byte_end":55619,"line_start":328,"line_end":328,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55624,"byte_end":55627,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55632,"byte_end":55673,"line_start":330,"line_end":330,"column_start":5,"column_end":46}},{"value":"/ let future_err_u8 = async { Err::<(), u8>(1) };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55678,"byte_end":55729,"line_start":331,"line_end":331,"column_start":5,"column_end":56}},{"value":"/ let future_err_i32 = future_err_u8.err_into::<i32>();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55734,"byte_end":55791,"line_start":332,"line_end":332,"column_start":5,"column_end":62}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55796,"byte_end":55805,"line_start":333,"line_end":333,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":55810,"byte_end":55817,"line_start":334,"line_end":334,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":56129,"byte_end":56136,"line_start":345,"line_end":345,"column_start":8,"column_end":15},"name":"ok_into","qualname":"::future::try_future::TryFutureExt::ok_into","value":"pub fn ok_into<U>(Self) -> OkInto<Self, U> where Self: Sized,\nSelf::Ok: Into<U>","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Maps this future's [`Ok`](TryFuture::Ok) to a new type\n using the [`Into`](std::convert::Into) trait.\n","sig":null,"attributes":[{"value":"/ Maps this future's [`Ok`](TryFuture::Ok) to a new type","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":56009,"byte_end":56067,"line_start":343,"line_end":343,"column_start":5,"column_end":63}},{"value":"/ using the [`Into`](std::convert::Into) trait.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":56072,"byte_end":56121,"line_start":344,"line_end":344,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57691,"byte_end":57699,"line_start":389,"line_end":389,"column_start":8,"column_end":16},"name":"and_then","qualname":"::future::try_future::TryFutureExt::and_then","value":"pub fn and_then<Fut, F>(Self, F) -> AndThen<Self, Fut, F> where\nF: FnOnce(Self::Ok) -> Fut, Fut: TryFuture<Error = Self::Error>, Self: Sized","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Executes another future after this one resolves successfully. The\n success value is passed to a closure to create this subsequent future.","sig":null,"attributes":[{"value":"/ Executes another future after this one resolves successfully. The","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":56310,"byte_end":56379,"line_start":353,"line_end":353,"column_start":5,"column_end":74}},{"value":"/ success value is passed to a closure to create this subsequent future.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":56384,"byte_end":56458,"line_start":354,"line_end":354,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":56463,"byte_end":56466,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ The provided closure `f` will only be called if this future is resolved","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":56471,"byte_end":56546,"line_start":356,"line_end":356,"column_start":5,"column_end":80}},{"value":"/ to an [`Ok`]. If this future resolves to an [`Err`], panics, or is","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":56551,"byte_end":56621,"line_start":357,"line_end":357,"column_start":5,"column_end":75}},{"value":"/ dropped, then the provided closure will never be invoked. The","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":56626,"byte_end":56691,"line_start":358,"line_end":358,"column_start":5,"column_end":70}},{"value":"/ [`Error`](TryFuture::Error) type of this future and the future","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":56696,"byte_end":56762,"line_start":359,"line_end":359,"column_start":5,"column_end":71}},{"value":"/ returned by `f` have to match.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":56767,"byte_end":56801,"line_start":360,"line_end":360,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":56806,"byte_end":56809,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ Note that this method consumes the future it is called on and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":56814,"byte_end":56889,"line_start":362,"line_end":362,"column_start":5,"column_end":80}},{"value":"/ wrapped version of it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":56894,"byte_end":56920,"line_start":363,"line_end":363,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":56925,"byte_end":56928,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":56933,"byte_end":56947,"line_start":365,"line_end":365,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":56952,"byte_end":56955,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":56960,"byte_end":56967,"line_start":367,"line_end":367,"column_start":5,"column_end":12}},{"value":"/ use futures::future::TryFutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":56972,"byte_end":57010,"line_start":368,"line_end":368,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57015,"byte_end":57018,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57023,"byte_end":57064,"line_start":370,"line_end":370,"column_start":5,"column_end":46}},{"value":"/ let future = async { Ok::<i32, i32>(1) };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57069,"byte_end":57114,"line_start":371,"line_end":371,"column_start":5,"column_end":50}},{"value":"/ let future = future.and_then(|x| async move { Ok::<i32, i32>(x + 3) });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57119,"byte_end":57194,"line_start":372,"line_end":372,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(future.await, Ok(4));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57199,"byte_end":57235,"line_start":373,"line_end":373,"column_start":5,"column_end":41}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57240,"byte_end":57249,"line_start":374,"line_end":374,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57254,"byte_end":57261,"line_start":375,"line_end":375,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57266,"byte_end":57269,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ Calling [`and_then`](TryFutureExt::and_then) on an errored future has no","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57274,"byte_end":57350,"line_start":377,"line_end":377,"column_start":5,"column_end":81}},{"value":"/ effect:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57355,"byte_end":57366,"line_start":378,"line_end":378,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57371,"byte_end":57374,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57379,"byte_end":57386,"line_start":380,"line_end":380,"column_start":5,"column_end":12}},{"value":"/ use futures::future::TryFutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57391,"byte_end":57429,"line_start":381,"line_end":381,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57434,"byte_end":57437,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57442,"byte_end":57483,"line_start":383,"line_end":383,"column_start":5,"column_end":46}},{"value":"/ let future = async { Err::<i32, i32>(1) };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57488,"byte_end":57534,"line_start":384,"line_end":384,"column_start":5,"column_end":51}},{"value":"/ let future = future.and_then(|x| async move { Err::<i32, i32>(x + 3) });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57539,"byte_end":57615,"line_start":385,"line_end":385,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(future.await, Err(1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57620,"byte_end":57657,"line_start":386,"line_end":386,"column_start":5,"column_end":42}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57662,"byte_end":57671,"line_start":387,"line_end":387,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57676,"byte_end":57683,"line_start":388,"line_end":388,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59320,"byte_end":59327,"line_start":434,"line_end":434,"column_start":8,"column_end":15},"name":"or_else","qualname":"::future::try_future::TryFutureExt::or_else","value":"pub fn or_else<Fut, F>(Self, F) -> OrElse<Self, Fut, F> where\nF: FnOnce(Self::Error) -> Fut, Fut: TryFuture<Ok = Self::Ok>, Self: Sized","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Executes another future if this one resolves to an error. The\n error value is passed to a closure to create this subsequent future.","sig":null,"attributes":[{"value":"/ Executes another future if this one resolves to an error. The","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":57953,"byte_end":58018,"line_start":398,"line_end":398,"column_start":5,"column_end":70}},{"value":"/ error value is passed to a closure to create this subsequent future.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58023,"byte_end":58095,"line_start":399,"line_end":399,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58100,"byte_end":58103,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ The provided closure `f` will only be called if this future is resolved","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58108,"byte_end":58183,"line_start":401,"line_end":401,"column_start":5,"column_end":80}},{"value":"/ to an [`Err`]. If this future resolves to an [`Ok`], panics, or is","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58188,"byte_end":58258,"line_start":402,"line_end":402,"column_start":5,"column_end":75}},{"value":"/ dropped, then the provided closure will never be invoked. The","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58263,"byte_end":58328,"line_start":403,"line_end":403,"column_start":5,"column_end":70}},{"value":"/ [`Ok`](TryFuture::Ok) type of this future and the future returned by `f`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58333,"byte_end":58409,"line_start":404,"line_end":404,"column_start":5,"column_end":81}},{"value":"/ have to match.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58414,"byte_end":58432,"line_start":405,"line_end":405,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58437,"byte_end":58440,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ Note that this method consumes the future it is called on and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58445,"byte_end":58520,"line_start":407,"line_end":407,"column_start":5,"column_end":80}},{"value":"/ wrapped version of it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58525,"byte_end":58551,"line_start":408,"line_end":408,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58556,"byte_end":58559,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58564,"byte_end":58578,"line_start":410,"line_end":410,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58583,"byte_end":58586,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58591,"byte_end":58598,"line_start":412,"line_end":412,"column_start":5,"column_end":12}},{"value":"/ use futures::future::TryFutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58603,"byte_end":58641,"line_start":413,"line_end":413,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58646,"byte_end":58649,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58654,"byte_end":58695,"line_start":415,"line_end":415,"column_start":5,"column_end":46}},{"value":"/ let future = async { Err::<i32, i32>(1) };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58700,"byte_end":58746,"line_start":416,"line_end":416,"column_start":5,"column_end":51}},{"value":"/ let future = future.or_else(|x| async move { Err::<i32, i32>(x + 3) });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58751,"byte_end":58826,"line_start":417,"line_end":417,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(future.await, Err(4));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58831,"byte_end":58868,"line_start":418,"line_end":418,"column_start":5,"column_end":42}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58873,"byte_end":58882,"line_start":419,"line_end":419,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58887,"byte_end":58894,"line_start":420,"line_end":420,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58899,"byte_end":58902,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ Calling [`or_else`](TryFutureExt::or_else) on a successful future has","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58907,"byte_end":58980,"line_start":422,"line_end":422,"column_start":5,"column_end":78}},{"value":"/ no effect:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":58985,"byte_end":58999,"line_start":423,"line_end":423,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59004,"byte_end":59007,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59012,"byte_end":59019,"line_start":425,"line_end":425,"column_start":5,"column_end":12}},{"value":"/ use futures::future::TryFutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59024,"byte_end":59062,"line_start":426,"line_end":426,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59067,"byte_end":59070,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59075,"byte_end":59116,"line_start":428,"line_end":428,"column_start":5,"column_end":46}},{"value":"/ let future = async { Ok::<i32, i32>(1) };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59121,"byte_end":59166,"line_start":429,"line_end":429,"column_start":5,"column_end":50}},{"value":"/ let future = future.or_else(|x| async move { Ok::<i32, i32>(x + 3) });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59171,"byte_end":59245,"line_start":430,"line_end":430,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(future.await, Ok(1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59250,"byte_end":59286,"line_start":431,"line_end":431,"column_start":5,"column_end":41}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59291,"byte_end":59300,"line_start":432,"line_end":432,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59305,"byte_end":59312,"line_start":433,"line_end":433,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":60303,"byte_end":60313,"line_start":461,"line_end":461,"column_start":8,"column_end":18},"name":"inspect_ok","qualname":"::future::try_future::TryFutureExt::inspect_ok","value":"pub fn inspect_ok<F>(Self, F) -> InspectOk<Self, F> where F: FnOnce(&Self::Ok)\n-> (), Self: Sized","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Do something with the success value of a future before passing it on.","sig":null,"attributes":[{"value":"/ Do something with the success value of a future before passing it on.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59576,"byte_end":59649,"line_start":443,"line_end":443,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59654,"byte_end":59657,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ When using futures, you'll often chain several of them together.  While","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59662,"byte_end":59737,"line_start":445,"line_end":445,"column_start":5,"column_end":80}},{"value":"/ working on such code, you might want to check out what's happening at","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59742,"byte_end":59815,"line_start":446,"line_end":446,"column_start":5,"column_end":78}},{"value":"/ various parts in the pipeline, without consuming the intermediate","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59820,"byte_end":59889,"line_start":447,"line_end":447,"column_start":5,"column_end":74}},{"value":"/ value. To do that, insert a call to `inspect_ok`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59894,"byte_end":59947,"line_start":448,"line_end":448,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59952,"byte_end":59955,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59960,"byte_end":59974,"line_start":450,"line_end":450,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59979,"byte_end":59982,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59987,"byte_end":59994,"line_start":452,"line_end":452,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":59999,"byte_end":60040,"line_start":453,"line_end":453,"column_start":5,"column_end":46}},{"value":"/ use futures::future::TryFutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":60045,"byte_end":60083,"line_start":454,"line_end":454,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":60088,"byte_end":60091,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ let future = async { Ok::<_, ()>(1) };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":60096,"byte_end":60138,"line_start":456,"line_end":456,"column_start":5,"column_end":47}},{"value":"/ let new_future = future.inspect_ok(|&x| println!(\"about to resolve: {}\", x));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":60143,"byte_end":60224,"line_start":457,"line_end":457,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(new_future.await, Ok(1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":60229,"byte_end":60269,"line_start":458,"line_end":458,"column_start":5,"column_end":45}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":60274,"byte_end":60283,"line_start":459,"line_end":459,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":60288,"byte_end":60295,"line_start":460,"line_end":460,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":61239,"byte_end":61250,"line_start":487,"line_end":487,"column_start":8,"column_end":19},"name":"inspect_err","qualname":"::future::try_future::TryFutureExt::inspect_err","value":"pub fn inspect_err<F>(Self, F) -> InspectErr<Self, F> where\nF: FnOnce(&Self::Error) -> (), Self: Sized","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Do something with the error value of a future before passing it on.","sig":null,"attributes":[{"value":"/ Do something with the error value of a future before passing it on.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":60512,"byte_end":60583,"line_start":469,"line_end":469,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":60588,"byte_end":60591,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ When using futures, you'll often chain several of them together.  While","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":60596,"byte_end":60671,"line_start":471,"line_end":471,"column_start":5,"column_end":80}},{"value":"/ working on such code, you might want to check out what's happening at","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":60676,"byte_end":60749,"line_start":472,"line_end":472,"column_start":5,"column_end":78}},{"value":"/ various parts in the pipeline, without consuming the intermediate","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":60754,"byte_end":60823,"line_start":473,"line_end":473,"column_start":5,"column_end":74}},{"value":"/ value. To do that, insert a call to `inspect_err`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":60828,"byte_end":60882,"line_start":474,"line_end":474,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":60887,"byte_end":60890,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":60895,"byte_end":60909,"line_start":476,"line_end":476,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":60914,"byte_end":60917,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":60922,"byte_end":60929,"line_start":478,"line_end":478,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":60934,"byte_end":60975,"line_start":479,"line_end":479,"column_start":5,"column_end":46}},{"value":"/ use futures::future::TryFutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":60980,"byte_end":61018,"line_start":480,"line_end":480,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":61023,"byte_end":61026,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ let future = async { Err::<(), _>(1) };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":61031,"byte_end":61074,"line_start":482,"line_end":482,"column_start":5,"column_end":48}},{"value":"/ let new_future = future.inspect_err(|&x| println!(\"about to error: {}\", x));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":61079,"byte_end":61159,"line_start":483,"line_end":483,"column_start":5,"column_end":85}},{"value":"/ assert_eq!(new_future.await, Err(1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":61164,"byte_end":61205,"line_start":484,"line_end":484,"column_start":5,"column_end":46}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":61210,"byte_end":61219,"line_start":485,"line_end":485,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":61224,"byte_end":61231,"line_start":486,"line_end":486,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":61635,"byte_end":61646,"line_start":499,"line_end":499,"column_start":8,"column_end":19},"name":"try_flatten","qualname":"::future::try_future::TryFutureExt::try_flatten","value":"pub fn try_flatten(Self) -> TryFlatten<Self, Self::Ok> where\nSelf::Ok: TryFuture<Error = Self::Error>, Self: Sized","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Flatten the execution of this future when the successful result of this\n future is another future.","sig":null,"attributes":[{"value":"/ Flatten the execution of this future when the successful result of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":61454,"byte_end":61529,"line_start":495,"line_end":495,"column_start":5,"column_end":80}},{"value":"/ future is another future.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":61534,"byte_end":61563,"line_start":496,"line_end":496,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":61568,"byte_end":61571,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to `future.and_then(|x| x)`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":61576,"byte_end":61627,"line_start":498,"line_end":498,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62825,"byte_end":62843,"line_start":532,"line_end":532,"column_start":8,"column_end":26},"name":"try_flatten_stream","qualname":"::future::try_future::TryFutureExt::try_flatten_stream","value":"pub fn try_flatten_stream(Self) -> TryFlattenStream<Self> where\nSelf::Ok: TryStream<Error = Self::Error>, Self: Sized","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Flatten the execution of this future when the successful result of this\n future is a stream.","sig":null,"attributes":[{"value":"/ Flatten the execution of this future when the successful result of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":61881,"byte_end":61956,"line_start":507,"line_end":507,"column_start":5,"column_end":80}},{"value":"/ future is a stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":61961,"byte_end":61984,"line_start":508,"line_end":508,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":61989,"byte_end":61992,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ This can be useful when stream initialization is deferred, and it is","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":61997,"byte_end":62069,"line_start":510,"line_end":510,"column_start":5,"column_end":77}},{"value":"/ convenient to work with that stream as if stream was available at the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62074,"byte_end":62147,"line_start":511,"line_end":511,"column_start":5,"column_end":78}},{"value":"/ call site.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62152,"byte_end":62166,"line_start":512,"line_end":512,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62171,"byte_end":62174,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ Note that this function consumes this future and returns a wrapped","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62179,"byte_end":62249,"line_start":514,"line_end":514,"column_start":5,"column_end":75}},{"value":"/ version of it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62254,"byte_end":62272,"line_start":515,"line_end":515,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62277,"byte_end":62280,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62285,"byte_end":62299,"line_start":517,"line_end":517,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62304,"byte_end":62307,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62312,"byte_end":62319,"line_start":519,"line_end":519,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62324,"byte_end":62365,"line_start":520,"line_end":520,"column_start":5,"column_end":46}},{"value":"/ use futures::future::TryFutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62370,"byte_end":62408,"line_start":521,"line_end":521,"column_start":5,"column_end":43}},{"value":"/ use futures::stream::{self, TryStreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62413,"byte_end":62459,"line_start":522,"line_end":522,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62464,"byte_end":62467,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ let stream_items = vec![17, 18, 19].into_iter().map(Ok);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62472,"byte_end":62532,"line_start":524,"line_end":524,"column_start":5,"column_end":65}},{"value":"/ let future_of_a_stream = async { Ok::<_, ()>(stream::iter(stream_items)) };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62537,"byte_end":62616,"line_start":525,"line_end":525,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62621,"byte_end":62624,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ let stream = future_of_a_stream.try_flatten_stream();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62629,"byte_end":62686,"line_start":527,"line_end":527,"column_start":5,"column_end":62}},{"value":"/ let list = stream.try_collect::<Vec<_>>().await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62691,"byte_end":62743,"line_start":528,"line_end":528,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(list, Ok(vec![17, 18, 19]));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62748,"byte_end":62791,"line_start":529,"line_end":529,"column_start":5,"column_end":48}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62796,"byte_end":62805,"line_start":530,"line_end":530,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":62810,"byte_end":62817,"line_start":531,"line_end":531,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63934,"byte_end":63948,"line_start":564,"line_end":564,"column_start":8,"column_end":22},"name":"unwrap_or_else","qualname":"::future::try_future::TryFutureExt::unwrap_or_else","value":"pub fn unwrap_or_else<F>(Self, F) -> UnwrapOrElse<Self, F> where Self: Sized,\nF: FnOnce(Self::Error) -> Self::Ok","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Unwraps this future's output, producing a future with this future's\n [`Ok`](TryFuture::Ok) type as its\n [`Output`](std::future::Future::Output) type.","sig":null,"attributes":[{"value":"/ Unwraps this future's output, producing a future with this future's","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63103,"byte_end":63174,"line_start":542,"line_end":542,"column_start":5,"column_end":76}},{"value":"/ [`Ok`](TryFuture::Ok) type as its","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63179,"byte_end":63216,"line_start":543,"line_end":543,"column_start":5,"column_end":42}},{"value":"/ [`Output`](std::future::Future::Output) type.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63221,"byte_end":63270,"line_start":544,"line_end":544,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63275,"byte_end":63278,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ If this future is resolved successfully, the returned future will","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63283,"byte_end":63352,"line_start":546,"line_end":546,"column_start":5,"column_end":74}},{"value":"/ contain the original future's success value as output. Otherwise, the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63357,"byte_end":63430,"line_start":547,"line_end":547,"column_start":5,"column_end":78}},{"value":"/ closure `f` is called with the error value to produce an alternate","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63435,"byte_end":63505,"line_start":548,"line_end":548,"column_start":5,"column_end":75}},{"value":"/ success value.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63510,"byte_end":63528,"line_start":549,"line_end":549,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63533,"byte_end":63536,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ This method is similar to the [`Result::unwrap_or_else`] method.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63541,"byte_end":63609,"line_start":551,"line_end":551,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63614,"byte_end":63617,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63622,"byte_end":63636,"line_start":553,"line_end":553,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63641,"byte_end":63644,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63649,"byte_end":63656,"line_start":555,"line_end":555,"column_start":5,"column_end":12}},{"value":"/ use futures::future::TryFutureExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63661,"byte_end":63699,"line_start":556,"line_end":556,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63704,"byte_end":63707,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63712,"byte_end":63753,"line_start":558,"line_end":558,"column_start":5,"column_end":46}},{"value":"/ let future = async { Err::<(), &str>(\"Boom!\") };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63758,"byte_end":63810,"line_start":559,"line_end":559,"column_start":5,"column_end":57}},{"value":"/ let future = future.unwrap_or_else(|_| ());","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63815,"byte_end":63862,"line_start":560,"line_end":560,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(future.await, ());","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63867,"byte_end":63900,"line_start":561,"line_end":561,"column_start":5,"column_end":38}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63905,"byte_end":63914,"line_start":562,"line_end":562,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":63919,"byte_end":63926,"line_start":563,"line_end":563,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":65203,"byte_end":65214,"line_start":604,"line_end":604,"column_start":8,"column_end":19},"name":"into_future","qualname":"::future::try_future::TryFutureExt::into_future","value":"pub fn into_future(Self) -> IntoFuture<Self> where Self: Sized","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Wraps a [`TryFuture`] into a type that implements\n [`Future`](std::future::Future).","sig":null,"attributes":[{"value":"/ Wraps a [`TryFuture`] into a type that implements","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":64502,"byte_end":64555,"line_start":583,"line_end":583,"column_start":5,"column_end":58}},{"value":"/ [`Future`](std::future::Future).","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":64560,"byte_end":64596,"line_start":584,"line_end":584,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":64601,"byte_end":64604,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ [`TryFuture`]s currently do not implement the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":64609,"byte_end":64658,"line_start":586,"line_end":586,"column_start":5,"column_end":54}},{"value":"/ [`Future`](std::future::Future) trait due to limitations of the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":64663,"byte_end":64730,"line_start":587,"line_end":587,"column_start":5,"column_end":72}},{"value":"/ compiler.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":64735,"byte_end":64748,"line_start":588,"line_end":588,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":64753,"byte_end":64756,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":64761,"byte_end":64775,"line_start":590,"line_end":590,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":64780,"byte_end":64783,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":64788,"byte_end":64795,"line_start":592,"line_end":592,"column_start":5,"column_end":12}},{"value":"/ use futures::future::{Future, TryFuture, TryFutureExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":64800,"byte_end":64859,"line_start":593,"line_end":593,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":64864,"byte_end":64867,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ # type T = i32;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":64872,"byte_end":64891,"line_start":595,"line_end":595,"column_start":5,"column_end":24}},{"value":"/ # type E = ();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":64896,"byte_end":64914,"line_start":596,"line_end":596,"column_start":5,"column_end":23}},{"value":"/ fn make_try_future() -> impl TryFuture<Ok = T, Error = E> { // ... }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":64919,"byte_end":64991,"line_start":597,"line_end":597,"column_start":5,"column_end":77}},{"value":"/ # async { Ok::<i32, ()>(1) }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":64996,"byte_end":65028,"line_start":598,"line_end":598,"column_start":5,"column_end":37}},{"value":"/ # }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":65033,"byte_end":65040,"line_start":599,"line_end":599,"column_start":5,"column_end":12}},{"value":"/ fn take_future(future: impl Future<Output = Result<T, E>>) { /* ... */ }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":65045,"byte_end":65121,"line_start":600,"line_end":600,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":65126,"byte_end":65129,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ take_future(make_try_future().into_future());","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":65134,"byte_end":65183,"line_start":602,"line_end":602,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":65188,"byte_end":65195,"line_start":603,"line_end":603,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":65473,"byte_end":65487,"line_start":613,"line_end":613,"column_start":8,"column_end":22},"name":"try_poll_unpin","qualname":"::future::try_future::TryFutureExt::try_poll_unpin","value":"pub fn try_poll_unpin(&mut Self, &mut Context)\n-> Poll<Result<Self::Ok, Self::Error>> where Self: Unpin","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" A convenience method for calling [`TryFuture::try_poll`] on [`Unpin`]\n future types.\n","sig":null,"attributes":[{"value":"/ A convenience method for calling [`TryFuture::try_poll`] on [`Unpin`]","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":65370,"byte_end":65443,"line_start":611,"line_end":611,"column_start":5,"column_end":78}},{"value":"/ future types.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":65448,"byte_end":65465,"line_start":612,"line_end":612,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":7986},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":73656,"byte_end":73660,"line_start":9,"line_end":9,"column_start":12,"column_end":16},"name":"Lazy","qualname":"::future::lazy::Lazy","value":"Lazy {  }","parent":null,"children":[{"krate":0,"index":7988}],"decl_id":null,"docs":" Future for the [`lazy`] function.\n","sig":null,"attributes":[{"value":"/ Future for the [`lazy`] function.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":73522,"byte_end":73559,"line_start":6,"line_end":6,"column_start":1,"column_end":38}},{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":73577,"byte_end":73644,"line_start":8,"line_end":8,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":603},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":74202,"byte_end":74206,"line_start":35,"line_end":35,"column_start":8,"column_end":12},"name":"lazy","qualname":"::future::lazy::lazy","value":"pub fn lazy<F, R>(F) -> Lazy<F> where F: FnOnce(&mut Context) -> R","parent":null,"children":[],"decl_id":null,"docs":" Creates a new future that allows delayed execution of a closure.","sig":null,"attributes":[{"value":"/ Creates a new future that allows delayed execution of a closure.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":73765,"byte_end":73833,"line_start":16,"line_end":16,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":73834,"byte_end":73837,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ The provided closure is only run once the future is polled.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":73838,"byte_end":73901,"line_start":18,"line_end":18,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":73902,"byte_end":73905,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":73906,"byte_end":73920,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":73921,"byte_end":73924,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":73925,"byte_end":73932,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":73933,"byte_end":73974,"line_start":23,"line_end":23,"column_start":1,"column_end":42}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":73975,"byte_end":73999,"line_start":24,"line_end":24,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":74000,"byte_end":74003,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let a = future::lazy(|_| 1);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":74004,"byte_end":74036,"line_start":26,"line_end":26,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(a.await, 1);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":74037,"byte_end":74064,"line_start":27,"line_end":27,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":74065,"byte_end":74068,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let b = future::lazy(|_| -> i32 {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":74069,"byte_end":74106,"line_start":29,"line_end":29,"column_start":1,"column_end":38}},{"value":"/     panic!(\"oh no!\")","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":74107,"byte_end":74131,"line_start":30,"line_end":30,"column_start":1,"column_end":25}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":74132,"byte_end":74139,"line_start":31,"line_end":31,"column_start":1,"column_end":8}},{"value":"/ drop(b); // closure is never run","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":74140,"byte_end":74176,"line_start":32,"line_end":32,"column_start":1,"column_end":37}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":74177,"byte_end":74186,"line_start":33,"line_end":33,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":74187,"byte_end":74194,"line_start":34,"line_end":34,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":7992},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75033,"byte_end":75040,"line_start":10,"line_end":10,"column_start":12,"column_end":19},"name":"Pending","qualname":"::future::pending::Pending","value":"Pending {  }","parent":null,"children":[{"krate":0,"index":7994}],"decl_id":null,"docs":" Future for the [`pending()`] function.\n","sig":null,"attributes":[{"value":"/ Future for the [`pending()`] function.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":74894,"byte_end":74936,"line_start":7,"line_end":7,"column_start":1,"column_end":43}},{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":74954,"byte_end":75021,"line_start":9,"line_end":9,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":649},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75559,"byte_end":75566,"line_start":36,"line_end":36,"column_start":8,"column_end":15},"name":"pending","qualname":"::future::pending::pending","value":"pub fn pending<T>() -> Pending<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a future which never resolves, representing a computation that never\n finishes.","sig":null,"attributes":[{"value":"/ Creates a future which never resolves, representing a computation that never","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75181,"byte_end":75261,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ finishes.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75262,"byte_end":75275,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75276,"byte_end":75279,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The returned future will forever return [`Poll::Pending`].","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75280,"byte_end":75342,"line_start":23,"line_end":23,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75343,"byte_end":75346,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75347,"byte_end":75361,"line_start":25,"line_end":25,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75362,"byte_end":75365,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75366,"byte_end":75379,"line_start":27,"line_end":27,"column_start":1,"column_end":14}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75380,"byte_end":75421,"line_start":28,"line_end":28,"column_start":1,"column_end":42}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75422,"byte_end":75446,"line_start":29,"line_end":29,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75447,"byte_end":75450,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let future = future::pending();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75451,"byte_end":75486,"line_start":31,"line_end":31,"column_start":1,"column_end":36}},{"value":"/ let () = future.await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75487,"byte_end":75513,"line_start":32,"line_end":32,"column_start":1,"column_end":27}},{"value":"/ unreachable!();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75514,"byte_end":75533,"line_start":33,"line_end":33,"column_start":1,"column_end":20}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75534,"byte_end":75543,"line_start":34,"line_end":34,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75544,"byte_end":75551,"line_start":35,"line_end":35,"column_start":1,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8000},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76338,"byte_end":76344,"line_start":16,"line_end":16,"column_start":5,"column_end":11},"name":"Future","qualname":"::future::maybe_done::MaybeDone::Future","value":"MaybeDone::Future(Fut)","parent":{"krate":0,"index":7998},"children":[],"decl_id":null,"docs":" A not-yet-completed future\n","sig":null,"attributes":[{"value":"/ A not-yet-completed future","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76303,"byte_end":76333,"line_start":15,"line_end":15,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8003},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76411,"byte_end":76415,"line_start":18,"line_end":18,"column_start":5,"column_end":9},"name":"Done","qualname":"::future::maybe_done::MaybeDone::Done","value":"MaybeDone::Done(Fut::Output)","parent":{"krate":0,"index":7998},"children":[],"decl_id":null,"docs":" The output of the completed future\n","sig":null,"attributes":[{"value":"/ The output of the completed future","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76368,"byte_end":76406,"line_start":17,"line_end":17,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8006},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76577,"byte_end":76581,"line_start":21,"line_end":21,"column_start":5,"column_end":9},"name":"Gone","qualname":"::future::maybe_done::MaybeDone::Gone","value":"MaybeDone::Gone","parent":{"krate":0,"index":7998},"children":[],"decl_id":null,"docs":" The empty variant after the result of a [`MaybeDone`] has been\n taken using the [`take_output`](MaybeDone::take_output) method.\n","sig":null,"attributes":[{"value":"/ The empty variant after the result of a [`MaybeDone`] has been","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76434,"byte_end":76500,"line_start":19,"line_end":19,"column_start":5,"column_end":71}},{"value":"/ taken using the [`take_output`](MaybeDone::take_output) method.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76505,"byte_end":76572,"line_start":20,"line_end":20,"column_start":5,"column_end":72}}]},{"kind":"Enum","id":{"krate":0,"index":7998},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76274,"byte_end":76283,"line_start":14,"line_end":14,"column_start":10,"column_end":19},"name":"MaybeDone","qualname":"::future::maybe_done::MaybeDone","value":"pub enum MaybeDone<Fut: Future> { Future(Fut), Done(Fut::Output), Gone, }","parent":null,"children":[{"krate":0,"index":8000},{"krate":0,"index":8003},{"krate":0,"index":8006}],"decl_id":null,"docs":" A future that may have completed.","sig":null,"attributes":[{"value":"/ A future that may have completed.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76152,"byte_end":76189,"line_start":10,"line_end":10,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76190,"byte_end":76193,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This is created by the [`maybe_done()`] function.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76194,"byte_end":76247,"line_start":12,"line_end":12,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":696},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":77102,"byte_end":77112,"line_start":43,"line_end":43,"column_start":8,"column_end":18},"name":"maybe_done","qualname":"::future::maybe_done::maybe_done","value":"pub fn maybe_done<Fut: Future>(Fut) -> MaybeDone<Fut>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a future into a `MaybeDone`","sig":null,"attributes":[{"value":"/ Wraps a future into a `MaybeDone`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76641,"byte_end":76678,"line_start":26,"line_end":26,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76679,"byte_end":76682,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76683,"byte_end":76697,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76698,"byte_end":76701,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76702,"byte_end":76709,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76710,"byte_end":76751,"line_start":31,"line_end":31,"column_start":1,"column_end":42}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76752,"byte_end":76776,"line_start":32,"line_end":32,"column_start":1,"column_end":25}},{"value":"/ use futures::pin_mut;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76777,"byte_end":76802,"line_start":33,"line_end":33,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76803,"byte_end":76806,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ let future = future::maybe_done(async { 5 });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76807,"byte_end":76856,"line_start":35,"line_end":35,"column_start":1,"column_end":50}},{"value":"/ pin_mut!(future);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76857,"byte_end":76878,"line_start":36,"line_end":36,"column_start":1,"column_end":22}},{"value":"/ assert_eq!(future.as_mut().take_output(), None);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76879,"byte_end":76931,"line_start":37,"line_end":37,"column_start":1,"column_end":53}},{"value":"/ let () = future.as_mut().await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76932,"byte_end":76967,"line_start":38,"line_end":38,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(future.as_mut().take_output(), Some(5));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76968,"byte_end":77023,"line_start":39,"line_end":39,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(future.as_mut().take_output(), None);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":77024,"byte_end":77076,"line_start":40,"line_end":40,"column_start":1,"column_end":53}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":77077,"byte_end":77086,"line_start":41,"line_end":41,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":77087,"byte_end":77094,"line_start":42,"line_end":42,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":77553,"byte_end":77563,"line_start":53,"line_end":53,"column_start":12,"column_end":22},"name":"output_mut","qualname":"<MaybeDone<Fut>>::output_mut","value":"pub fn output_mut(Pin<&mut Self>) -> Option<&mut Fut::Output>","parent":null,"children":[],"decl_id":null,"docs":" Returns an [`Option`] containing a mutable reference to the output of the future.\n The output of this method will be [`Some`] if and only if the inner\n future has been completed and [`take_output`](MaybeDone::take_output)\n has not yet been called.\n","sig":null,"attributes":[{"value":"/ Returns an [`Option`] containing a mutable reference to the output of the future.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":77255,"byte_end":77340,"line_start":48,"line_end":48,"column_start":5,"column_end":90}},{"value":"/ The output of this method will be [`Some`] if and only if the inner","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":77345,"byte_end":77416,"line_start":49,"line_end":49,"column_start":5,"column_end":76}},{"value":"/ future has been completed and [`take_output`](MaybeDone::take_output)","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":77421,"byte_end":77494,"line_start":50,"line_end":50,"column_start":5,"column_end":78}},{"value":"/ has not yet been called.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":77499,"byte_end":77527,"line_start":51,"line_end":51,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":77532,"byte_end":77541,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":77911,"byte_end":77922,"line_start":65,"line_end":65,"column_start":12,"column_end":23},"name":"take_output","qualname":"<MaybeDone<Fut>>::take_output","value":"pub fn take_output(Pin<&mut Self>) -> Option<Fut::Output>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to take the output of a `MaybeDone` without driving it\n towards completion.\n","sig":null,"attributes":[{"value":"/ Attempt to take the output of a `MaybeDone` without driving it","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":77791,"byte_end":77857,"line_start":62,"line_end":62,"column_start":5,"column_end":71}},{"value":"/ towards completion.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":77862,"byte_end":77885,"line_start":63,"line_end":63,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":77890,"byte_end":77899,"line_start":64,"line_end":64,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8013},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":79547,"byte_end":79553,"line_start":16,"line_end":16,"column_start":5,"column_end":11},"name":"Future","qualname":"::future::try_maybe_done::TryMaybeDone::Future","value":"TryMaybeDone::Future(Fut)","parent":{"krate":0,"index":8011},"children":[],"decl_id":null,"docs":" A not-yet-completed future\n","sig":null,"attributes":[{"value":"/ A not-yet-completed future","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":79512,"byte_end":79542,"line_start":15,"line_end":15,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8016},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":79620,"byte_end":79624,"line_start":18,"line_end":18,"column_start":5,"column_end":9},"name":"Done","qualname":"::future::try_maybe_done::TryMaybeDone::Done","value":"TryMaybeDone::Done(Fut::Ok)","parent":{"krate":0,"index":8011},"children":[],"decl_id":null,"docs":" The output of the completed future\n","sig":null,"attributes":[{"value":"/ The output of the completed future","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":79577,"byte_end":79615,"line_start":17,"line_end":17,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8019},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":79832,"byte_end":79836,"line_start":22,"line_end":22,"column_start":5,"column_end":9},"name":"Gone","qualname":"::future::try_maybe_done::TryMaybeDone::Gone","value":"TryMaybeDone::Gone","parent":{"krate":0,"index":8011},"children":[],"decl_id":null,"docs":" The empty variant after the result of a [`TryMaybeDone`] has been\n taken using the [`take_output`](TryMaybeDone::take_output) method,\n or if the future returned an error.\n","sig":null,"attributes":[{"value":"/ The empty variant after the result of a [`TryMaybeDone`] has been","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":79639,"byte_end":79708,"line_start":19,"line_end":19,"column_start":5,"column_end":74}},{"value":"/ taken using the [`take_output`](TryMaybeDone::take_output) method,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":79713,"byte_end":79783,"line_start":20,"line_end":20,"column_start":5,"column_end":75}},{"value":"/ or if the future returned an error.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":79788,"byte_end":79827,"line_start":21,"line_end":21,"column_start":5,"column_end":44}}]},{"kind":"Enum","id":{"krate":0,"index":8011},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":79477,"byte_end":79489,"line_start":14,"line_end":14,"column_start":10,"column_end":22},"name":"TryMaybeDone","qualname":"::future::try_maybe_done::TryMaybeDone","value":"pub enum TryMaybeDone<Fut: TryFuture> { Future(Fut), Done(Fut::Ok), Gone, }","parent":null,"children":[{"krate":0,"index":8013},{"krate":0,"index":8016},{"krate":0,"index":8019}],"decl_id":null,"docs":" A future that may have completed with an error.","sig":null,"attributes":[{"value":"/ A future that may have completed with an error.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":79337,"byte_end":79388,"line_start":10,"line_end":10,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":79389,"byte_end":79392,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This is created by the [`try_maybe_done()`] function.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":79393,"byte_end":79450,"line_start":12,"line_end":12,"column_start":1,"column_end":58}}]},{"kind":"Function","id":{"krate":0,"index":748},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":79950,"byte_end":79964,"line_start":28,"line_end":28,"column_start":8,"column_end":22},"name":"try_maybe_done","qualname":"::future::try_maybe_done::try_maybe_done","value":"pub fn try_maybe_done<Fut: TryFuture>(Fut) -> TryMaybeDone<Fut>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a future into a `TryMaybeDone`\n","sig":null,"attributes":[{"value":"/ Wraps a future into a `TryMaybeDone`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":79902,"byte_end":79942,"line_start":27,"line_end":27,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":80451,"byte_end":80461,"line_start":38,"line_end":38,"column_start":12,"column_end":22},"name":"output_mut","qualname":"<TryMaybeDone<Fut>>::output_mut","value":"pub fn output_mut(Pin<&mut Self>) -> Option<&mut Fut::Ok>","parent":null,"children":[],"decl_id":null,"docs":" Returns an [`Option`] containing a mutable reference to the output of the future.\n The output of this method will be [`Some`] if and only if the inner\n future has completed successfully and [`take_output`](TryMaybeDone::take_output)\n has not yet been called.\n","sig":null,"attributes":[{"value":"/ Returns an [`Option`] containing a mutable reference to the output of the future.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":80142,"byte_end":80227,"line_start":33,"line_end":33,"column_start":5,"column_end":90}},{"value":"/ The output of this method will be [`Some`] if and only if the inner","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":80232,"byte_end":80303,"line_start":34,"line_end":34,"column_start":5,"column_end":76}},{"value":"/ future has completed successfully and [`take_output`](TryMaybeDone::take_output)","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":80308,"byte_end":80392,"line_start":35,"line_end":35,"column_start":5,"column_end":89}},{"value":"/ has not yet been called.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":80397,"byte_end":80425,"line_start":36,"line_end":36,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":80430,"byte_end":80439,"line_start":37,"line_end":37,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":753},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":80811,"byte_end":80822,"line_start":50,"line_end":50,"column_start":12,"column_end":23},"name":"take_output","qualname":"<TryMaybeDone<Fut>>::take_output","value":"pub fn take_output(Pin<&mut Self>) -> Option<Fut::Ok>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to take the output of a `TryMaybeDone` without driving it\n towards completion.\n","sig":null,"attributes":[{"value":"/ Attempt to take the output of a `TryMaybeDone` without driving it","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":80688,"byte_end":80757,"line_start":47,"line_end":47,"column_start":5,"column_end":74}},{"value":"/ towards completion.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":80762,"byte_end":80785,"line_start":48,"line_end":48,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":80790,"byte_end":80799,"line_start":49,"line_end":49,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":8029},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/option.rs","byte_start":83033,"byte_end":83045,"line_start":28,"line_end":28,"column_start":16,"column_end":28},"name":"OptionFuture","qualname":"::future::option::OptionFuture","value":"OptionFuture {  }","parent":null,"children":[{"krate":0,"index":8031}],"decl_id":null,"docs":" A future representing a value which may or may not be present.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":825},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84163,"byte_end":84169,"line_start":11,"line_end":11,"column_start":12,"column_end":18},"name":"PollFn","qualname":"::future::poll_fn::PollFn","value":"PollFn {  }","parent":null,"children":[{"krate":0,"index":827}],"decl_id":null,"docs":" Future for the [`poll_fn`] function.\n","sig":null,"attributes":[{"value":"/ Future for the [`poll_fn`] function.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84043,"byte_end":84083,"line_start":9,"line_end":9,"column_start":1,"column_end":41}},{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84084,"byte_end":84151,"line_start":10,"line_end":10,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":830},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84756,"byte_end":84763,"line_start":36,"line_end":36,"column_start":8,"column_end":15},"name":"poll_fn","qualname":"::future::poll_fn::poll_fn","value":"pub fn poll_fn<T, F>(F) -> PollFn<F> where F: FnMut(&mut Context) -> Poll<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new future wrapping around a function returning [`Poll`].","sig":null,"attributes":[{"value":"/ Creates a new future wrapping around a function returning [`Poll`].","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84220,"byte_end":84291,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84292,"byte_end":84295,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Polling the returned future delegates to the wrapped function.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84296,"byte_end":84362,"line_start":19,"line_end":19,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84363,"byte_end":84366,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84367,"byte_end":84381,"line_start":21,"line_end":21,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84382,"byte_end":84385,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84386,"byte_end":84393,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84394,"byte_end":84435,"line_start":24,"line_end":24,"column_start":1,"column_end":42}},{"value":"/ use futures::future::poll_fn;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84436,"byte_end":84469,"line_start":25,"line_end":25,"column_start":1,"column_end":34}},{"value":"/ use futures::task::{Context, Poll};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84470,"byte_end":84509,"line_start":26,"line_end":26,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84510,"byte_end":84513,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ fn read_line(_cx: &mut Context<'_>) -> Poll<String> {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84514,"byte_end":84571,"line_start":28,"line_end":28,"column_start":1,"column_end":58}},{"value":"/     Poll::Ready(\"Hello, World!\".into())","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84572,"byte_end":84615,"line_start":29,"line_end":29,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84616,"byte_end":84621,"line_start":30,"line_end":30,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84622,"byte_end":84625,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let read_future = poll_fn(read_line);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84626,"byte_end":84667,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(read_future.await, \"Hello, World!\".to_owned());","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84668,"byte_end":84730,"line_start":33,"line_end":33,"column_start":1,"column_end":63}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84731,"byte_end":84740,"line_start":34,"line_end":34,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84741,"byte_end":84748,"line_start":35,"line_end":35,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":8068},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":85697,"byte_end":85710,"line_start":13,"line_end":13,"column_start":16,"column_end":29},"name":"PollImmediate","qualname":"::future::poll_immediate::PollImmediate","value":"PollImmediate {  }","parent":null,"children":[{"krate":0,"index":8070}],"decl_id":null,"docs":" Future for the [`poll_immediate`](poll_immediate()) function.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":889},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":89118,"byte_end":89132,"line_start":124,"line_end":124,"column_start":8,"column_end":22},"name":"poll_immediate","qualname":"::future::poll_immediate::poll_immediate","value":"pub fn poll_immediate<F: Future>(F) -> PollImmediate<F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a future that is immediately ready with an Option of a value.\n Specifically this means that [poll](core::future::Future::poll()) always returns [Poll::Ready](core::task::Poll::Ready).","sig":null,"attributes":[{"value":"/ Creates a future that is immediately ready with an Option of a value.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":87930,"byte_end":88003,"line_start":89,"line_end":89,"column_start":1,"column_end":74}},{"value":"/ Specifically this means that [poll](core::future::Future::poll()) always returns [Poll::Ready](core::task::Poll::Ready).","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88004,"byte_end":88128,"line_start":90,"line_end":90,"column_start":1,"column_end":125}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88129,"byte_end":88132,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ # Caution","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88133,"byte_end":88146,"line_start":92,"line_end":92,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88147,"byte_end":88150,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ When consuming the future by this function, note the following:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88151,"byte_end":88218,"line_start":94,"line_end":94,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88219,"byte_end":88222,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ - This function does not guarantee that the future will run to completion, so it is generally incompatible with passing the non-cancellation-safe future by value.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88223,"byte_end":88389,"line_start":96,"line_end":96,"column_start":1,"column_end":167}},{"value":"/ - Even if the future is cancellation-safe, creating and dropping new futures frequently may lead to performance problems.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88390,"byte_end":88515,"line_start":97,"line_end":97,"column_start":1,"column_end":126}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88516,"byte_end":88519,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88520,"byte_end":88534,"line_start":99,"line_end":99,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88535,"byte_end":88538,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88539,"byte_end":88546,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88547,"byte_end":88588,"line_start":102,"line_end":102,"column_start":1,"column_end":42}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88589,"byte_end":88613,"line_start":103,"line_end":103,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88614,"byte_end":88617,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ let r = future::poll_immediate(async { 1_u32 });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88618,"byte_end":88670,"line_start":105,"line_end":105,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(r.await, Some(1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88671,"byte_end":88704,"line_start":106,"line_end":106,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88705,"byte_end":88708,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ let p = future::poll_immediate(future::pending::<i32>());","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88709,"byte_end":88770,"line_start":108,"line_end":108,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(p.await, None);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88771,"byte_end":88801,"line_start":109,"line_end":109,"column_start":1,"column_end":31}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88802,"byte_end":88811,"line_start":110,"line_end":110,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88812,"byte_end":88819,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88820,"byte_end":88823,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ ### Reusing a future","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88824,"byte_end":88848,"line_start":113,"line_end":113,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88849,"byte_end":88852,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88853,"byte_end":88860,"line_start":115,"line_end":115,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88861,"byte_end":88902,"line_start":116,"line_end":116,"column_start":1,"column_end":42}},{"value":"/ use futures::{future, pin_mut};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88903,"byte_end":88938,"line_start":117,"line_end":117,"column_start":1,"column_end":36}},{"value":"/ let f = async {futures::pending!(); 42_u8};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88939,"byte_end":88986,"line_start":118,"line_end":118,"column_start":1,"column_end":48}},{"value":"/ pin_mut!(f);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":88987,"byte_end":89003,"line_start":119,"line_end":119,"column_start":1,"column_end":17}},{"value":"/ assert_eq!(None, future::poll_immediate(&mut f).await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":89004,"byte_end":89063,"line_start":120,"line_end":120,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(42, f.await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":89064,"byte_end":89092,"line_start":121,"line_end":121,"column_start":1,"column_end":29}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":89093,"byte_end":89102,"line_start":122,"line_end":122,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":89103,"byte_end":89110,"line_start":123,"line_end":123,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":8102},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":89555,"byte_end":89560,"line_start":9,"line_end":9,"column_start":12,"column_end":17},"name":"Ready","qualname":"::future::ready::Ready","value":"","parent":null,"children":[],"decl_id":null,"docs":" Future for the [`ready`](ready()) function.\n","sig":null,"attributes":[{"value":"/ Future for the [`ready`](ready()) function.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":89404,"byte_end":89451,"line_start":6,"line_end":6,"column_start":1,"column_end":48}},{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":89476,"byte_end":89543,"line_start":8,"line_end":8,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":89683,"byte_end":89693,"line_start":14,"line_end":14,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Ready<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Unwraps the value from this immediately ready future.\n","sig":null,"attributes":[{"value":"/ Unwraps the value from this immediately ready future.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":89600,"byte_end":89657,"line_start":12,"line_end":12,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":89662,"byte_end":89671,"line_start":13,"line_end":13,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":931},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90359,"byte_end":90364,"line_start":48,"line_end":48,"column_start":8,"column_end":13},"name":"ready","qualname":"::future::ready::ready","value":"pub fn ready<T>(T) -> Ready<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a future that is immediately ready with a value.","sig":null,"attributes":[{"value":"/ Creates a future that is immediately ready with a value.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90113,"byte_end":90173,"line_start":36,"line_end":36,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90174,"byte_end":90177,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90178,"byte_end":90192,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90193,"byte_end":90196,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90197,"byte_end":90204,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90205,"byte_end":90246,"line_start":41,"line_end":41,"column_start":1,"column_end":42}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90247,"byte_end":90271,"line_start":42,"line_end":42,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90272,"byte_end":90275,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ let a = future::ready(1);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90276,"byte_end":90305,"line_start":44,"line_end":44,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(a.await, 1);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90306,"byte_end":90333,"line_start":45,"line_end":45,"column_start":1,"column_end":28}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90334,"byte_end":90343,"line_start":46,"line_end":46,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90344,"byte_end":90351,"line_start":47,"line_end":47,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":933},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90699,"byte_end":90701,"line_start":64,"line_end":64,"column_start":8,"column_end":10},"name":"ok","qualname":"::future::ready::ok","value":"pub fn ok<T, E>(T) -> Ready<Result<T, E>>","parent":null,"children":[],"decl_id":null,"docs":" Create a future that is immediately ready with a success value.","sig":null,"attributes":[{"value":"/ Create a future that is immediately ready with a success value.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90433,"byte_end":90500,"line_start":52,"line_end":52,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90501,"byte_end":90504,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90505,"byte_end":90519,"line_start":54,"line_end":54,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90520,"byte_end":90523,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90524,"byte_end":90531,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90532,"byte_end":90573,"line_start":57,"line_end":57,"column_start":1,"column_end":42}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90574,"byte_end":90598,"line_start":58,"line_end":58,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90599,"byte_end":90602,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ let a = future::ok::<i32, i32>(1);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90603,"byte_end":90641,"line_start":60,"line_end":60,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(a.await, Ok(1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90642,"byte_end":90673,"line_start":61,"line_end":61,"column_start":1,"column_end":32}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90674,"byte_end":90683,"line_start":62,"line_end":62,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90684,"byte_end":90691,"line_start":63,"line_end":63,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":936},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":91032,"byte_end":91035,"line_start":80,"line_end":80,"column_start":8,"column_end":11},"name":"err","qualname":"::future::ready::err","value":"pub fn err<T, E>(E) -> Ready<Result<T, E>>","parent":null,"children":[],"decl_id":null,"docs":" Create a future that is immediately ready with an error value.","sig":null,"attributes":[{"value":"/ Create a future that is immediately ready with an error value.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90765,"byte_end":90831,"line_start":68,"line_end":68,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90832,"byte_end":90835,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90836,"byte_end":90850,"line_start":70,"line_end":70,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90851,"byte_end":90854,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90855,"byte_end":90862,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90863,"byte_end":90904,"line_start":73,"line_end":73,"column_start":1,"column_end":42}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90905,"byte_end":90929,"line_start":74,"line_end":74,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90930,"byte_end":90933,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ let a = future::err::<i32, i32>(1);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90934,"byte_end":90973,"line_start":76,"line_end":76,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(a.await, Err(1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":90974,"byte_end":91006,"line_start":77,"line_end":77,"column_start":1,"column_end":33}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":91007,"byte_end":91016,"line_start":78,"line_end":78,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":91017,"byte_end":91024,"line_start":79,"line_end":79,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":8204},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":93321,"byte_end":93325,"line_start":78,"line_end":78,"column_start":6,"column_end":10},"name":"Join","qualname":"::future::join::Join","value":"Join {  }","parent":null,"children":[{"krate":0,"index":8207},{"krate":0,"index":8208}],"decl_id":null,"docs":" Future for the [`join`](join()) function.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8249},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":93391,"byte_end":93396,"line_start":81,"line_end":81,"column_start":6,"column_end":11},"name":"Join3","qualname":"::future::join::Join3","value":"Join3 {  }","parent":null,"children":[{"krate":0,"index":8253},{"krate":0,"index":8254},{"krate":0,"index":8255}],"decl_id":null,"docs":" Future for the [`join3`] function.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8306},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":93468,"byte_end":93473,"line_start":84,"line_end":84,"column_start":6,"column_end":11},"name":"Join4","qualname":"::future::join::Join4","value":"Join4 {  }","parent":null,"children":[{"krate":0,"index":8311},{"krate":0,"index":8312},{"krate":0,"index":8313},{"krate":0,"index":8314}],"decl_id":null,"docs":" Future for the [`join4`] function.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8375},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":93551,"byte_end":93556,"line_start":87,"line_end":87,"column_start":6,"column_end":11},"name":"Join5","qualname":"::future::join::Join5","value":"Join5 {  }","parent":null,"children":[{"krate":0,"index":8381},{"krate":0,"index":8382},{"krate":0,"index":8383},{"krate":0,"index":8384},{"krate":0,"index":8385}],"decl_id":null,"docs":" Future for the [`join5`] function.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":987},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94171,"byte_end":94175,"line_start":111,"line_end":111,"column_start":8,"column_end":12},"name":"join","qualname":"::future::join::join","value":"pub fn join<Fut1, Fut2>(Fut1, Fut2) -> Join<Fut1, Fut2> where Fut1: Future,\nFut2: Future","parent":null,"children":[],"decl_id":null,"docs":" Joins the result of two futures, waiting for them both to complete.","sig":null,"attributes":[{"value":"/ Joins the result of two futures, waiting for them both to complete.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":93594,"byte_end":93665,"line_start":90,"line_end":90,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":93666,"byte_end":93669,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ This function will return a new future which awaits both futures to","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":93670,"byte_end":93741,"line_start":92,"line_end":92,"column_start":1,"column_end":72}},{"value":"/ complete. The returned future will finish with a tuple of both results.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":93742,"byte_end":93817,"line_start":93,"line_end":93,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":93818,"byte_end":93821,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ Note that this function consumes the passed futures and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":93822,"byte_end":93891,"line_start":95,"line_end":95,"column_start":1,"column_end":70}},{"value":"/ wrapped version of it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":93892,"byte_end":93918,"line_start":96,"line_end":96,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":93919,"byte_end":93922,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":93923,"byte_end":93937,"line_start":98,"line_end":98,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":93938,"byte_end":93941,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":93942,"byte_end":93949,"line_start":100,"line_end":100,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":93950,"byte_end":93991,"line_start":101,"line_end":101,"column_start":1,"column_end":42}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":93992,"byte_end":94016,"line_start":102,"line_end":102,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94017,"byte_end":94020,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ let a = async { 1 };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94021,"byte_end":94045,"line_start":104,"line_end":104,"column_start":1,"column_end":25}},{"value":"/ let b = async { 2 };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94046,"byte_end":94070,"line_start":105,"line_end":105,"column_start":1,"column_end":25}},{"value":"/ let pair = future::join(a, b);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94071,"byte_end":94105,"line_start":106,"line_end":106,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94106,"byte_end":94109,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pair.await, (1, 2));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94110,"byte_end":94145,"line_start":108,"line_end":108,"column_start":1,"column_end":36}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94146,"byte_end":94155,"line_start":109,"line_end":109,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94156,"byte_end":94163,"line_start":110,"line_end":110,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":990},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94721,"byte_end":94726,"line_start":136,"line_end":136,"column_start":8,"column_end":13},"name":"join3","qualname":"::future::join::join3","value":"pub fn join3<Fut1, Fut2, Fut3>(Fut1, Fut2, Fut3) -> Join3<Fut1, Fut2, Fut3>\nwhere Fut1: Future, Fut2: Future, Fut3: Future","parent":null,"children":[],"decl_id":null,"docs":" Same as [`join`](join()), but with more futures.","sig":null,"attributes":[{"value":"/ Same as [`join`](join()), but with more futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94382,"byte_end":94434,"line_start":120,"line_end":120,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94435,"byte_end":94438,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94439,"byte_end":94453,"line_start":122,"line_end":122,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94454,"byte_end":94457,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94458,"byte_end":94465,"line_start":124,"line_end":124,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94466,"byte_end":94507,"line_start":125,"line_end":125,"column_start":1,"column_end":42}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94508,"byte_end":94532,"line_start":126,"line_end":126,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94533,"byte_end":94536,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ let a = async { 1 };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94537,"byte_end":94561,"line_start":128,"line_end":128,"column_start":1,"column_end":25}},{"value":"/ let b = async { 2 };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94562,"byte_end":94586,"line_start":129,"line_end":129,"column_start":1,"column_end":25}},{"value":"/ let c = async { 3 };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94587,"byte_end":94611,"line_start":130,"line_end":130,"column_start":1,"column_end":25}},{"value":"/ let tuple = future::join3(a, b, c);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94612,"byte_end":94651,"line_start":131,"line_end":131,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94652,"byte_end":94655,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(tuple.await, (1, 2, 3));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94656,"byte_end":94695,"line_start":133,"line_end":133,"column_start":1,"column_end":40}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94696,"byte_end":94705,"line_start":134,"line_end":134,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":94706,"byte_end":94713,"line_start":135,"line_end":135,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":994},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95388,"byte_end":95393,"line_start":167,"line_end":167,"column_start":8,"column_end":13},"name":"join4","qualname":"::future::join::join4","value":"pub fn join4<Fut1, Fut2, Fut3, Fut4>(Fut1, Fut2, Fut3, Fut4)\n-> Join4<Fut1, Fut2, Fut3, Fut4> where Fut1: Future, Fut2: Future,\nFut3: Future, Fut4: Future","parent":null,"children":[],"decl_id":null,"docs":" Same as [`join`](join()), but with more futures.","sig":null,"attributes":[{"value":"/ Same as [`join`](join()), but with more futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95018,"byte_end":95070,"line_start":150,"line_end":150,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95071,"byte_end":95074,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95075,"byte_end":95089,"line_start":152,"line_end":152,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95090,"byte_end":95093,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95094,"byte_end":95101,"line_start":154,"line_end":154,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95102,"byte_end":95143,"line_start":155,"line_end":155,"column_start":1,"column_end":42}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95144,"byte_end":95168,"line_start":156,"line_end":156,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95169,"byte_end":95172,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ let a = async { 1 };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95173,"byte_end":95197,"line_start":158,"line_end":158,"column_start":1,"column_end":25}},{"value":"/ let b = async { 2 };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95198,"byte_end":95222,"line_start":159,"line_end":159,"column_start":1,"column_end":25}},{"value":"/ let c = async { 3 };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95223,"byte_end":95247,"line_start":160,"line_end":160,"column_start":1,"column_end":25}},{"value":"/ let d = async { 4 };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95248,"byte_end":95272,"line_start":161,"line_end":161,"column_start":1,"column_end":25}},{"value":"/ let tuple = future::join4(a, b, c, d);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95273,"byte_end":95315,"line_start":162,"line_end":162,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95316,"byte_end":95319,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(tuple.await, (1, 2, 3, 4));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95320,"byte_end":95362,"line_start":164,"line_end":164,"column_start":1,"column_end":43}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95363,"byte_end":95372,"line_start":165,"line_end":165,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95373,"byte_end":95380,"line_start":166,"line_end":166,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":999},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":96158,"byte_end":96163,"line_start":201,"line_end":201,"column_start":8,"column_end":13},"name":"join5","qualname":"::future::join::join5","value":"pub fn join5<Fut1, Fut2, Fut3, Fut4, Fut5>(Fut1, Fut2, Fut3, Fut4, Fut5)\n-> Join5<Fut1, Fut2, Fut3, Fut4, Fut5> where Fut1: Future, Fut2: Future,\nFut3: Future, Fut4: Future, Fut5: Future","parent":null,"children":[],"decl_id":null,"docs":" Same as [`join`](join()), but with more futures.","sig":null,"attributes":[{"value":"/ Same as [`join`](join()), but with more futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95757,"byte_end":95809,"line_start":183,"line_end":183,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95810,"byte_end":95813,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95814,"byte_end":95828,"line_start":185,"line_end":185,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95829,"byte_end":95832,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95833,"byte_end":95840,"line_start":187,"line_end":187,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95841,"byte_end":95882,"line_start":188,"line_end":188,"column_start":1,"column_end":42}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95883,"byte_end":95907,"line_start":189,"line_end":189,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95908,"byte_end":95911,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ let a = async { 1 };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95912,"byte_end":95936,"line_start":191,"line_end":191,"column_start":1,"column_end":25}},{"value":"/ let b = async { 2 };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95937,"byte_end":95961,"line_start":192,"line_end":192,"column_start":1,"column_end":25}},{"value":"/ let c = async { 3 };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95962,"byte_end":95986,"line_start":193,"line_end":193,"column_start":1,"column_end":25}},{"value":"/ let d = async { 4 };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":95987,"byte_end":96011,"line_start":194,"line_end":194,"column_start":1,"column_end":25}},{"value":"/ let e = async { 5 };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":96012,"byte_end":96036,"line_start":195,"line_end":195,"column_start":1,"column_end":25}},{"value":"/ let tuple = future::join5(a, b, c, d, e);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":96037,"byte_end":96082,"line_start":196,"line_end":196,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":96083,"byte_end":96086,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(tuple.await, (1, 2, 3, 4, 5));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":96087,"byte_end":96132,"line_start":198,"line_end":198,"column_start":1,"column_end":46}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":96133,"byte_end":96142,"line_start":199,"line_end":199,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join.rs","byte_start":96143,"byte_end":96150,"line_start":200,"line_end":200,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1080},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":97523,"byte_end":97530,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"name":"JoinAll","qualname":"::future::join_all::JoinAll","value":"JoinAll {  }","parent":null,"children":[{"krate":0,"index":1082}],"decl_id":null,"docs":" Future for the [`join_all`] function.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":97402,"byte_end":97469,"line_start":25,"line_end":25,"column_start":1,"column_end":68}},{"value":"/ Future for the [`join_all`] function.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":97470,"byte_end":97511,"line_start":26,"line_end":26,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":1093},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99625,"byte_end":99633,"line_start":102,"line_end":102,"column_start":8,"column_end":16},"name":"join_all","qualname":"::future::join_all::join_all","value":"pub fn join_all<I>(I) -> JoinAll<I::Item> where I: IntoIterator,\nI::Item: Future","parent":null,"children":[],"decl_id":null,"docs":" Creates a future which represents a collection of the outputs of the futures\n given.","sig":null,"attributes":[{"value":"/ Creates a future which represents a collection of the outputs of the futures","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":98339,"byte_end":98419,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/ given.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":98420,"byte_end":98430,"line_start":67,"line_end":67,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":98431,"byte_end":98434,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ The returned future will drive execution for all of its underlying futures,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":98435,"byte_end":98514,"line_start":69,"line_end":69,"column_start":1,"column_end":80}},{"value":"/ collecting the results into a destination `Vec<T>` in the same order as they","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":98515,"byte_end":98595,"line_start":70,"line_end":70,"column_start":1,"column_end":81}},{"value":"/ were provided.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":98596,"byte_end":98614,"line_start":71,"line_end":71,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":98615,"byte_end":98618,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ This function is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":98619,"byte_end":98696,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":98697,"byte_end":98754,"line_start":74,"line_end":74,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":98755,"byte_end":98758,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ # See Also","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":98759,"byte_end":98773,"line_start":76,"line_end":76,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":98774,"byte_end":98777,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ `join_all` will switch to the more powerful [`FuturesOrdered`] for performance","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":98778,"byte_end":98860,"line_start":78,"line_end":78,"column_start":1,"column_end":83}},{"value":"/ reasons if the number of futures is large. You may want to look into using it or","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":98861,"byte_end":98945,"line_start":79,"line_end":79,"column_start":1,"column_end":85}},{"value":"/ it's counterpart [`FuturesUnordered`][crate::stream::FuturesUnordered] directly.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":98946,"byte_end":99030,"line_start":80,"line_end":80,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99031,"byte_end":99034,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ Some examples for additional functionality provided by these are:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99035,"byte_end":99104,"line_start":82,"line_end":82,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99105,"byte_end":99108,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/  * Adding new futures to the set even after it has been started.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99109,"byte_end":99177,"line_start":84,"line_end":84,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99178,"byte_end":99181,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/  * Only polling the specific futures that have been woken. In cases where","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99182,"byte_end":99259,"line_start":86,"line_end":86,"column_start":1,"column_end":78}},{"value":"/    you have a lot of futures this will result in much more efficient polling.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99260,"byte_end":99341,"line_start":87,"line_end":87,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99342,"byte_end":99345,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99346,"byte_end":99360,"line_start":89,"line_end":89,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99361,"byte_end":99364,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99365,"byte_end":99372,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99373,"byte_end":99414,"line_start":92,"line_end":92,"column_start":1,"column_end":42}},{"value":"/ use futures::future::join_all;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99415,"byte_end":99449,"line_start":93,"line_end":93,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99450,"byte_end":99453,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ async fn foo(i: u32) -> u32 { i }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99454,"byte_end":99491,"line_start":95,"line_end":95,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99492,"byte_end":99495,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ let futures = vec![foo(1), foo(2), foo(3)];","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99496,"byte_end":99543,"line_start":97,"line_end":97,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99544,"byte_end":99547,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(join_all(futures).await, [1, 2, 3]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99548,"byte_end":99599,"line_start":99,"line_end":99,"column_start":1,"column_end":52}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99600,"byte_end":99609,"line_start":100,"line_end":100,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":99610,"byte_end":99617,"line_start":101,"line_end":101,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":8456},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102086,"byte_end":102092,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Select","qualname":"::future::select::Select","value":"Select {  }","parent":null,"children":[{"krate":0,"index":8459}],"decl_id":null,"docs":" Future for the [`select()`] function.\n","sig":null,"attributes":[{"value":"/ Future for the [`select()`] function.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":101948,"byte_end":101989,"line_start":7,"line_end":7,"column_start":1,"column_end":42}},{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":101990,"byte_end":102057,"line_start":8,"line_end":8,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":1142},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":104356,"byte_end":104362,"line_start":84,"line_end":84,"column_start":8,"column_end":14},"name":"select","qualname":"::future::select::select","value":"pub fn select<A, B>(A, B) -> Select<A, B> where A: Future + Unpin, B: Future +\nUnpin","parent":null,"children":[],"decl_id":null,"docs":" Waits for either one of two differently-typed futures to complete.","sig":null,"attributes":[{"value":"/ Waits for either one of two differently-typed futures to complete.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102183,"byte_end":102253,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102254,"byte_end":102257,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This function will return a new future which awaits for either one of both","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102258,"byte_end":102336,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ futures to complete. The returned future will finish with both the value","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102337,"byte_end":102413,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ resolved and a future representing the completion of the other work.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102414,"byte_end":102486,"line_start":20,"line_end":20,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102487,"byte_end":102490,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Note that this function consumes the receiving futures and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102491,"byte_end":102563,"line_start":22,"line_end":22,"column_start":1,"column_end":73}},{"value":"/ wrapped version of them.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102564,"byte_end":102592,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102593,"byte_end":102596,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Also note that if both this and the second future have the same","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102597,"byte_end":102664,"line_start":25,"line_end":25,"column_start":1,"column_end":68}},{"value":"/ output type you can use the `Either::factor_first` method to","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102665,"byte_end":102729,"line_start":26,"line_end":26,"column_start":1,"column_end":65}},{"value":"/ conveniently extract out the value at the end.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102730,"byte_end":102780,"line_start":27,"line_end":27,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102781,"byte_end":102784,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102785,"byte_end":102799,"line_start":29,"line_end":29,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102800,"byte_end":102803,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ A simple example","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102804,"byte_end":102824,"line_start":31,"line_end":31,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102825,"byte_end":102828,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102829,"byte_end":102836,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102837,"byte_end":102878,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/ use futures::{","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102879,"byte_end":102897,"line_start":35,"line_end":35,"column_start":1,"column_end":19}},{"value":"/     pin_mut,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102898,"byte_end":102914,"line_start":36,"line_end":36,"column_start":1,"column_end":17}},{"value":"/     future::Either,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102915,"byte_end":102938,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/     future::self,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102939,"byte_end":102960,"line_start":38,"line_end":38,"column_start":1,"column_end":22}},{"value":"/ };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102961,"byte_end":102967,"line_start":39,"line_end":39,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102968,"byte_end":102971,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ // These two futures have different types even though their outputs have the same type.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102972,"byte_end":103063,"line_start":41,"line_end":41,"column_start":1,"column_end":92}},{"value":"/ let future1 = async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103064,"byte_end":103089,"line_start":42,"line_end":42,"column_start":1,"column_end":26}},{"value":"/     future::pending::<()>().await; // will never finish","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103090,"byte_end":103149,"line_start":43,"line_end":43,"column_start":1,"column_end":60}},{"value":"/     1","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103150,"byte_end":103159,"line_start":44,"line_end":44,"column_start":1,"column_end":10}},{"value":"/ };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103160,"byte_end":103166,"line_start":45,"line_end":45,"column_start":1,"column_end":7}},{"value":"/ let future2 = async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103167,"byte_end":103192,"line_start":46,"line_end":46,"column_start":1,"column_end":26}},{"value":"/     future::ready(2).await","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103193,"byte_end":103223,"line_start":47,"line_end":47,"column_start":1,"column_end":31}},{"value":"/ };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103224,"byte_end":103230,"line_start":48,"line_end":48,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103231,"byte_end":103234,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ // 'select' requires Future + Unpin bounds","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103235,"byte_end":103281,"line_start":50,"line_end":50,"column_start":1,"column_end":47}},{"value":"/ pin_mut!(future1);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103282,"byte_end":103304,"line_start":51,"line_end":51,"column_start":1,"column_end":23}},{"value":"/ pin_mut!(future2);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103305,"byte_end":103327,"line_start":52,"line_end":52,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103328,"byte_end":103331,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ let value = match future::select(future1, future2).await {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103332,"byte_end":103394,"line_start":54,"line_end":54,"column_start":1,"column_end":63}},{"value":"/     Either::Left((value1, _)) => value1,  // `value1` is resolved from `future1`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103395,"byte_end":103479,"line_start":55,"line_end":55,"column_start":1,"column_end":85}},{"value":"/                                           // `_` represents `future2`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103480,"byte_end":103553,"line_start":56,"line_end":56,"column_start":1,"column_end":74}},{"value":"/     Either::Right((value2, _)) => value2, // `value2` is resolved from `future2`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103554,"byte_end":103638,"line_start":57,"line_end":57,"column_start":1,"column_end":85}},{"value":"/                                           // `_` represents `future1`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103639,"byte_end":103712,"line_start":58,"line_end":58,"column_start":1,"column_end":74}},{"value":"/ };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103713,"byte_end":103719,"line_start":59,"line_end":59,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103720,"byte_end":103723,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ assert!(value == 2);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103724,"byte_end":103748,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103749,"byte_end":103758,"line_start":62,"line_end":62,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103759,"byte_end":103766,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103767,"byte_end":103770,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ A more complex example","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103771,"byte_end":103797,"line_start":65,"line_end":65,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103798,"byte_end":103801,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103802,"byte_end":103809,"line_start":67,"line_end":67,"column_start":1,"column_end":8}},{"value":"/ use futures::future::{self, Either, Future, FutureExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103810,"byte_end":103869,"line_start":68,"line_end":68,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103870,"byte_end":103873,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ // A poor-man's join implemented on top of select","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103874,"byte_end":103927,"line_start":70,"line_end":70,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103928,"byte_end":103931,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ fn join<A, B>(a: A, b: B) -> impl Future<Output=(A::Output, B::Output)>","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":103932,"byte_end":104007,"line_start":72,"line_end":72,"column_start":1,"column_end":76}},{"value":"/     where A: Future + Unpin,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":104008,"byte_end":104040,"line_start":73,"line_end":73,"column_start":1,"column_end":33}},{"value":"/           B: Future + Unpin,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":104041,"byte_end":104073,"line_start":74,"line_end":74,"column_start":1,"column_end":33}},{"value":"/ {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":104074,"byte_end":104079,"line_start":75,"line_end":75,"column_start":1,"column_end":6}},{"value":"/     future::select(a, b).then(|either| {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":104080,"byte_end":104124,"line_start":76,"line_end":76,"column_start":1,"column_end":45}},{"value":"/         match either {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":104125,"byte_end":104151,"line_start":77,"line_end":77,"column_start":1,"column_end":27}},{"value":"/             Either::Left((x, b)) => b.map(move |y| (x, y)).left_future(),","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":104152,"byte_end":104229,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"/             Either::Right((y, a)) => a.map(move |x| (x, y)).right_future(),","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":104230,"byte_end":104309,"line_start":79,"line_end":79,"column_start":1,"column_end":80}},{"value":"/         }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":104310,"byte_end":104323,"line_start":80,"line_end":80,"column_start":1,"column_end":14}},{"value":"/     })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":104324,"byte_end":104334,"line_start":81,"line_end":81,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":104335,"byte_end":104340,"line_start":82,"line_end":82,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":104341,"byte_end":104348,"line_start":83,"line_end":83,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":8464},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":105819,"byte_end":105828,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"SelectAll","qualname":"::future::select_all::SelectAll","value":"SelectAll {  }","parent":null,"children":[{"krate":0,"index":8466}],"decl_id":null,"docs":" Future for the [`select_all`] function.\n","sig":null,"attributes":[{"value":"/ Future for the [`select_all`] function.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":105679,"byte_end":105722,"line_start":10,"line_end":10,"column_start":1,"column_end":44}},{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":105740,"byte_end":105807,"line_start":12,"line_end":12,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":1192},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":106608,"byte_end":106618,"line_start":34,"line_end":34,"column_start":8,"column_end":18},"name":"select_all","qualname":"::future::select_all::select_all","value":"pub fn select_all<I>(I) -> SelectAll<I::Item> where I: IntoIterator,\nI::Item: Future + Unpin","parent":null,"children":[],"decl_id":null,"docs":" Creates a new future which will select over a list of futures.","sig":null,"attributes":[{"value":"/ Creates a new future which will select over a list of futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":105906,"byte_end":105972,"line_start":19,"line_end":19,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":105973,"byte_end":105976,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ The returned future will wait for any future within `iter` to be ready. Upon","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":105977,"byte_end":106057,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/ completion the item resolved will be returned, along with the index of the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":106058,"byte_end":106136,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ future that was ready and the list of all the remaining futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":106137,"byte_end":106205,"line_start":23,"line_end":23,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":106206,"byte_end":106209,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ There are no guarantees provided on the order of the list with the remaining","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":106210,"byte_end":106290,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ futures. They might be swapped around, reversed, or completely random.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":106291,"byte_end":106365,"line_start":26,"line_end":26,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":106366,"byte_end":106369,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ This function is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":106370,"byte_end":106447,"line_start":28,"line_end":28,"column_start":1,"column_end":78}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":106448,"byte_end":106505,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":106506,"byte_end":106509,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":106510,"byte_end":106522,"line_start":31,"line_end":31,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":106523,"byte_end":106526,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ This function will panic if the iterator specified contains no items.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":106527,"byte_end":106600,"line_start":33,"line_end":33,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":106999,"byte_end":107009,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<SelectAll<Fut>>::into_inner","value":"pub fn into_inner(Self) -> Vec<Fut>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying futures.\n","sig":null,"attributes":[{"value":"/ Consumes this combinator, returning the underlying futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":106924,"byte_end":106987,"line_start":45,"line_end":45,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":8540},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":110770,"byte_end":110777,"line_start":94,"line_end":94,"column_start":6,"column_end":13},"name":"TryJoin","qualname":"::future::try_join::TryJoin","value":"TryJoin {  }","parent":null,"children":[{"krate":0,"index":8543},{"krate":0,"index":8544}],"decl_id":null,"docs":" Future for the [`try_join`](try_join()) function.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8585},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":110847,"byte_end":110855,"line_start":97,"line_end":97,"column_start":6,"column_end":14},"name":"TryJoin3","qualname":"::future::try_join::TryJoin3","value":"TryJoin3 {  }","parent":null,"children":[{"krate":0,"index":8589},{"krate":0,"index":8590},{"krate":0,"index":8591}],"decl_id":null,"docs":" Future for the [`try_join3`] function.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8642},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":110931,"byte_end":110939,"line_start":100,"line_end":100,"column_start":6,"column_end":14},"name":"TryJoin4","qualname":"::future::try_join::TryJoin4","value":"TryJoin4 {  }","parent":null,"children":[{"krate":0,"index":8647},{"krate":0,"index":8648},{"krate":0,"index":8649},{"krate":0,"index":8650}],"decl_id":null,"docs":" Future for the [`try_join4`] function.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8711},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111021,"byte_end":111029,"line_start":103,"line_end":103,"column_start":6,"column_end":14},"name":"TryJoin5","qualname":"::future::try_join::TryJoin5","value":"TryJoin5 {  }","parent":null,"children":[{"krate":0,"index":8717},{"krate":0,"index":8718},{"krate":0,"index":8719},{"krate":0,"index":8720},{"krate":0,"index":8721}],"decl_id":null,"docs":" Future for the [`try_join5`] function.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1248},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112302,"byte_end":112310,"line_start":148,"line_end":148,"column_start":8,"column_end":16},"name":"try_join","qualname":"::future::try_join::try_join","value":"pub fn try_join<Fut1, Fut2>(Fut1, Fut2) -> TryJoin<Fut1, Fut2> where\nFut1: TryFuture, Fut2: TryFuture<Error = Fut1::Error>","parent":null,"children":[],"decl_id":null,"docs":" Joins the result of two futures, waiting for them both to complete or\n for one to produce an error.","sig":null,"attributes":[{"value":"/ Joins the result of two futures, waiting for them both to complete or","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111067,"byte_end":111140,"line_start":106,"line_end":106,"column_start":1,"column_end":74}},{"value":"/ for one to produce an error.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111141,"byte_end":111173,"line_start":107,"line_end":107,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111174,"byte_end":111177,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ This function will return a new future which awaits both futures to","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111178,"byte_end":111249,"line_start":109,"line_end":109,"column_start":1,"column_end":72}},{"value":"/ complete. If successful, the returned future will finish with a tuple of","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111250,"byte_end":111326,"line_start":110,"line_end":110,"column_start":1,"column_end":77}},{"value":"/ both results. If unsuccessful, it will complete with the first error","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111327,"byte_end":111399,"line_start":111,"line_end":111,"column_start":1,"column_end":73}},{"value":"/ encountered.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111400,"byte_end":111416,"line_start":112,"line_end":112,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111417,"byte_end":111420,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ Note that this function consumes the passed futures and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111421,"byte_end":111490,"line_start":114,"line_end":114,"column_start":1,"column_end":70}},{"value":"/ wrapped version of it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111491,"byte_end":111517,"line_start":115,"line_end":115,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111518,"byte_end":111521,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111522,"byte_end":111536,"line_start":117,"line_end":117,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111537,"byte_end":111540,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ When used on multiple futures that return [`Ok`], `try_join` will return","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111541,"byte_end":111617,"line_start":119,"line_end":119,"column_start":1,"column_end":77}},{"value":"/ [`Ok`] of a tuple of the values:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111618,"byte_end":111654,"line_start":120,"line_end":120,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111655,"byte_end":111658,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111659,"byte_end":111666,"line_start":122,"line_end":122,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111667,"byte_end":111708,"line_start":123,"line_end":123,"column_start":1,"column_end":42}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111709,"byte_end":111733,"line_start":124,"line_end":124,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111734,"byte_end":111737,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ let a = future::ready(Ok::<i32, i32>(1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111738,"byte_end":111783,"line_start":126,"line_end":126,"column_start":1,"column_end":46}},{"value":"/ let b = future::ready(Ok::<i32, i32>(2));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111784,"byte_end":111829,"line_start":127,"line_end":127,"column_start":1,"column_end":46}},{"value":"/ let pair = future::try_join(a, b);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111830,"byte_end":111868,"line_start":128,"line_end":128,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111869,"byte_end":111872,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pair.await, Ok((1, 2)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111873,"byte_end":111912,"line_start":130,"line_end":130,"column_start":1,"column_end":40}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111913,"byte_end":111922,"line_start":131,"line_end":131,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111923,"byte_end":111930,"line_start":132,"line_end":132,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111931,"byte_end":111934,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ If one of the futures resolves to an error, `try_join` will return","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":111935,"byte_end":112005,"line_start":134,"line_end":134,"column_start":1,"column_end":71}},{"value":"/ that error:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112006,"byte_end":112021,"line_start":135,"line_end":135,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112022,"byte_end":112025,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112026,"byte_end":112033,"line_start":137,"line_end":137,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112034,"byte_end":112075,"line_start":138,"line_end":138,"column_start":1,"column_end":42}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112076,"byte_end":112100,"line_start":139,"line_end":139,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112101,"byte_end":112104,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ let a = future::ready(Ok::<i32, i32>(1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112105,"byte_end":112150,"line_start":141,"line_end":141,"column_start":1,"column_end":46}},{"value":"/ let b = future::ready(Err::<i32, i32>(2));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112151,"byte_end":112197,"line_start":142,"line_end":142,"column_start":1,"column_end":47}},{"value":"/ let pair = future::try_join(a, b);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112198,"byte_end":112236,"line_start":143,"line_end":143,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112237,"byte_end":112240,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pair.await, Err(2));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112241,"byte_end":112276,"line_start":145,"line_end":145,"column_start":1,"column_end":36}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112277,"byte_end":112286,"line_start":146,"line_end":146,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112287,"byte_end":112294,"line_start":147,"line_end":147,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1251},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112966,"byte_end":112975,"line_start":172,"line_end":172,"column_start":8,"column_end":17},"name":"try_join3","qualname":"::future::try_join::try_join3","value":"pub fn try_join3<Fut1, Fut2, Fut3>(Fut1, Fut2, Fut3)\n-> TryJoin3<Fut1, Fut2, Fut3> where Fut1: TryFuture, Fut2: TryFuture<Error =\nFut1::Error>, Fut3: TryFuture<Error = Fut1::Error>","parent":null,"children":[],"decl_id":null,"docs":" Same as [`try_join`](try_join()), but with more futures.","sig":null,"attributes":[{"value":"/ Same as [`try_join`](try_join()), but with more futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112548,"byte_end":112608,"line_start":156,"line_end":156,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112609,"byte_end":112612,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112613,"byte_end":112627,"line_start":158,"line_end":158,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112628,"byte_end":112631,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112632,"byte_end":112639,"line_start":160,"line_end":160,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112640,"byte_end":112681,"line_start":161,"line_end":161,"column_start":1,"column_end":42}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112682,"byte_end":112706,"line_start":162,"line_end":162,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112707,"byte_end":112710,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ let a = future::ready(Ok::<i32, i32>(1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112711,"byte_end":112756,"line_start":164,"line_end":164,"column_start":1,"column_end":46}},{"value":"/ let b = future::ready(Ok::<i32, i32>(2));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112757,"byte_end":112802,"line_start":165,"line_end":165,"column_start":1,"column_end":46}},{"value":"/ let c = future::ready(Ok::<i32, i32>(3));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112803,"byte_end":112848,"line_start":166,"line_end":166,"column_start":1,"column_end":46}},{"value":"/ let tuple = future::try_join3(a, b, c);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112849,"byte_end":112892,"line_start":167,"line_end":167,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112893,"byte_end":112896,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(tuple.await, Ok((1, 2, 3)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112897,"byte_end":112940,"line_start":169,"line_end":169,"column_start":1,"column_end":44}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112941,"byte_end":112950,"line_start":170,"line_end":170,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":112951,"byte_end":112958,"line_start":171,"line_end":171,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1255},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":113803,"byte_end":113812,"line_start":204,"line_end":204,"column_start":8,"column_end":17},"name":"try_join4","qualname":"::future::try_join::try_join4","value":"pub fn try_join4<Fut1, Fut2, Fut3, Fut4>(Fut1, Fut2, Fut3, Fut4)\n-> TryJoin4<Fut1, Fut2, Fut3, Fut4> where Fut1: TryFuture,\nFut2: TryFuture<Error = Fut1::Error>, Fut3: TryFuture<Error = Fut1::Error>,\nFut4: TryFuture<Error = Fut1::Error>","parent":null,"children":[],"decl_id":null,"docs":" Same as [`try_join`](try_join()), but with more futures.","sig":null,"attributes":[{"value":"/ Same as [`try_join`](try_join()), but with more futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":113333,"byte_end":113393,"line_start":187,"line_end":187,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":113394,"byte_end":113397,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":113398,"byte_end":113412,"line_start":189,"line_end":189,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":113413,"byte_end":113416,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":113417,"byte_end":113424,"line_start":191,"line_end":191,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":113425,"byte_end":113466,"line_start":192,"line_end":192,"column_start":1,"column_end":42}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":113467,"byte_end":113491,"line_start":193,"line_end":193,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":113492,"byte_end":113495,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ let a = future::ready(Ok::<i32, i32>(1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":113496,"byte_end":113541,"line_start":195,"line_end":195,"column_start":1,"column_end":46}},{"value":"/ let b = future::ready(Ok::<i32, i32>(2));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":113542,"byte_end":113587,"line_start":196,"line_end":196,"column_start":1,"column_end":46}},{"value":"/ let c = future::ready(Ok::<i32, i32>(3));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":113588,"byte_end":113633,"line_start":197,"line_end":197,"column_start":1,"column_end":46}},{"value":"/ let d = future::ready(Ok::<i32, i32>(4));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":113634,"byte_end":113679,"line_start":198,"line_end":198,"column_start":1,"column_end":46}},{"value":"/ let tuple = future::try_join4(a, b, c, d);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":113680,"byte_end":113726,"line_start":199,"line_end":199,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":113727,"byte_end":113730,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(tuple.await, Ok((1, 2, 3, 4)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":113731,"byte_end":113777,"line_start":201,"line_end":201,"column_start":1,"column_end":47}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":113778,"byte_end":113787,"line_start":202,"line_end":202,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":113788,"byte_end":113795,"line_start":203,"line_end":203,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1260},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":114784,"byte_end":114793,"line_start":239,"line_end":239,"column_start":8,"column_end":17},"name":"try_join5","qualname":"::future::try_join::try_join5","value":"pub fn try_join5<Fut1, Fut2, Fut3, Fut4, Fut5>(Fut1, Fut2, Fut3, Fut4, Fut5)\n-> TryJoin5<Fut1, Fut2, Fut3, Fut4, Fut5> where Fut1: TryFuture,\nFut2: TryFuture<Error = Fut1::Error>, Fut3: TryFuture<Error = Fut1::Error>,\nFut4: TryFuture<Error = Fut1::Error>, Fut5: TryFuture<Error = Fut1::Error>","parent":null,"children":[],"decl_id":null,"docs":" Same as [`try_join`](try_join()), but with more futures.","sig":null,"attributes":[{"value":"/ Same as [`try_join`](try_join()), but with more futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":114262,"byte_end":114322,"line_start":221,"line_end":221,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":114323,"byte_end":114326,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":114327,"byte_end":114341,"line_start":223,"line_end":223,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":114342,"byte_end":114345,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":114346,"byte_end":114353,"line_start":225,"line_end":225,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":114354,"byte_end":114395,"line_start":226,"line_end":226,"column_start":1,"column_end":42}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":114396,"byte_end":114420,"line_start":227,"line_end":227,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":114421,"byte_end":114424,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ let a = future::ready(Ok::<i32, i32>(1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":114425,"byte_end":114470,"line_start":229,"line_end":229,"column_start":1,"column_end":46}},{"value":"/ let b = future::ready(Ok::<i32, i32>(2));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":114471,"byte_end":114516,"line_start":230,"line_end":230,"column_start":1,"column_end":46}},{"value":"/ let c = future::ready(Ok::<i32, i32>(3));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":114517,"byte_end":114562,"line_start":231,"line_end":231,"column_start":1,"column_end":46}},{"value":"/ let d = future::ready(Ok::<i32, i32>(4));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":114563,"byte_end":114608,"line_start":232,"line_end":232,"column_start":1,"column_end":46}},{"value":"/ let e = future::ready(Ok::<i32, i32>(5));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":114609,"byte_end":114654,"line_start":233,"line_end":233,"column_start":1,"column_end":46}},{"value":"/ let tuple = future::try_join5(a, b, c, d, e);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":114655,"byte_end":114704,"line_start":234,"line_end":234,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":114705,"byte_end":114708,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(tuple.await, Ok((1, 2, 3, 4, 5)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":114709,"byte_end":114758,"line_start":236,"line_end":236,"column_start":1,"column_end":50}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":114759,"byte_end":114768,"line_start":237,"line_end":237,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join.rs","byte_start":114769,"byte_end":114776,"line_start":238,"line_end":238,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1343},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":116285,"byte_end":116295,"line_start":30,"line_end":30,"column_start":12,"column_end":22},"name":"TryJoinAll","qualname":"::future::try_join_all::TryJoinAll","value":"TryJoinAll {  }","parent":null,"children":[{"krate":0,"index":1345}],"decl_id":null,"docs":" Future for the [`try_join_all`] function.\n","sig":null,"attributes":[{"value":"/ Future for the [`try_join_all`] function.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":116160,"byte_end":116205,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":116206,"byte_end":116273,"line_start":29,"line_end":29,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":1349},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117888,"byte_end":117900,"line_start":86,"line_end":86,"column_start":8,"column_end":20},"name":"try_join_all","qualname":"::future::try_join_all::try_join_all","value":"pub fn try_join_all<I>(I) -> TryJoinAll<I::Item> where I: IntoIterator,\nI::Item: TryFuture","parent":null,"children":[],"decl_id":null,"docs":" Creates a future which represents either a collection of the results of the\n futures given or an error.","sig":null,"attributes":[{"value":"/ Creates a future which represents either a collection of the results of the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":116639,"byte_end":116718,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ futures given or an error.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":116719,"byte_end":116749,"line_start":49,"line_end":49,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":116750,"byte_end":116753,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ The returned future will drive execution for all of its underlying futures,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":116754,"byte_end":116833,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ collecting the results into a destination `Vec<T>` in the same order as they","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":116834,"byte_end":116914,"line_start":52,"line_end":52,"column_start":1,"column_end":81}},{"value":"/ were provided.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":116915,"byte_end":116933,"line_start":53,"line_end":53,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":116934,"byte_end":116937,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ If any future returns an error then all other futures will be canceled and","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":116938,"byte_end":117016,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"/ an error will be returned immediately. If all futures complete successfully,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117017,"byte_end":117097,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/ however, then the returned future will succeed with a `Vec` of all the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117098,"byte_end":117172,"line_start":57,"line_end":57,"column_start":1,"column_end":75}},{"value":"/ successful results.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117173,"byte_end":117196,"line_start":58,"line_end":58,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117197,"byte_end":117200,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ This function is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117201,"byte_end":117278,"line_start":60,"line_end":60,"column_start":1,"column_end":78}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117279,"byte_end":117336,"line_start":61,"line_end":61,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117337,"byte_end":117340,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117341,"byte_end":117355,"line_start":63,"line_end":63,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117356,"byte_end":117359,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117360,"byte_end":117367,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117368,"byte_end":117409,"line_start":66,"line_end":66,"column_start":1,"column_end":42}},{"value":"/ use futures::future::{self, try_join_all};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117410,"byte_end":117456,"line_start":67,"line_end":67,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117457,"byte_end":117460,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ let futures = vec![","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117461,"byte_end":117484,"line_start":69,"line_end":69,"column_start":1,"column_end":24}},{"value":"/     future::ok::<u32, u32>(1),","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117485,"byte_end":117519,"line_start":70,"line_end":70,"column_start":1,"column_end":35}},{"value":"/     future::ok::<u32, u32>(2),","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117520,"byte_end":117554,"line_start":71,"line_end":71,"column_start":1,"column_end":35}},{"value":"/     future::ok::<u32, u32>(3),","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117555,"byte_end":117589,"line_start":72,"line_end":72,"column_start":1,"column_end":35}},{"value":"/ ];","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117590,"byte_end":117596,"line_start":73,"line_end":73,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117597,"byte_end":117600,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(try_join_all(futures).await, Ok(vec![1, 2, 3]));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117601,"byte_end":117664,"line_start":75,"line_end":75,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117665,"byte_end":117668,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ let futures = vec![","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117669,"byte_end":117692,"line_start":77,"line_end":77,"column_start":1,"column_end":24}},{"value":"/     future::ok::<u32, u32>(1),","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117693,"byte_end":117727,"line_start":78,"line_end":78,"column_start":1,"column_end":35}},{"value":"/     future::err::<u32, u32>(2),","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117728,"byte_end":117763,"line_start":79,"line_end":79,"column_start":1,"column_end":36}},{"value":"/     future::ok::<u32, u32>(3),","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117764,"byte_end":117798,"line_start":80,"line_end":80,"column_start":1,"column_end":35}},{"value":"/ ];","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117799,"byte_end":117805,"line_start":81,"line_end":81,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117806,"byte_end":117809,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(try_join_all(futures).await, Err(2));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117810,"byte_end":117862,"line_start":83,"line_end":83,"column_start":1,"column_end":53}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117863,"byte_end":117872,"line_start":84,"line_end":84,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":117873,"byte_end":117880,"line_start":85,"line_end":85,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":8792},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":119798,"byte_end":119807,"line_start":9,"line_end":9,"column_start":12,"column_end":21},"name":"TrySelect","qualname":"::future::try_select::TrySelect","value":"TrySelect {  }","parent":null,"children":[{"krate":0,"index":8795}],"decl_id":null,"docs":" Future for the [`try_select()`] function.\n","sig":null,"attributes":[{"value":"/ Future for the [`try_select()`] function.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":119656,"byte_end":119701,"line_start":6,"line_end":6,"column_start":1,"column_end":46}},{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":119702,"byte_end":119769,"line_start":7,"line_end":7,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":1395},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":121392,"byte_end":121402,"line_start":50,"line_end":50,"column_start":8,"column_end":18},"name":"try_select","qualname":"::future::try_select::try_select","value":"pub fn try_select<A, B>(A, B) -> TrySelect<A, B> where A: TryFuture + Unpin,\nB: TryFuture + Unpin","parent":null,"children":[],"decl_id":null,"docs":" Waits for either one of two differently-typed futures to complete.","sig":null,"attributes":[{"value":"/ Waits for either one of two differently-typed futures to complete.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":119901,"byte_end":119971,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":119972,"byte_end":119975,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This function will return a new future which awaits for either one of both","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":119976,"byte_end":120054,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/ futures to complete. The returned future will finish with both the value","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120055,"byte_end":120131,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/ resolved and a future representing the completion of the other work.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120132,"byte_end":120204,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120205,"byte_end":120208,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Note that this function consumes the receiving futures and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120209,"byte_end":120281,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/ wrapped version of them.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120282,"byte_end":120310,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120311,"byte_end":120314,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Also note that if both this and the second future have the same","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120315,"byte_end":120382,"line_start":24,"line_end":24,"column_start":1,"column_end":68}},{"value":"/ success/error type you can use the `Either::factor_first` method to","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120383,"byte_end":120454,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"/ conveniently extract out the value at the end.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120455,"byte_end":120505,"line_start":26,"line_end":26,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120506,"byte_end":120509,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120510,"byte_end":120524,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120525,"byte_end":120528,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120529,"byte_end":120536,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ use futures::future::{self, Either, Future, FutureExt, TryFuture, TryFutureExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120537,"byte_end":120621,"line_start":31,"line_end":31,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120622,"byte_end":120625,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // A poor-man's try_join implemented on top of select","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120626,"byte_end":120683,"line_start":33,"line_end":33,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120684,"byte_end":120687,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ fn try_join<A, B, E>(a: A, b: B) -> impl TryFuture<Ok=(A::Ok, B::Ok), Error=E>","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120688,"byte_end":120770,"line_start":35,"line_end":35,"column_start":1,"column_end":83}},{"value":"/      where A: TryFuture<Error = E> + Unpin + 'static,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120771,"byte_end":120828,"line_start":36,"line_end":36,"column_start":1,"column_end":58}},{"value":"/            B: TryFuture<Error = E> + Unpin + 'static,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120829,"byte_end":120886,"line_start":37,"line_end":37,"column_start":1,"column_end":58}},{"value":"/            E: 'static,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120887,"byte_end":120913,"line_start":38,"line_end":38,"column_start":1,"column_end":27}},{"value":"/ {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120914,"byte_end":120919,"line_start":39,"line_end":39,"column_start":1,"column_end":6}},{"value":"/     future::try_select(a, b).then(|res| -> Box<dyn Future<Output = Result<_, _>> + Unpin> {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":120920,"byte_end":121015,"line_start":40,"line_end":40,"column_start":1,"column_end":96}},{"value":"/         match res {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":121016,"byte_end":121039,"line_start":41,"line_end":41,"column_start":1,"column_end":24}},{"value":"/             Ok(Either::Left((x, b))) => Box::new(b.map_ok(move |y| (x, y))),","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":121040,"byte_end":121120,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/             Ok(Either::Right((y, a))) => Box::new(a.map_ok(move |x| (x, y))),","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":121121,"byte_end":121202,"line_start":43,"line_end":43,"column_start":1,"column_end":82}},{"value":"/             Err(Either::Left((e, _))) => Box::new(future::err(e)),","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":121203,"byte_end":121273,"line_start":44,"line_end":44,"column_start":1,"column_end":71}},{"value":"/             Err(Either::Right((e, _))) => Box::new(future::err(e)),","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":121274,"byte_end":121345,"line_start":45,"line_end":45,"column_start":1,"column_end":72}},{"value":"/         }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":121346,"byte_end":121359,"line_start":46,"line_end":46,"column_start":1,"column_end":14}},{"value":"/     })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":121360,"byte_end":121370,"line_start":47,"line_end":47,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":121371,"byte_end":121376,"line_start":48,"line_end":48,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":121377,"byte_end":121384,"line_start":49,"line_end":49,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":8800},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":123033,"byte_end":123041,"line_start":13,"line_end":13,"column_start":12,"column_end":20},"name":"SelectOk","qualname":"::future::select_ok::SelectOk","value":"SelectOk {  }","parent":null,"children":[{"krate":0,"index":8802}],"decl_id":null,"docs":" Future for the [`select_ok`] function.\n","sig":null,"attributes":[{"value":"/ Future for the [`select_ok`] function.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":122894,"byte_end":122936,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":122954,"byte_end":123021,"line_start":12,"line_end":12,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":1445},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":123763,"byte_end":123772,"line_start":32,"line_end":32,"column_start":8,"column_end":17},"name":"select_ok","qualname":"::future::select_ok::select_ok","value":"pub fn select_ok<I>(I) -> SelectOk<I::Item> where I: IntoIterator,\nI::Item: TryFuture + Unpin","parent":null,"children":[],"decl_id":null,"docs":" Creates a new future which will select the first successful future over a list of futures.","sig":null,"attributes":[{"value":"/ Creates a new future which will select the first successful future over a list of futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":123118,"byte_end":123212,"line_start":19,"line_end":19,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":123213,"byte_end":123216,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ The returned future will wait for any future within `iter` to be ready and Ok. Unlike","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":123217,"byte_end":123306,"line_start":21,"line_end":21,"column_start":1,"column_end":90}},{"value":"/ `select_all`, this will only return the first successful completion, or the last","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":123307,"byte_end":123391,"line_start":22,"line_end":22,"column_start":1,"column_end":85}},{"value":"/ failure. This is useful in contexts where any success is desired and failures","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":123392,"byte_end":123473,"line_start":23,"line_end":23,"column_start":1,"column_end":82}},{"value":"/ are ignored, unless all the futures fail.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":123474,"byte_end":123519,"line_start":24,"line_end":24,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":123520,"byte_end":123523,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/  This function is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":123524,"byte_end":123602,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":123603,"byte_end":123660,"line_start":27,"line_end":27,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":123661,"byte_end":123664,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":123665,"byte_end":123677,"line_start":29,"line_end":29,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":123678,"byte_end":123681,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This function will panic if the iterator specified contains no items.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":123682,"byte_end":123755,"line_start":31,"line_end":31,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8809},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126515,"byte_end":126519,"line_start":30,"line_end":30,"column_start":5,"column_end":9},"name":"Left","qualname":"::future::either::Either::Left","value":"Either::Left(A)","parent":{"krate":0,"index":8806},"children":[],"decl_id":null,"docs":" First branch of the type\n","sig":null,"attributes":[{"value":"/ First branch of the type","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126482,"byte_end":126510,"line_start":29,"line_end":29,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8812},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126575,"byte_end":126580,"line_start":32,"line_end":32,"column_start":5,"column_end":10},"name":"Right","qualname":"::future::either::Either::Right","value":"Either::Right(B)","parent":{"krate":0,"index":8806},"children":[],"decl_id":null,"docs":" Second branch of the type\n","sig":null,"attributes":[{"value":"/ Second branch of the type","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126541,"byte_end":126570,"line_start":31,"line_end":31,"column_start":5,"column_end":34}}]},{"kind":"Enum","id":{"krate":0,"index":8806},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126463,"byte_end":126469,"line_start":28,"line_end":28,"column_start":10,"column_end":16},"name":"Either","qualname":"::future::either::Either","value":"pub enum Either<A, B> { Left(A), Right(B), }","parent":null,"children":[{"krate":0,"index":8809},{"krate":0,"index":8812}],"decl_id":null,"docs":" Combines two different futures, streams, or sinks having the same associated types into a single type.","sig":null,"attributes":[{"value":"/ Combines two different futures, streams, or sinks having the same associated types into a single type.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":125940,"byte_end":126046,"line_start":8,"line_end":8,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126047,"byte_end":126050,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This is useful when conditionally choosing between two distinct future types:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126051,"byte_end":126132,"line_start":10,"line_end":10,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126133,"byte_end":126136,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126137,"byte_end":126148,"line_start":12,"line_end":12,"column_start":1,"column_end":12}},{"value":"/ use futures::future::Either;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126149,"byte_end":126181,"line_start":13,"line_end":13,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126182,"byte_end":126185,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126186,"byte_end":126227,"line_start":15,"line_end":15,"column_start":1,"column_end":42}},{"value":"/ let cond = true;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126228,"byte_end":126248,"line_start":16,"line_end":16,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126249,"byte_end":126252,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ let fut = if cond {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126253,"byte_end":126276,"line_start":18,"line_end":18,"column_start":1,"column_end":24}},{"value":"/     Either::Left(async move { 12 })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126277,"byte_end":126316,"line_start":19,"line_end":19,"column_start":1,"column_end":40}},{"value":"/ } else {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126317,"byte_end":126329,"line_start":20,"line_end":20,"column_start":1,"column_end":13}},{"value":"/     Either::Right(async move { 44 })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126330,"byte_end":126370,"line_start":21,"line_end":21,"column_start":1,"column_end":41}},{"value":"/ };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126371,"byte_end":126377,"line_start":22,"line_end":22,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126378,"byte_end":126381,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(fut.await, 12);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126382,"byte_end":126412,"line_start":24,"line_end":24,"column_start":1,"column_end":31}},{"value":"/ # })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126413,"byte_end":126421,"line_start":25,"line_end":25,"column_start":1,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126422,"byte_end":126429,"line_start":26,"line_end":26,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":127134,"byte_end":127146,"line_start":50,"line_end":50,"column_start":12,"column_end":24},"name":"factor_first","qualname":"<Either<(T, A), (T, B)>>::factor_first","value":"pub fn factor_first(Self) -> (T, Either<A, B>)","parent":null,"children":[],"decl_id":null,"docs":" Factor out a homogeneous type from an either of pairs.","sig":null,"attributes":[{"value":"/ Factor out a homogeneous type from an either of pairs.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126986,"byte_end":127044,"line_start":47,"line_end":47,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":127049,"byte_end":127052,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ Here, the homogeneous type is the first element of the pairs.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":127057,"byte_end":127122,"line_start":49,"line_end":49,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1501},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":127526,"byte_end":127539,"line_start":62,"line_end":62,"column_start":12,"column_end":25},"name":"factor_second","qualname":"<Either<(A, T), (B, T)>>::factor_second","value":"pub fn factor_second(Self) -> (Either<A, B>, T)","parent":null,"children":[],"decl_id":null,"docs":" Factor out a homogeneous type from an either of pairs.","sig":null,"attributes":[{"value":"/ Factor out a homogeneous type from an either of pairs.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":127377,"byte_end":127435,"line_start":59,"line_end":59,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":127440,"byte_end":127443,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Here, the homogeneous type is the second element of the pairs.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":127448,"byte_end":127514,"line_start":61,"line_end":61,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":127827,"byte_end":127837,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Either<T, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Extract the value of an either over two equivalent types.\n","sig":null,"attributes":[{"value":"/ Extract the value of an either over two equivalent types.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":127754,"byte_end":127815,"line_start":71,"line_end":71,"column_start":5,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":1544},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/abortable.rs","byte_start":134441,"byte_end":134450,"line_start":12,"line_end":12,"column_start":8,"column_end":17},"name":"abortable","qualname":"::future::abortable::abortable","value":"pub fn abortable<Fut>(Fut) -> (Abortable<Fut>, AbortHandle) where Fut: Future","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Abortable` future and an `AbortHandle` which can be used to stop it.","sig":null,"attributes":[{"value":"/ Creates a new `Abortable` future and an `AbortHandle` which can be used to stop it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/abortable.rs","byte_start":134071,"byte_end":134158,"line_start":5,"line_end":5,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/abortable.rs","byte_start":134159,"byte_end":134162,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This function is a convenient (but less flexible) alternative to calling","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/abortable.rs","byte_start":134163,"byte_end":134239,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"/ `AbortHandle::new` and `Abortable::new` manually.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/abortable.rs","byte_start":134240,"byte_end":134293,"line_start":8,"line_end":8,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/abortable.rs","byte_start":134294,"byte_end":134297,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This function is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/abortable.rs","byte_start":134298,"byte_end":134375,"line_start":10,"line_end":10,"column_start":1,"column_end":78}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/abortable.rs","byte_start":134376,"byte_end":134433,"line_start":11,"line_end":11,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":1578},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::stream","value":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","parent":null,"children":[{"krate":0,"index":1579},{"krate":0,"index":1580},{"krate":0,"index":1583},{"krate":0,"index":1586},{"krate":0,"index":1587},{"krate":0,"index":1590},{"krate":0,"index":1593},{"krate":0,"index":1596},{"krate":0,"index":3487},{"krate":0,"index":3488},{"krate":0,"index":3491},{"krate":0,"index":3494},{"krate":0,"index":3497},{"krate":0,"index":3500},{"krate":0,"index":3503},{"krate":0,"index":3506},{"krate":0,"index":3509},{"krate":0,"index":3512},{"krate":0,"index":3515},{"krate":0,"index":3518},{"krate":0,"index":3521},{"krate":0,"index":3524},{"krate":0,"index":3527},{"krate":0,"index":3530},{"krate":0,"index":3533},{"krate":0,"index":3536},{"krate":0,"index":3539},{"krate":0,"index":3542},{"krate":0,"index":3545},{"krate":0,"index":3548},{"krate":0,"index":3551},{"krate":0,"index":3554},{"krate":0,"index":3557},{"krate":0,"index":3560},{"krate":0,"index":3563},{"krate":0,"index":3566},{"krate":0,"index":3569},{"krate":0,"index":3572},{"krate":0,"index":3575},{"krate":0,"index":3578},{"krate":0,"index":3581},{"krate":0,"index":3584},{"krate":0,"index":3587},{"krate":0,"index":3590},{"krate":0,"index":3591},{"krate":0,"index":3594},{"krate":0,"index":3597},{"krate":0,"index":3600},{"krate":0,"index":4689},{"krate":0,"index":4690},{"krate":0,"index":4693},{"krate":0,"index":4696},{"krate":0,"index":4699},{"krate":0,"index":4702},{"krate":0,"index":4705},{"krate":0,"index":4708},{"krate":0,"index":4711},{"krate":0,"index":4714},{"krate":0,"index":4717},{"krate":0,"index":4720},{"krate":0,"index":4723},{"krate":0,"index":4726},{"krate":0,"index":4729},{"krate":0,"index":4732},{"krate":0,"index":4735},{"krate":0,"index":4738},{"krate":0,"index":4741},{"krate":0,"index":4744},{"krate":0,"index":4747},{"krate":0,"index":4750},{"krate":0,"index":4753},{"krate":0,"index":4754},{"krate":0,"index":4757},{"krate":0,"index":4760},{"krate":0,"index":4763},{"krate":0,"index":4764},{"krate":0,"index":4767},{"krate":0,"index":4768},{"krate":0,"index":4770},{"krate":0,"index":4796},{"krate":0,"index":4797},{"krate":0,"index":4800},{"krate":0,"index":4803},{"krate":0,"index":4836},{"krate":0,"index":4837},{"krate":0,"index":4840},{"krate":0,"index":4843},{"krate":0,"index":4880},{"krate":0,"index":4881},{"krate":0,"index":4884},{"krate":0,"index":4887},{"krate":0,"index":4926},{"krate":0,"index":4927},{"krate":0,"index":4930},{"krate":0,"index":4933},{"krate":0,"index":4976},{"krate":0,"index":4977},{"krate":0,"index":4980},{"krate":0,"index":4983},{"krate":0,"index":5022},{"krate":0,"index":5023},{"krate":0,"index":5026},{"krate":0,"index":5029},{"krate":0,"index":5065},{"krate":0,"index":5066},{"krate":0,"index":5069},{"krate":0,"index":5072},{"krate":0,"index":5100},{"krate":0,"index":5101},{"krate":0,"index":5104},{"krate":0,"index":5107},{"krate":0,"index":5161},{"krate":0,"index":5162},{"krate":0,"index":5165},{"krate":0,"index":5168},{"krate":0,"index":5243},{"krate":0,"index":5244},{"krate":0,"index":5247},{"krate":0,"index":5250},{"krate":0,"index":5253},{"krate":0,"index":5312},{"krate":0,"index":5313},{"krate":0,"index":5316},{"krate":0,"index":5319},{"krate":0,"index":5426},{"krate":0,"index":5429},{"krate":0,"index":5832},{"krate":0,"index":5835},{"krate":0,"index":5957},{"krate":0,"index":5958},{"krate":0,"index":5961},{"krate":0,"index":5964},{"krate":0,"index":5980},{"krate":0,"index":5981},{"krate":0,"index":5984},{"krate":0,"index":5987},{"krate":0,"index":5990},{"krate":0,"index":5991},{"krate":0,"index":5993},{"krate":0,"index":5996}],"decl_id":null,"docs":" Asynchronous streams.","sig":null,"attributes":[{"value":"/ Asynchronous streams.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":134702,"byte_end":134727,"line_start":1,"line_end":1,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":134728,"byte_end":134731,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module contains:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":134732,"byte_end":134757,"line_start":3,"line_end":3,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":134758,"byte_end":134761,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ - The [`Stream`] trait, for objects that can asynchronously produce a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":134762,"byte_end":134835,"line_start":5,"line_end":5,"column_start":1,"column_end":74}},{"value":"/   sequence of values.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":134836,"byte_end":134861,"line_start":6,"line_end":6,"column_start":1,"column_end":26}},{"value":"/ - The [`StreamExt`] and [`TryStreamExt`] trait, which provides adapters for","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":134862,"byte_end":134941,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/   chaining and composing streams.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":134942,"byte_end":134979,"line_start":8,"line_end":8,"column_start":1,"column_end":38}},{"value":"/ - Top-level stream constructors like [`iter`](iter()) which creates a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":134980,"byte_end":135053,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"/   stream from an iterator.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":135054,"byte_end":135084,"line_start":10,"line_end":10,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":8830},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/chain.rs","byte_start":192555,"byte_end":192560,"line_start":11,"line_end":11,"column_start":16,"column_end":21},"name":"Chain","qualname":"::stream::stream::chain::Chain","value":"Chain {  }","parent":null,"children":[{"krate":0,"index":8833},{"krate":0,"index":8834}],"decl_id":null,"docs":" Stream for the [`chain`](super::StreamExt::chain) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8879},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/collect.rs","byte_start":194685,"byte_end":194692,"line_start":13,"line_end":13,"column_start":16,"column_end":23},"name":"Collect","qualname":"::stream::stream::collect::Collect","value":"Collect {  }","parent":null,"children":[{"krate":0,"index":8882},{"krate":0,"index":8883}],"decl_id":null,"docs":" Future for the [`collect`](super::StreamExt::collect) method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8930},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/unzip.rs","byte_start":196126,"byte_end":196131,"line_start":13,"line_end":13,"column_start":16,"column_end":21},"name":"Unzip","qualname":"::stream::stream::unzip::Unzip","value":"Unzip {  }","parent":null,"children":[{"krate":0,"index":8934},{"krate":0,"index":8935},{"krate":0,"index":8936}],"decl_id":null,"docs":" Future for the [`unzip`](super::StreamExt::unzip) method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8988},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/concat.rs","byte_start":197965,"byte_end":197971,"line_start":12,"line_end":12,"column_start":16,"column_end":22},"name":"Concat","qualname":"::stream::stream::concat::Concat","value":"Concat {  }","parent":null,"children":[{"krate":0,"index":8990},{"krate":0,"index":8991}],"decl_id":null,"docs":" Future for the [`concat`](super::StreamExt::concat) method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9023},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/count.rs","byte_start":199643,"byte_end":199648,"line_start":12,"line_end":12,"column_start":16,"column_end":21},"name":"Count","qualname":"::stream::stream::count::Count","value":"Count {  }","parent":null,"children":[{"krate":0,"index":9025},{"krate":0,"index":9026}],"decl_id":null,"docs":" Future for the [`count`](super::StreamExt::count) method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9065},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/cycle.rs","byte_start":200958,"byte_end":200963,"line_start":12,"line_end":12,"column_start":16,"column_end":21},"name":"Cycle","qualname":"::stream::stream::cycle::Cycle","value":"Cycle {  }","parent":null,"children":[{"krate":0,"index":9067},{"krate":0,"index":9068}],"decl_id":null,"docs":" Stream for the [`cycle`](super::StreamExt::cycle) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9105},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/enumerate.rs","byte_start":202610,"byte_end":202619,"line_start":13,"line_end":13,"column_start":16,"column_end":25},"name":"Enumerate","qualname":"::stream::stream::enumerate::Enumerate","value":"Enumerate {  }","parent":null,"children":[{"krate":0,"index":9107},{"krate":0,"index":9108}],"decl_id":null,"docs":" Stream for the [`enumerate`](super::StreamExt::enumerate) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9144},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/filter.rs","byte_start":204251,"byte_end":204257,"line_start":15,"line_end":15,"column_start":16,"column_end":22},"name":"Filter","qualname":"::stream::stream::filter::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":9148},{"krate":0,"index":9149},{"krate":0,"index":9150},{"krate":0,"index":9151}],"decl_id":null,"docs":" Stream for the [`filter`](super::StreamExt::filter) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9209},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/filter_map.rs","byte_start":207651,"byte_end":207660,"line_start":15,"line_end":15,"column_start":16,"column_end":25},"name":"FilterMap","qualname":"::stream::stream::filter_map::FilterMap","value":"FilterMap {  }","parent":null,"children":[{"krate":0,"index":9213},{"krate":0,"index":9214},{"krate":0,"index":9215}],"decl_id":null,"docs":" Stream for the [`filter_map`](super::StreamExt::filter_map) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9277},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/flatten.rs","byte_start":210666,"byte_end":210673,"line_start":13,"line_end":13,"column_start":16,"column_end":23},"name":"Flatten","qualname":"::stream::stream::flatten::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":9280},{"krate":0,"index":9281}],"decl_id":null,"docs":" Stream for the [`flatten`](super::StreamExt::flatten) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9325},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":140608,"byte_end":140615,"line_start":67,"line_end":67,"column_start":5,"column_end":12},"name":"Flatten","qualname":"::stream::stream::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":9327}],"decl_id":null,"docs":" Stream for the [`flatten`](StreamExt::flatten) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9378},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fold.rs","byte_start":212490,"byte_end":212494,"line_start":12,"line_end":12,"column_start":16,"column_end":20},"name":"Fold","qualname":"::stream::stream::fold::Fold","value":"Fold {  }","parent":null,"children":[{"krate":0,"index":9383},{"krate":0,"index":9384},{"krate":0,"index":9385},{"krate":0,"index":9386}],"decl_id":null,"docs":" Future for the [`fold`](super::StreamExt::fold) method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9447},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/any.rs","byte_start":214951,"byte_end":214954,"line_start":12,"line_end":12,"column_start":16,"column_end":19},"name":"Any","qualname":"::stream::stream::any::Any","value":"Any {  }","parent":null,"children":[{"krate":0,"index":9451},{"krate":0,"index":9452},{"krate":0,"index":9453},{"krate":0,"index":9454}],"decl_id":null,"docs":" Future for the [`any`](super::StreamExt::any) method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9508},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/all.rs","byte_start":217527,"byte_end":217530,"line_start":12,"line_end":12,"column_start":16,"column_end":19},"name":"All","qualname":"::stream::stream::all::All","value":"All {  }","parent":null,"children":[{"krate":0,"index":9512},{"krate":0,"index":9513},{"krate":0,"index":9514},{"krate":0,"index":9515}],"decl_id":null,"docs":" Future for the [`all`](super::StreamExt::all) method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9569},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/for_each.rs","byte_start":220129,"byte_end":220136,"line_start":12,"line_end":12,"column_start":16,"column_end":23},"name":"ForEach","qualname":"::stream::stream::for_each::ForEach","value":"ForEach {  }","parent":null,"children":[{"krate":0,"index":9573},{"krate":0,"index":9574},{"krate":0,"index":9575}],"decl_id":null,"docs":" Future for the [`for_each`](super::StreamExt::for_each) method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9631},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fuse.rs","byte_start":222093,"byte_end":222097,"line_start":13,"line_end":13,"column_start":16,"column_end":20},"name":"Fuse","qualname":"::stream::stream::fuse::Fuse","value":"Fuse {  }","parent":null,"children":[{"krate":0,"index":9633},{"krate":0,"index":9634}],"decl_id":null,"docs":" Stream for the [`fuse`](super::StreamExt::fuse) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":2377},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fuse.rs","byte_start":222549,"byte_end":222556,"line_start":30,"line_end":30,"column_start":12,"column_end":19},"name":"is_done","qualname":"<Fuse<St>>::is_done","value":"pub fn is_done(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the underlying stream has finished or not.","sig":null,"attributes":[{"value":"/ Returns whether the underlying stream has finished or not.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fuse.rs","byte_start":222280,"byte_end":222342,"line_start":25,"line_end":25,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fuse.rs","byte_start":222347,"byte_end":222350,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ If this method returns `true`, then all future calls to poll are","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fuse.rs","byte_start":222355,"byte_end":222423,"line_start":27,"line_end":27,"column_start":5,"column_end":73}},{"value":"/ guaranteed to return `None`. If this returns `false`, then the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fuse.rs","byte_start":222428,"byte_end":222494,"line_start":28,"line_end":28,"column_start":5,"column_end":71}},{"value":"/ underlying stream is still in use.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fuse.rs","byte_start":222499,"byte_end":222537,"line_start":29,"line_end":29,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":9670},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":223915,"byte_end":223927,"line_start":11,"line_end":11,"column_start":12,"column_end":24},"name":"StreamFuture","qualname":"::stream::stream::into_future::StreamFuture","value":"StreamFuture {  }","parent":null,"children":[{"krate":0,"index":9672}],"decl_id":null,"docs":" Future for the [`into_future`](super::StreamExt::into_future) method.\n","sig":null,"attributes":[{"value":"/ Future for the [`into_future`](super::StreamExt::into_future) method.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":223745,"byte_end":223818,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":223836,"byte_end":223903,"line_start":10,"line_end":10,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2419},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":224490,"byte_end":224497,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<StreamFuture<St>>::get_ref","value":"pub fn get_ref(&Self) -> Option<&St>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream that this combinator is\n pulling from.","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream that this combinator is","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":224098,"byte_end":224171,"line_start":20,"line_end":20,"column_start":5,"column_end":78}},{"value":"/ pulling from.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":224176,"byte_end":224193,"line_start":21,"line_end":21,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":224198,"byte_end":224201,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ This method returns an `Option` to account for the fact that `StreamFuture`'s","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":224206,"byte_end":224287,"line_start":23,"line_end":23,"column_start":5,"column_end":86}},{"value":"/ implementation of `Future::poll` consumes the underlying stream during polling","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":224292,"byte_end":224374,"line_start":24,"line_end":24,"column_start":5,"column_end":87}},{"value":"/ in order to return it to the caller of `Future::poll` if the stream yielded","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":224379,"byte_end":224458,"line_start":25,"line_end":25,"column_start":5,"column_end":84}},{"value":"/ an element.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":224463,"byte_end":224478,"line_start":26,"line_end":26,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":2420},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":225108,"byte_end":225115,"line_start":41,"line_end":41,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<StreamFuture<St>>::get_mut","value":"pub fn get_mut(&mut Self) -> Option<&mut St>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream that this\n combinator is pulling from.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream that this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":224562,"byte_end":224629,"line_start":31,"line_end":31,"column_start":5,"column_end":72}},{"value":"/ combinator is pulling from.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":224634,"byte_end":224665,"line_start":32,"line_end":32,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":224670,"byte_end":224673,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ Note that care must be taken to avoid tampering with the state of the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":224678,"byte_end":224751,"line_start":34,"line_end":34,"column_start":5,"column_end":78}},{"value":"/ stream which may otherwise confuse this combinator.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":224756,"byte_end":224811,"line_start":35,"line_end":35,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":224816,"byte_end":224819,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ This method returns an `Option` to account for the fact that `StreamFuture`'s","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":224824,"byte_end":224905,"line_start":37,"line_end":37,"column_start":5,"column_end":86}},{"value":"/ implementation of `Future::poll` consumes the underlying stream during polling","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":224910,"byte_end":224992,"line_start":38,"line_end":38,"column_start":5,"column_end":87}},{"value":"/ in order to return it to the caller of `Future::poll` if the stream yielded","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":224997,"byte_end":225076,"line_start":39,"line_end":39,"column_start":5,"column_end":84}},{"value":"/ an element.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":225081,"byte_end":225096,"line_start":40,"line_end":40,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":2421},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":225741,"byte_end":225752,"line_start":55,"line_end":55,"column_start":12,"column_end":23},"name":"get_pin_mut","qualname":"<StreamFuture<St>>::get_pin_mut","value":"pub fn get_pin_mut(Pin<&mut Self>) -> Option<Pin<&mut St>>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a pinned mutable reference to the underlying stream that this\n combinator is pulling from.","sig":null,"attributes":[{"value":"/ Acquires a pinned mutable reference to the underlying stream that this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":225188,"byte_end":225262,"line_start":45,"line_end":45,"column_start":5,"column_end":79}},{"value":"/ combinator is pulling from.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":225267,"byte_end":225298,"line_start":46,"line_end":46,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":225303,"byte_end":225306,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ Note that care must be taken to avoid tampering with the state of the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":225311,"byte_end":225384,"line_start":48,"line_end":48,"column_start":5,"column_end":78}},{"value":"/ stream which may otherwise confuse this combinator.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":225389,"byte_end":225444,"line_start":49,"line_end":49,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":225449,"byte_end":225452,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ This method returns an `Option` to account for the fact that `StreamFuture`'s","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":225457,"byte_end":225538,"line_start":51,"line_end":51,"column_start":5,"column_end":86}},{"value":"/ implementation of `Future::poll` consumes the underlying stream during polling","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":225543,"byte_end":225625,"line_start":52,"line_end":52,"column_start":5,"column_end":87}},{"value":"/ in order to return it to the caller of `Future::poll` if the stream yielded","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":225630,"byte_end":225709,"line_start":53,"line_end":53,"column_start":5,"column_end":84}},{"value":"/ an element.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":225714,"byte_end":225729,"line_start":54,"line_end":54,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":2422},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":226385,"byte_end":226395,"line_start":68,"line_end":68,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<StreamFuture<St>>::into_inner","value":"pub fn into_inner(Self) -> Option<St>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying stream.","sig":null,"attributes":[{"value":"/ Consumes this combinator, returning the underlying stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":225865,"byte_end":225927,"line_start":59,"line_end":59,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":225932,"byte_end":225935,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Note that this may discard intermediate state of this combinator, so","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":225940,"byte_end":226012,"line_start":61,"line_end":61,"column_start":5,"column_end":77}},{"value":"/ care should be taken to avoid losing resources when this is called.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":226017,"byte_end":226088,"line_start":62,"line_end":62,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":226093,"byte_end":226096,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ This method returns an `Option` to account for the fact that `StreamFuture`'s","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":226101,"byte_end":226182,"line_start":64,"line_end":64,"column_start":5,"column_end":86}},{"value":"/ implementation of `Future::poll` consumes the underlying stream during polling","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":226187,"byte_end":226269,"line_start":65,"line_end":65,"column_start":5,"column_end":87}},{"value":"/ in order to return it to the caller of `Future::poll` if the stream yielded","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":226274,"byte_end":226353,"line_start":66,"line_end":66,"column_start":5,"column_end":84}},{"value":"/ an element.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":226358,"byte_end":226373,"line_start":67,"line_end":67,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9679},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":141955,"byte_end":141962,"line_start":112,"line_end":112,"column_start":5,"column_end":12},"name":"Inspect","qualname":"::stream::stream::Inspect","value":"Inspect {  }","parent":null,"children":[{"krate":0,"index":9682}],"decl_id":null,"docs":" Stream for the [`inspect`](StreamExt::inspect) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9745},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/map.rs","byte_start":227419,"byte_end":227422,"line_start":15,"line_end":15,"column_start":16,"column_end":19},"name":"Map","qualname":"::stream::stream::map::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":9748},{"krate":0,"index":9749}],"decl_id":null,"docs":" Stream for the [`map`](super::StreamExt::map) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9798},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":142323,"byte_end":142330,"line_start":123,"line_end":123,"column_start":5,"column_end":12},"name":"FlatMap","qualname":"::stream::stream::FlatMap","value":"FlatMap {  }","parent":null,"children":[{"krate":0,"index":9802}],"decl_id":null,"docs":" Stream for the [`flat_map`](StreamExt::flat_map) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9877},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/next.rs","byte_start":229082,"byte_end":229086,"line_start":10,"line_end":10,"column_start":12,"column_end":16},"name":"Next","qualname":"::stream::stream::next::Next","value":"Next {  }","parent":null,"children":[{"krate":0,"index":9880}],"decl_id":null,"docs":" Future for the [`next`](super::StreamExt::next) method.\n","sig":null,"attributes":[{"value":"/ Future for the [`next`](super::StreamExt::next) method.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/next.rs","byte_start":228926,"byte_end":228985,"line_start":7,"line_end":7,"column_start":1,"column_end":60}},{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/next.rs","byte_start":229003,"byte_end":229070,"line_start":9,"line_end":9,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":9885},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/select_next_some.rs","byte_start":230094,"byte_end":230108,"line_start":12,"line_end":12,"column_start":12,"column_end":26},"name":"SelectNextSome","qualname":"::stream::stream::select_next_some::SelectNextSome","value":"SelectNextSome {  }","parent":null,"children":[{"krate":0,"index":9888}],"decl_id":null,"docs":" Future for the [`select_next_some`](super::StreamExt::select_next_some)\n method.\n","sig":null,"attributes":[{"value":"/ Future for the [`select_next_some`](super::StreamExt::select_next_some)","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/select_next_some.rs","byte_start":229910,"byte_end":229985,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ method.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/select_next_some.rs","byte_start":229986,"byte_end":229997,"line_start":9,"line_end":9,"column_start":1,"column_end":12}},{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/select_next_some.rs","byte_start":230015,"byte_end":230082,"line_start":11,"line_end":11,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":9898},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":231699,"byte_end":231707,"line_start":22,"line_end":22,"column_start":16,"column_end":24},"name":"Peekable","qualname":"::stream::stream::peek::Peekable","value":"Peekable {  }","parent":null,"children":[{"krate":0,"index":9900},{"krate":0,"index":9901}],"decl_id":null,"docs":" A `Stream` that implements a `peek` method.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":2620},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":232140,"byte_end":232144,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"name":"peek","qualname":"<Peekable<St>>::peek","value":"pub fn peek(Pin<&mut Self>) -> Peek<, St>","parent":null,"children":[],"decl_id":null,"docs":" Produces a future which retrieves a reference to the next item\n in the stream, or `None` if the underlying stream terminates.\n","sig":null,"attributes":[{"value":"/ Produces a future which retrieves a reference to the next item","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":231992,"byte_end":232058,"line_start":36,"line_end":36,"column_start":5,"column_end":71}},{"value":"/ in the stream, or `None` if the underlying stream terminates.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":232063,"byte_end":232128,"line_start":37,"line_end":37,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2621},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":232469,"byte_end":232478,"line_start":46,"line_end":46,"column_start":12,"column_end":21},"name":"poll_peek","qualname":"<Peekable<St>>::poll_peek","value":"pub fn poll_peek(Pin<&mut Self>, &mut Context) -> Poll<Option<&St::Item>>","parent":null,"children":[],"decl_id":null,"docs":" Peek retrieves a reference to the next item in the stream.","sig":null,"attributes":[{"value":"/ Peek retrieves a reference to the next item in the stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":232231,"byte_end":232293,"line_start":42,"line_end":42,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":232298,"byte_end":232301,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ This method polls the underlying stream and return either a reference","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":232306,"byte_end":232379,"line_start":44,"line_end":44,"column_start":5,"column_end":78}},{"value":"/ to the next item if the stream is ready or passes through any errors.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":232384,"byte_end":232457,"line_start":45,"line_end":45,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2622},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233793,"byte_end":233801,"line_start":86,"line_end":86,"column_start":12,"column_end":20},"name":"peek_mut","qualname":"<Peekable<St>>::peek_mut","value":"pub fn peek_mut(Pin<&mut Self>) -> PeekMut<, St>","parent":null,"children":[],"decl_id":null,"docs":" Produces a future which retrieves a mutable reference to the next item\n in the stream, or `None` if the underlying stream terminates.","sig":null,"attributes":[{"value":"/ Produces a future which retrieves a mutable reference to the next item","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":232914,"byte_end":232988,"line_start":60,"line_end":60,"column_start":5,"column_end":79}},{"value":"/ in the stream, or `None` if the underlying stream terminates.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":232993,"byte_end":233058,"line_start":61,"line_end":61,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233063,"byte_end":233066,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233071,"byte_end":233085,"line_start":63,"line_end":63,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233090,"byte_end":233093,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233098,"byte_end":233105,"line_start":65,"line_end":65,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233110,"byte_end":233151,"line_start":66,"line_end":66,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233156,"byte_end":233199,"line_start":67,"line_end":67,"column_start":5,"column_end":48}},{"value":"/ use futures::pin_mut;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233204,"byte_end":233229,"line_start":68,"line_end":68,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233234,"byte_end":233237,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(vec![1, 2, 3]).peekable();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233242,"byte_end":233298,"line_start":70,"line_end":70,"column_start":5,"column_end":61}},{"value":"/ pin_mut!(stream);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233303,"byte_end":233324,"line_start":71,"line_end":71,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233329,"byte_end":233332,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(stream.as_mut().peek_mut().await, Some(&mut 1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233337,"byte_end":233400,"line_start":73,"line_end":73,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(stream.as_mut().next().await, Some(1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233405,"byte_end":233459,"line_start":74,"line_end":74,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233464,"byte_end":233467,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ // Peek into the stream and modify the value which will be returned next","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233472,"byte_end":233548,"line_start":76,"line_end":76,"column_start":5,"column_end":81}},{"value":"/ if let Some(p) = stream.as_mut().peek_mut().await {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233553,"byte_end":233608,"line_start":77,"line_end":77,"column_start":5,"column_end":60}},{"value":"/     if *p == 2 {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233613,"byte_end":233633,"line_start":78,"line_end":78,"column_start":5,"column_end":25}},{"value":"/         *p = 5;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233638,"byte_end":233657,"line_start":79,"line_end":79,"column_start":5,"column_end":24}},{"value":"/     }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233662,"byte_end":233671,"line_start":80,"line_end":80,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233676,"byte_end":233681,"line_start":81,"line_end":81,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233686,"byte_end":233689,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(stream.collect::<Vec<_>>().await, vec![5, 3]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233694,"byte_end":233755,"line_start":83,"line_end":83,"column_start":5,"column_end":66}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233760,"byte_end":233769,"line_start":84,"line_end":84,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233774,"byte_end":233781,"line_start":85,"line_end":85,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2623},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233976,"byte_end":233989,"line_start":91,"line_end":91,"column_start":12,"column_end":25},"name":"poll_peek_mut","qualname":"<Peekable<St>>::poll_peek_mut","value":"pub fn poll_peek_mut(Pin<&mut Self>, &mut Context)\n-> Poll<Option<&mut St::Item>>","parent":null,"children":[],"decl_id":null,"docs":" Peek retrieves a mutable reference to the next item in the stream.\n","sig":null,"attributes":[{"value":"/ Peek retrieves a mutable reference to the next item in the stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":233894,"byte_end":233964,"line_start":90,"line_end":90,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2624},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235980,"byte_end":235987,"line_start":149,"line_end":149,"column_start":12,"column_end":19},"name":"next_if","qualname":"<Peekable<St>>::next_if","value":"pub fn next_if<F>(Pin<&mut Self>, F) -> NextIf<, St, F> where\nF: FnOnce(&St::Item) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Creates a future which will consume and return the next value of this\n stream if a condition is true.","sig":null,"attributes":[{"value":"/ Creates a future which will consume and return the next value of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":234452,"byte_end":234525,"line_start":108,"line_end":108,"column_start":5,"column_end":78}},{"value":"/ stream if a condition is true.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":234530,"byte_end":234564,"line_start":109,"line_end":109,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":234569,"byte_end":234572,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ If `func` returns `true` for the next value of this stream, consume and","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":234577,"byte_end":234652,"line_start":111,"line_end":111,"column_start":5,"column_end":80}},{"value":"/ return it. Otherwise, return `None`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":234657,"byte_end":234697,"line_start":112,"line_end":112,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":234702,"byte_end":234705,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":234710,"byte_end":234724,"line_start":114,"line_end":114,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":234729,"byte_end":234732,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ Consume a number if it's equal to 0.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":234737,"byte_end":234777,"line_start":116,"line_end":116,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":234782,"byte_end":234785,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":234790,"byte_end":234797,"line_start":118,"line_end":118,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":234802,"byte_end":234843,"line_start":119,"line_end":119,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":234848,"byte_end":234891,"line_start":120,"line_end":120,"column_start":5,"column_end":48}},{"value":"/ use futures::pin_mut;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":234896,"byte_end":234921,"line_start":121,"line_end":121,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":234926,"byte_end":234929,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(0..5).peekable();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":234934,"byte_end":234981,"line_start":123,"line_end":123,"column_start":5,"column_end":52}},{"value":"/ pin_mut!(stream);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":234986,"byte_end":235007,"line_start":124,"line_end":124,"column_start":5,"column_end":26}},{"value":"/ // The first item of the stream is 0; consume it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235012,"byte_end":235065,"line_start":125,"line_end":125,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(stream.as_mut().next_if(|&x| x == 0).await, Some(0));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235070,"byte_end":235138,"line_start":126,"line_end":126,"column_start":5,"column_end":73}},{"value":"/ // The next item returned is now 1, so `consume` will return `false`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235143,"byte_end":235216,"line_start":127,"line_end":127,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(stream.as_mut().next_if(|&x| x == 0).await, None);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235221,"byte_end":235286,"line_start":128,"line_end":128,"column_start":5,"column_end":70}},{"value":"/ // `next_if` saves the value of the next item if it was not equal to `expected`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235291,"byte_end":235375,"line_start":129,"line_end":129,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(stream.next().await, Some(1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235380,"byte_end":235425,"line_start":130,"line_end":130,"column_start":5,"column_end":50}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235430,"byte_end":235439,"line_start":131,"line_end":131,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235444,"byte_end":235451,"line_start":132,"line_end":132,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235456,"byte_end":235459,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ Consume any number less than 10.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235464,"byte_end":235500,"line_start":134,"line_end":134,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235505,"byte_end":235508,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235513,"byte_end":235520,"line_start":136,"line_end":136,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235525,"byte_end":235566,"line_start":137,"line_end":137,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235571,"byte_end":235614,"line_start":138,"line_end":138,"column_start":5,"column_end":48}},{"value":"/ use futures::pin_mut;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235619,"byte_end":235644,"line_start":139,"line_end":139,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235649,"byte_end":235652,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(1..20).peekable();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235657,"byte_end":235705,"line_start":141,"line_end":141,"column_start":5,"column_end":53}},{"value":"/ pin_mut!(stream);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235710,"byte_end":235731,"line_start":142,"line_end":142,"column_start":5,"column_end":26}},{"value":"/ // Consume all numbers less than 10","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235736,"byte_end":235775,"line_start":143,"line_end":143,"column_start":5,"column_end":44}},{"value":"/ while stream.as_mut().next_if(|&x| x < 10).await.is_some() {}","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235780,"byte_end":235845,"line_start":144,"line_end":144,"column_start":5,"column_end":70}},{"value":"/ // The next value returned will be 10","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235850,"byte_end":235891,"line_start":145,"line_end":145,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(stream.next().await, Some(10));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235896,"byte_end":235942,"line_start":146,"line_end":146,"column_start":5,"column_end":51}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235947,"byte_end":235956,"line_start":147,"line_end":147,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":235961,"byte_end":235968,"line_start":148,"line_end":148,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2626},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":237011,"byte_end":237021,"line_start":178,"line_end":178,"column_start":12,"column_end":22},"name":"next_if_eq","qualname":"<Peekable<St>>::next_if_eq","value":"pub fn next_if_eq<'a, T>(Pin<&'a mut Self>, &'a T) -> NextIfEq where\nT: ?Sized, St::Item: PartialEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a future which will consume and return the next item if it is\n equal to `expected`.","sig":null,"attributes":[{"value":"/ Creates a future which will consume and return the next item if it is","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236153,"byte_end":236226,"line_start":156,"line_end":156,"column_start":5,"column_end":78}},{"value":"/ equal to `expected`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236231,"byte_end":236255,"line_start":157,"line_end":157,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236260,"byte_end":236263,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236268,"byte_end":236281,"line_start":159,"line_end":159,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236286,"byte_end":236289,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ Consume a number if it's equal to 0.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236294,"byte_end":236334,"line_start":161,"line_end":161,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236339,"byte_end":236342,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236347,"byte_end":236354,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236359,"byte_end":236400,"line_start":164,"line_end":164,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236405,"byte_end":236448,"line_start":165,"line_end":165,"column_start":5,"column_end":48}},{"value":"/ use futures::pin_mut;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236453,"byte_end":236478,"line_start":166,"line_end":166,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236483,"byte_end":236486,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(0..5).peekable();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236491,"byte_end":236538,"line_start":168,"line_end":168,"column_start":5,"column_end":52}},{"value":"/ pin_mut!(stream);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236543,"byte_end":236564,"line_start":169,"line_end":169,"column_start":5,"column_end":26}},{"value":"/ // The first item of the stream is 0; consume it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236569,"byte_end":236622,"line_start":170,"line_end":170,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(stream.as_mut().next_if_eq(&0).await, Some(0));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236627,"byte_end":236689,"line_start":171,"line_end":171,"column_start":5,"column_end":67}},{"value":"/ // The next item returned is now 1, so `consume` will return `false`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236694,"byte_end":236767,"line_start":172,"line_end":172,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(stream.as_mut().next_if_eq(&0).await, None);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236772,"byte_end":236831,"line_start":173,"line_end":173,"column_start":5,"column_end":64}},{"value":"/ // `next_if_eq` saves the value of the next item if it was not equal to `expected`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236836,"byte_end":236923,"line_start":174,"line_end":174,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(stream.next().await, Some(1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236928,"byte_end":236973,"line_start":175,"line_end":175,"column_start":5,"column_end":50}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236978,"byte_end":236987,"line_start":176,"line_end":176,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":236992,"byte_end":236999,"line_start":177,"line_end":177,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":9937},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":238539,"byte_end":238543,"line_start":232,"line_end":232,"column_start":16,"column_end":20},"name":"Peek","qualname":"::stream::stream::peek::Peek","value":"Peek {  }","parent":null,"children":[{"krate":0,"index":9940}],"decl_id":null,"docs":" Future for the [`Peekable::peek`](self::Peekable::peek) method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9978},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":239601,"byte_end":239608,"line_start":274,"line_end":274,"column_start":16,"column_end":23},"name":"PeekMut","qualname":"::stream::stream::peek::PeekMut","value":"PeekMut {  }","parent":null,"children":[{"krate":0,"index":9981}],"decl_id":null,"docs":" Future for the [`Peekable::peek_mut`](self::Peekable::peek_mut) method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":10019},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":240691,"byte_end":240697,"line_start":316,"line_end":316,"column_start":16,"column_end":22},"name":"NextIf","qualname":"::stream::stream::peek::NextIf","value":"NextIf {  }","parent":null,"children":[{"krate":0,"index":10023}],"decl_id":null,"docs":" Future for the [`Peekable::next_if`](self::Peekable::next_if) method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":10068},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":242561,"byte_end":242569,"line_start":375,"line_end":375,"column_start":16,"column_end":24},"name":"NextIfEq","qualname":"::stream::stream::peek::NextIfEq","value":"NextIfEq {  }","parent":null,"children":[{"krate":0,"index":10072}],"decl_id":null,"docs":" Future for the [`Peekable::next_if_eq`](self::Peekable::next_if_eq) method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":10122},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/skip.rs","byte_start":244186,"byte_end":244190,"line_start":13,"line_end":13,"column_start":16,"column_end":20},"name":"Skip","qualname":"::stream::stream::skip::Skip","value":"Skip {  }","parent":null,"children":[{"krate":0,"index":10124},{"krate":0,"index":10125}],"decl_id":null,"docs":" Stream for the [`skip`](super::StreamExt::skip) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":10161},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/skip_while.rs","byte_start":245953,"byte_end":245962,"line_start":14,"line_end":14,"column_start":16,"column_end":25},"name":"SkipWhile","qualname":"::stream::stream::skip_while::SkipWhile","value":"SkipWhile {  }","parent":null,"children":[{"krate":0,"index":10165},{"krate":0,"index":10166},{"krate":0,"index":10167},{"krate":0,"index":10168},{"krate":0,"index":10169}],"decl_id":null,"docs":" Stream for the [`skip_while`](super::StreamExt::skip_while) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":10235},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take.rs","byte_start":249466,"byte_end":249470,"line_start":14,"line_end":14,"column_start":16,"column_end":20},"name":"Take","qualname":"::stream::stream::take::Take","value":"Take {  }","parent":null,"children":[{"krate":0,"index":10237},{"krate":0,"index":10238}],"decl_id":null,"docs":" Stream for the [`take`](super::StreamExt::take) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":10274},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_while.rs","byte_start":251506,"byte_end":251515,"line_start":14,"line_end":14,"column_start":16,"column_end":25},"name":"TakeWhile","qualname":"::stream::stream::take_while::TakeWhile","value":"TakeWhile {  }","parent":null,"children":[{"krate":0,"index":10278},{"krate":0,"index":10279},{"krate":0,"index":10280},{"krate":0,"index":10281},{"krate":0,"index":10282}],"decl_id":null,"docs":" Stream for the [`take_while`](super::StreamExt::take_while) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":10343},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":254995,"byte_end":255004,"line_start":16,"line_end":16,"column_start":16,"column_end":25},"name":"TakeUntil","qualname":"::stream::stream::take_until::TakeUntil","value":"TakeUntil {  }","parent":null,"children":[{"krate":0,"index":10346},{"krate":0,"index":10347},{"krate":0,"index":10348},{"krate":0,"index":10349}],"decl_id":null,"docs":" Stream for the [`take_until`](super::StreamExt::take_until) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":2944},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":256288,"byte_end":256299,"line_start":56,"line_end":56,"column_start":12,"column_end":23},"name":"take_future","qualname":"<TakeUntil<St, Fut>>::take_future","value":"pub fn take_future(&mut Self) -> Option<Fut>","parent":null,"children":[],"decl_id":null,"docs":" Extract the stopping future out of the combinator.\n The future is returned only if it isn't resolved yet, ie. if the stream isn't stopped yet.\n Taking out the future means the combinator will be yielding\n elements from the wrapped stream without ever stopping it.\n","sig":null,"attributes":[{"value":"/ Extract the stopping future out of the combinator.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":255988,"byte_end":256042,"line_start":52,"line_end":52,"column_start":5,"column_end":59}},{"value":"/ The future is returned only if it isn't resolved yet, ie. if the stream isn't stopped yet.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":256047,"byte_end":256141,"line_start":53,"line_end":53,"column_start":5,"column_end":99}},{"value":"/ Taking out the future means the combinator will be yielding","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":256146,"byte_end":256209,"line_start":54,"line_end":54,"column_start":5,"column_end":68}},{"value":"/ elements from the wrapped stream without ever stopping it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":256214,"byte_end":256276,"line_start":55,"line_end":55,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2945},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257583,"byte_end":257594,"line_start":100,"line_end":100,"column_start":12,"column_end":23},"name":"take_result","qualname":"<TakeUntil<St, Fut>>::take_result","value":"pub fn take_result(&mut Self) -> Option<Fut::Output>","parent":null,"children":[],"decl_id":null,"docs":" Once the stopping future is resolved, this method can be used\n to extract the value returned by the stopping future.","sig":null,"attributes":[{"value":"/ Once the stopping future is resolved, this method can be used","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":256436,"byte_end":256501,"line_start":64,"line_end":64,"column_start":5,"column_end":70}},{"value":"/ to extract the value returned by the stopping future.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":256506,"byte_end":256563,"line_start":65,"line_end":65,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":256568,"byte_end":256571,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ This may be used to retrieve arbitrary data from the stopping","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":256576,"byte_end":256641,"line_start":67,"line_end":67,"column_start":5,"column_end":70}},{"value":"/ future, for example a reason why the stream was stopped.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":256646,"byte_end":256706,"line_start":68,"line_end":68,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":256711,"byte_end":256714,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` if the future isn't resolved yet,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":256719,"byte_end":256787,"line_start":70,"line_end":70,"column_start":5,"column_end":73}},{"value":"/ or if the result was already taken out.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":256792,"byte_end":256835,"line_start":71,"line_end":71,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":256840,"byte_end":256843,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":256848,"byte_end":256862,"line_start":73,"line_end":73,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":256867,"byte_end":256870,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":256875,"byte_end":256882,"line_start":75,"line_end":75,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":256887,"byte_end":256928,"line_start":76,"line_end":76,"column_start":5,"column_end":46}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":256933,"byte_end":256957,"line_start":77,"line_end":77,"column_start":5,"column_end":29}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":256962,"byte_end":257005,"line_start":78,"line_end":78,"column_start":5,"column_end":48}},{"value":"/ use futures::task::Poll;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257010,"byte_end":257038,"line_start":79,"line_end":79,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257043,"byte_end":257046,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(1..=10);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257051,"byte_end":257089,"line_start":81,"line_end":81,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257094,"byte_end":257097,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ let mut i = 0;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257102,"byte_end":257120,"line_start":83,"line_end":83,"column_start":5,"column_end":23}},{"value":"/ let stop_fut = future::poll_fn(|_cx| {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257125,"byte_end":257167,"line_start":84,"line_end":84,"column_start":5,"column_end":47}},{"value":"/     i += 1;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257172,"byte_end":257187,"line_start":85,"line_end":85,"column_start":5,"column_end":20}},{"value":"/     if i <= 5 {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257192,"byte_end":257211,"line_start":86,"line_end":86,"column_start":5,"column_end":24}},{"value":"/         Poll::Pending","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257216,"byte_end":257241,"line_start":87,"line_end":87,"column_start":5,"column_end":30}},{"value":"/     } else {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257246,"byte_end":257262,"line_start":88,"line_end":88,"column_start":5,"column_end":21}},{"value":"/         Poll::Ready(\"reason\")","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257267,"byte_end":257300,"line_start":89,"line_end":89,"column_start":5,"column_end":38}},{"value":"/     }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257305,"byte_end":257314,"line_start":90,"line_end":90,"column_start":5,"column_end":14}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257319,"byte_end":257326,"line_start":91,"line_end":91,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257331,"byte_end":257334,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ let mut stream = stream.take_until(stop_fut);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257339,"byte_end":257388,"line_start":93,"line_end":93,"column_start":5,"column_end":54}},{"value":"/ let _ = stream.by_ref().collect::<Vec<_>>().await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257393,"byte_end":257447,"line_start":94,"line_end":94,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257452,"byte_end":257455,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ let result = stream.take_result().unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257460,"byte_end":257507,"line_start":96,"line_end":96,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(result, \"reason\");","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257512,"byte_end":257545,"line_start":97,"line_end":97,"column_start":5,"column_end":38}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257550,"byte_end":257559,"line_start":98,"line_end":98,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257564,"byte_end":257571,"line_start":99,"line_end":99,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2946},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257770,"byte_end":257780,"line_start":106,"line_end":106,"column_start":12,"column_end":22},"name":"is_stopped","qualname":"<TakeUntil<St, Fut>>::is_stopped","value":"pub fn is_stopped(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether the stream was stopped yet by the stopping future\n being resolved.\n","sig":null,"attributes":[{"value":"/ Whether the stream was stopped yet by the stopping future","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257673,"byte_end":257734,"line_start":104,"line_end":104,"column_start":5,"column_end":66}},{"value":"/ being resolved.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257739,"byte_end":257758,"line_start":105,"line_end":105,"column_start":5,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":10400},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/then.rs","byte_start":259712,"byte_end":259716,"line_start":14,"line_end":14,"column_start":16,"column_end":20},"name":"Then","qualname":"::stream::stream::then::Then","value":"Then {  }","parent":null,"children":[{"krate":0,"index":10404},{"krate":0,"index":10405},{"krate":0,"index":10406}],"decl_id":null,"docs":" Stream for the [`then`](super::StreamExt::then) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":10468},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":262256,"byte_end":262259,"line_start":12,"line_end":12,"column_start":16,"column_end":19},"name":"Zip","qualname":"::stream::stream::zip::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":10471},{"krate":0,"index":10472},{"krate":0,"index":10473},{"krate":0,"index":10474}],"decl_id":null,"docs":" Stream for the [`zip`](super::StreamExt::zip) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3050},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":262777,"byte_end":262784,"line_start":29,"line_end":29,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Zip<St1, St2>>::get_ref","value":"pub fn get_ref(&Self) -> (&St1, &St2)","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying streams that this combinator is\n pulling from.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying streams that this combinator is","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":262669,"byte_end":262743,"line_start":27,"line_end":27,"column_start":5,"column_end":79}},{"value":"/ pulling from.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":262748,"byte_end":262765,"line_start":28,"line_end":28,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":3051},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":263140,"byte_end":263147,"line_start":38,"line_end":38,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Zip<St1, St2>>::get_mut","value":"pub fn get_mut(&mut Self) -> (&mut St1, &mut St2)","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying streams that this\n combinator is pulling from.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying streams that this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":262878,"byte_end":262946,"line_start":33,"line_end":33,"column_start":5,"column_end":73}},{"value":"/ combinator is pulling from.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":262951,"byte_end":262982,"line_start":34,"line_end":34,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":262987,"byte_end":262990,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ Note that care must be taken to avoid tampering with the state of the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":262995,"byte_end":263068,"line_start":36,"line_end":36,"column_start":5,"column_end":78}},{"value":"/ stream which may otherwise confuse this combinator.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":263073,"byte_end":263128,"line_start":37,"line_end":37,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3052},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":263522,"byte_end":263533,"line_start":47,"line_end":47,"column_start":12,"column_end":23},"name":"get_pin_mut","qualname":"<Zip<St1, St2>>::get_pin_mut","value":"pub fn get_pin_mut(Pin<&mut Self>) -> (Pin<&mut St1>, Pin<&mut St2>)","parent":null,"children":[],"decl_id":null,"docs":" Acquires a pinned mutable reference to the underlying streams that this\n combinator is pulling from.","sig":null,"attributes":[{"value":"/ Acquires a pinned mutable reference to the underlying streams that this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":263253,"byte_end":263328,"line_start":42,"line_end":42,"column_start":5,"column_end":80}},{"value":"/ combinator is pulling from.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":263333,"byte_end":263364,"line_start":43,"line_end":43,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":263369,"byte_end":263372,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ Note that care must be taken to avoid tampering with the state of the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":263377,"byte_end":263450,"line_start":45,"line_end":45,"column_start":5,"column_end":78}},{"value":"/ stream which may otherwise confuse this combinator.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":263455,"byte_end":263510,"line_start":46,"line_end":46,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3053},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":263939,"byte_end":263949,"line_start":56,"line_end":56,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Zip<St1, St2>>::into_inner","value":"pub fn into_inner(Self) -> (St1, St2)","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying streams.","sig":null,"attributes":[{"value":"/ Consumes this combinator, returning the underlying streams.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":263703,"byte_end":263766,"line_start":52,"line_end":52,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":263771,"byte_end":263774,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ Note that this may discard intermediate state of this combinator, so","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":263779,"byte_end":263851,"line_start":54,"line_end":54,"column_start":5,"column_end":77}},{"value":"/ care should be taken to avoid losing resources when this is called.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":263856,"byte_end":263927,"line_start":55,"line_end":55,"column_start":5,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":10523},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/chunks.rs","byte_start":266778,"byte_end":266784,"line_start":16,"line_end":16,"column_start":16,"column_end":22},"name":"Chunks","qualname":"::stream::stream::chunks::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":10525},{"krate":0,"index":10526},{"krate":0,"index":10527}],"decl_id":null,"docs":" Stream for the [`chunks`](super::StreamExt::chunks) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":10571},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/ready_chunks.rs","byte_start":269887,"byte_end":269898,"line_start":15,"line_end":15,"column_start":16,"column_end":27},"name":"ReadyChunks","qualname":"::stream::stream::ready_chunks::ReadyChunks","value":"ReadyChunks {  }","parent":null,"children":[{"krate":0,"index":10573},{"krate":0,"index":10574},{"krate":0,"index":10575}],"decl_id":null,"docs":" Stream for the [`ready_chunks`](super::StreamExt::ready_chunks) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":10614},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/scan.rs","byte_start":273444,"byte_end":273448,"line_start":19,"line_end":19,"column_start":16,"column_end":20},"name":"Scan","qualname":"::stream::stream::scan::Scan","value":"Scan {  }","parent":null,"children":[{"krate":0,"index":10619},{"krate":0,"index":10620},{"krate":0,"index":10621}],"decl_id":null,"docs":" Stream for the [`scan`](super::StreamExt::scan) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":10683},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/buffer_unordered.rs","byte_start":276872,"byte_end":276887,"line_start":15,"line_end":15,"column_start":16,"column_end":31},"name":"BufferUnordered","qualname":"::stream::stream::buffer_unordered::BufferUnordered","value":"BufferUnordered {  }","parent":null,"children":[{"krate":0,"index":10685},{"krate":0,"index":10686},{"krate":0,"index":10687}],"decl_id":null,"docs":" Stream for the [`buffer_unordered`](super::StreamExt::buffer_unordered)\n method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":10728},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/buffered.rs","byte_start":280198,"byte_end":280206,"line_start":15,"line_end":15,"column_start":16,"column_end":24},"name":"Buffered","qualname":"::stream::stream::buffered::Buffered","value":"Buffered {  }","parent":null,"children":[{"krate":0,"index":10730},{"krate":0,"index":10731},{"krate":0,"index":10732}],"decl_id":null,"docs":" Stream for the [`buffered`](super::StreamExt::buffered) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":10773},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/for_each_concurrent.rs","byte_start":283201,"byte_end":283218,"line_start":14,"line_end":14,"column_start":16,"column_end":33},"name":"ForEachConcurrent","qualname":"::stream::stream::for_each_concurrent::ForEachConcurrent","value":"ForEachConcurrent {  }","parent":null,"children":[{"krate":0,"index":10777},{"krate":0,"index":10778},{"krate":0,"index":10779},{"krate":0,"index":10780}],"decl_id":null,"docs":" Future for the [`for_each_concurrent`](super::StreamExt::for_each_concurrent)\n method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Trait","id":{"krate":0,"index":3401},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":145795,"byte_end":145804,"line_start":230,"line_end":230,"column_start":11,"column_end":20},"name":"StreamExt","qualname":"::stream::stream::StreamExt","value":"StreamExt: Stream","parent":null,"children":[{"krate":0,"index":3402},{"krate":0,"index":3403},{"krate":0,"index":3404},{"krate":0,"index":3407},{"krate":0,"index":3408},{"krate":0,"index":3411},{"krate":0,"index":3415},{"krate":0,"index":3418},{"krate":0,"index":3420},{"krate":0,"index":3425},{"krate":0,"index":3426},{"krate":0,"index":3427},{"krate":0,"index":3428},{"krate":0,"index":3432},{"krate":0,"index":3435},{"krate":0,"index":3438},{"krate":0,"index":3439},{"krate":0,"index":3442},{"krate":0,"index":3447},{"krate":0,"index":3450},{"krate":0,"index":3453},{"krate":0,"index":3455},{"krate":0,"index":3458},{"krate":0,"index":3462},{"krate":0,"index":3463},{"krate":0,"index":3464},{"krate":0,"index":3465},{"krate":0,"index":3466},{"krate":0,"index":3468},{"krate":0,"index":3470},{"krate":0,"index":3471},{"krate":0,"index":3472},{"krate":0,"index":3474},{"krate":0,"index":3476},{"krate":0,"index":3477},{"krate":0,"index":3478},{"krate":0,"index":3479},{"krate":0,"index":3481},{"krate":0,"index":3483},{"krate":0,"index":3485},{"krate":0,"index":3486}],"decl_id":null,"docs":" An extension trait for `Stream`s that provides a variety of convenient\n combinator functions.\n","sig":null,"attributes":[{"value":"/ An extension trait for `Stream`s that provides a variety of convenient","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":145684,"byte_end":145758,"line_start":228,"line_end":228,"column_start":1,"column_end":75}},{"value":"/ combinator functions.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":145759,"byte_end":145784,"line_start":229,"line_end":229,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":3402},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146714,"byte_end":146718,"line_start":254,"line_end":254,"column_start":8,"column_end":12},"name":"next","qualname":"::stream::stream::StreamExt::next","value":"pub fn next(&mut Self) -> Next<, Self> where Self: Unpin","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Creates a future that resolves to the next item in the stream.","sig":null,"attributes":[{"value":"/ Creates a future that resolves to the next item in the stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":145819,"byte_end":145885,"line_start":231,"line_end":231,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":145890,"byte_end":145893,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ Note that because `next` doesn't take ownership over the stream,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":145898,"byte_end":145966,"line_start":233,"line_end":233,"column_start":5,"column_end":73}},{"value":"/ the [`Stream`] type must be [`Unpin`]. If you want to use `next` with a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":145971,"byte_end":146046,"line_start":234,"line_end":234,"column_start":5,"column_end":80}},{"value":"/ [`!Unpin`](Unpin) stream, you'll first have to pin the stream. This can","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146051,"byte_end":146126,"line_start":235,"line_end":235,"column_start":5,"column_end":80}},{"value":"/ be done by boxing the stream using [`Box::pin`] or","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146131,"byte_end":146185,"line_start":236,"line_end":236,"column_start":5,"column_end":59}},{"value":"/ pinning it to the stack using the `pin_mut!` macro from the `pin_utils`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146190,"byte_end":146265,"line_start":237,"line_end":237,"column_start":5,"column_end":80}},{"value":"/ crate.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146270,"byte_end":146280,"line_start":238,"line_end":238,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146285,"byte_end":146288,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146293,"byte_end":146307,"line_start":240,"line_end":240,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146312,"byte_end":146315,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146320,"byte_end":146327,"line_start":242,"line_end":242,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146332,"byte_end":146373,"line_start":243,"line_end":243,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146378,"byte_end":146421,"line_start":244,"line_end":244,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146426,"byte_end":146429,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ let mut stream = stream::iter(1..=3);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146434,"byte_end":146475,"line_start":246,"line_end":246,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146480,"byte_end":146483,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(stream.next().await, Some(1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146488,"byte_end":146533,"line_start":248,"line_end":248,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(stream.next().await, Some(2));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146538,"byte_end":146583,"line_start":249,"line_end":249,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(stream.next().await, Some(3));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146588,"byte_end":146633,"line_start":250,"line_end":250,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(stream.next().await, None);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146638,"byte_end":146680,"line_start":251,"line_end":251,"column_start":5,"column_end":47}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146685,"byte_end":146694,"line_start":252,"line_end":252,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146699,"byte_end":146706,"line_start":253,"line_end":253,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3403},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147957,"byte_end":147968,"line_start":289,"line_end":289,"column_start":8,"column_end":19},"name":"into_future","qualname":"::stream::stream::StreamExt::into_future","value":"pub fn into_future(Self) -> StreamFuture<Self> where Self: Sized + Unpin","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Converts this stream into a future of `(next_item, tail_of_stream)`.\n If the stream terminates, then the next item is [`None`].","sig":null,"attributes":[{"value":"/ Converts this stream into a future of `(next_item, tail_of_stream)`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146860,"byte_end":146932,"line_start":261,"line_end":261,"column_start":5,"column_end":77}},{"value":"/ If the stream terminates, then the next item is [`None`].","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":146937,"byte_end":146998,"line_start":262,"line_end":262,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147003,"byte_end":147006,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ The returned future can be used to compose streams and futures together","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147011,"byte_end":147086,"line_start":264,"line_end":264,"column_start":5,"column_end":80}},{"value":"/ by placing everything into the \"world of futures\".","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147091,"byte_end":147145,"line_start":265,"line_end":265,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147150,"byte_end":147153,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ Note that because `into_future` moves the stream, the [`Stream`] type","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147158,"byte_end":147231,"line_start":267,"line_end":267,"column_start":5,"column_end":78}},{"value":"/ must be [`Unpin`]. If you want to use `into_future` with a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147236,"byte_end":147298,"line_start":268,"line_end":268,"column_start":5,"column_end":67}},{"value":"/ [`!Unpin`](Unpin) stream, you'll first have to pin the stream. This can","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147303,"byte_end":147378,"line_start":269,"line_end":269,"column_start":5,"column_end":80}},{"value":"/ be done by boxing the stream using [`Box::pin`] or","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147383,"byte_end":147437,"line_start":270,"line_end":270,"column_start":5,"column_end":59}},{"value":"/ pinning it to the stack using the `pin_mut!` macro from the `pin_utils`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147442,"byte_end":147517,"line_start":271,"line_end":271,"column_start":5,"column_end":80}},{"value":"/ crate.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147522,"byte_end":147532,"line_start":272,"line_end":272,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147537,"byte_end":147540,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147545,"byte_end":147559,"line_start":274,"line_end":274,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147564,"byte_end":147567,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147572,"byte_end":147579,"line_start":276,"line_end":276,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147584,"byte_end":147625,"line_start":277,"line_end":277,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147630,"byte_end":147673,"line_start":278,"line_end":278,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147678,"byte_end":147681,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(1..=3);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147686,"byte_end":147723,"line_start":280,"line_end":280,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147728,"byte_end":147731,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ let (item, stream) = stream.into_future().await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147736,"byte_end":147788,"line_start":282,"line_end":282,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(Some(1), item);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147793,"byte_end":147823,"line_start":283,"line_end":283,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147828,"byte_end":147831,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ let (item, stream) = stream.into_future().await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147836,"byte_end":147888,"line_start":285,"line_end":285,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(Some(2), item);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147893,"byte_end":147923,"line_start":286,"line_end":286,"column_start":5,"column_end":35}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147928,"byte_end":147937,"line_start":287,"line_end":287,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":147942,"byte_end":147949,"line_start":288,"line_end":288,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3404},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148969,"byte_end":148972,"line_start":319,"line_end":319,"column_start":8,"column_end":11},"name":"map","qualname":"::stream::stream::StreamExt::map","value":"pub fn map<T, F>(Self, F) -> Map<Self, F> where F: FnMut(Self::Item) -> T,\nSelf: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Maps this stream's items to a different type, returning a new stream of\n the resulting type.","sig":null,"attributes":[{"value":"/ Maps this stream's items to a different type, returning a new stream of","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148133,"byte_end":148208,"line_start":296,"line_end":296,"column_start":5,"column_end":80}},{"value":"/ the resulting type.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148213,"byte_end":148236,"line_start":297,"line_end":297,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148241,"byte_end":148244,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ The provided closure is executed over all elements of this stream as","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148249,"byte_end":148321,"line_start":299,"line_end":299,"column_start":5,"column_end":77}},{"value":"/ they are made available. It is executed inline with calls to","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148326,"byte_end":148390,"line_start":300,"line_end":300,"column_start":5,"column_end":69}},{"value":"/ [`poll_next`](Stream::poll_next).","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148395,"byte_end":148432,"line_start":301,"line_end":301,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148437,"byte_end":148440,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ Note that this function consumes the stream passed into it and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148445,"byte_end":148521,"line_start":303,"line_end":303,"column_start":5,"column_end":81}},{"value":"/ wrapped version of it, similar to the existing `map` methods in the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148526,"byte_end":148597,"line_start":304,"line_end":304,"column_start":5,"column_end":76}},{"value":"/ standard library.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148602,"byte_end":148623,"line_start":305,"line_end":305,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148628,"byte_end":148631,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148636,"byte_end":148650,"line_start":307,"line_end":307,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148655,"byte_end":148658,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148663,"byte_end":148670,"line_start":309,"line_end":309,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148675,"byte_end":148716,"line_start":310,"line_end":310,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148721,"byte_end":148764,"line_start":311,"line_end":311,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148769,"byte_end":148772,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(1..=3);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148777,"byte_end":148814,"line_start":313,"line_end":313,"column_start":5,"column_end":42}},{"value":"/ let stream = stream.map(|x| x + 3);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148819,"byte_end":148858,"line_start":314,"line_end":314,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148863,"byte_end":148866,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec![4, 5, 6], stream.collect::<Vec<_>>().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148871,"byte_end":148935,"line_start":316,"line_end":316,"column_start":5,"column_end":69}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148940,"byte_end":148949,"line_start":317,"line_end":317,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":148954,"byte_end":148961,"line_start":318,"line_end":318,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3407},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150532,"byte_end":150541,"line_start":365,"line_end":365,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::stream::stream::StreamExt::enumerate","value":"pub fn enumerate(Self) -> Enumerate<Self> where Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Creates a stream which gives the current iteration count as well as\n the next value.","sig":null,"attributes":[{"value":"/ Creates a stream which gives the current iteration count as well as","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":149139,"byte_end":149210,"line_start":327,"line_end":327,"column_start":5,"column_end":76}},{"value":"/ the next value.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":149215,"byte_end":149234,"line_start":328,"line_end":328,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":149239,"byte_end":149242,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ The stream returned yields pairs `(i, val)`, where `i` is the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":149247,"byte_end":149312,"line_start":330,"line_end":330,"column_start":5,"column_end":70}},{"value":"/ current index of iteration and `val` is the value returned by the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":149317,"byte_end":149386,"line_start":331,"line_end":331,"column_start":5,"column_end":74}},{"value":"/ stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":149391,"byte_end":149402,"line_start":332,"line_end":332,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":149407,"byte_end":149410,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ `enumerate()` keeps its count as a [`usize`]. If you want to count by a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":149415,"byte_end":149490,"line_start":334,"line_end":334,"column_start":5,"column_end":80}},{"value":"/ different sized integer, the [`zip`](StreamExt::zip) function provides similar","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":149495,"byte_end":149577,"line_start":335,"line_end":335,"column_start":5,"column_end":87}},{"value":"/ functionality.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":149582,"byte_end":149600,"line_start":336,"line_end":336,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":149605,"byte_end":149608,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ # Overflow Behavior","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":149613,"byte_end":149636,"line_start":338,"line_end":338,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":149641,"byte_end":149644,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ The method does no guarding against overflows, so enumerating more than","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":149649,"byte_end":149724,"line_start":340,"line_end":340,"column_start":5,"column_end":80}},{"value":"/ [`prim@usize::max_value()`] elements either produces the wrong result or panics. If","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":149729,"byte_end":149816,"line_start":341,"line_end":341,"column_start":5,"column_end":92}},{"value":"/ debug assertions are enabled, a panic is guaranteed.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":149821,"byte_end":149877,"line_start":342,"line_end":342,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":149882,"byte_end":149885,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":149890,"byte_end":149902,"line_start":344,"line_end":344,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":149907,"byte_end":149910,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ The returned stream might panic if the to-be-returned index would","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":149915,"byte_end":149984,"line_start":346,"line_end":346,"column_start":5,"column_end":74}},{"value":"/ overflow a [`usize`].","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":149989,"byte_end":150014,"line_start":347,"line_end":347,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150019,"byte_end":150022,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150027,"byte_end":150041,"line_start":349,"line_end":349,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150046,"byte_end":150049,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150054,"byte_end":150061,"line_start":351,"line_end":351,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150066,"byte_end":150107,"line_start":352,"line_end":352,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150112,"byte_end":150155,"line_start":353,"line_end":353,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150160,"byte_end":150163,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(vec!['a', 'b', 'c']);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150168,"byte_end":150219,"line_start":355,"line_end":355,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150224,"byte_end":150227,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ let mut stream = stream.enumerate();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150232,"byte_end":150272,"line_start":357,"line_end":357,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150277,"byte_end":150280,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(stream.next().await, Some((0, 'a')));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150285,"byte_end":150337,"line_start":359,"line_end":359,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(stream.next().await, Some((1, 'b')));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150342,"byte_end":150394,"line_start":360,"line_end":360,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(stream.next().await, Some((2, 'c')));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150399,"byte_end":150451,"line_start":361,"line_end":361,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(stream.next().await, None);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150456,"byte_end":150498,"line_start":362,"line_end":362,"column_start":5,"column_end":47}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150503,"byte_end":150512,"line_start":363,"line_end":363,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150517,"byte_end":150524,"line_start":364,"line_end":364,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3408},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":151770,"byte_end":151776,"line_start":398,"line_end":398,"column_start":8,"column_end":14},"name":"filter","qualname":"::stream::stream::StreamExt::filter","value":"pub fn filter<Fut, F>(Self, F) -> Filter<Self, Fut, F> where\nF: FnMut(&Self::Item) -> Fut, Fut: Future<Output = bool>, Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Filters the values produced by this stream according to the provided\n asynchronous predicate.","sig":null,"attributes":[{"value":"/ Filters the values produced by this stream according to the provided","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150685,"byte_end":150757,"line_start":372,"line_end":372,"column_start":5,"column_end":77}},{"value":"/ asynchronous predicate.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150762,"byte_end":150789,"line_start":373,"line_end":373,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150794,"byte_end":150797,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ As values of this stream are made available, the provided predicate `f`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150802,"byte_end":150877,"line_start":375,"line_end":375,"column_start":5,"column_end":80}},{"value":"/ will be run against them. If the predicate returns a `Future` which","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150882,"byte_end":150953,"line_start":376,"line_end":376,"column_start":5,"column_end":76}},{"value":"/ resolves to `true`, then the stream will yield the value, but if the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":150958,"byte_end":151030,"line_start":377,"line_end":377,"column_start":5,"column_end":77}},{"value":"/ predicate returns a `Future` which resolves to `false`, then the value","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":151035,"byte_end":151109,"line_start":378,"line_end":378,"column_start":5,"column_end":79}},{"value":"/ will be discarded and the next value will be produced.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":151114,"byte_end":151172,"line_start":379,"line_end":379,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":151177,"byte_end":151180,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ Note that this function consumes the stream passed into it and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":151185,"byte_end":151261,"line_start":381,"line_end":381,"column_start":5,"column_end":81}},{"value":"/ wrapped version of it, similar to the existing `filter` methods in the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":151266,"byte_end":151340,"line_start":382,"line_end":382,"column_start":5,"column_end":79}},{"value":"/ standard library.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":151345,"byte_end":151366,"line_start":383,"line_end":383,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":151371,"byte_end":151374,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":151379,"byte_end":151393,"line_start":385,"line_end":385,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":151398,"byte_end":151401,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":151406,"byte_end":151413,"line_start":387,"line_end":387,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":151418,"byte_end":151459,"line_start":388,"line_end":388,"column_start":5,"column_end":46}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":151464,"byte_end":151488,"line_start":389,"line_end":389,"column_start":5,"column_end":29}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":151493,"byte_end":151536,"line_start":390,"line_end":390,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":151541,"byte_end":151544,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(1..=10);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":151549,"byte_end":151587,"line_start":392,"line_end":392,"column_start":5,"column_end":43}},{"value":"/ let evens = stream.filter(|x| future::ready(x % 2 == 0));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":151592,"byte_end":151653,"line_start":393,"line_end":393,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":151658,"byte_end":151661,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec![2, 4, 6, 8, 10], evens.collect::<Vec<_>>().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":151666,"byte_end":151736,"line_start":395,"line_end":395,"column_start":5,"column_end":75}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":151741,"byte_end":151750,"line_start":396,"line_end":396,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":151755,"byte_end":151762,"line_start":397,"line_end":397,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3411},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":153101,"byte_end":153111,"line_start":432,"line_end":432,"column_start":8,"column_end":18},"name":"filter_map","qualname":"::stream::stream::StreamExt::filter_map","value":"pub fn filter_map<Fut, T, F>(Self, F) -> FilterMap<Self, Fut, F> where\nF: FnMut(Self::Item) -> Fut, Fut: Future<Output = Option<T>>, Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Filters the values produced by this stream while simultaneously mapping\n them to a different type according to the provided asynchronous closure.","sig":null,"attributes":[{"value":"/ Filters the values produced by this stream while simultaneously mapping","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152004,"byte_end":152079,"line_start":407,"line_end":407,"column_start":5,"column_end":80}},{"value":"/ them to a different type according to the provided asynchronous closure.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152084,"byte_end":152160,"line_start":408,"line_end":408,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152165,"byte_end":152168,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ As values of this stream are made available, the provided function will","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152173,"byte_end":152248,"line_start":410,"line_end":410,"column_start":5,"column_end":80}},{"value":"/ be run on them. If the future returned by the predicate `f` resolves to","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152253,"byte_end":152328,"line_start":411,"line_end":411,"column_start":5,"column_end":80}},{"value":"/ [`Some(item)`](Some) then the stream will yield the value `item`, but if","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152333,"byte_end":152409,"line_start":412,"line_end":412,"column_start":5,"column_end":81}},{"value":"/ it resolves to [`None`] then the next value will be produced.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152414,"byte_end":152479,"line_start":413,"line_end":413,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152484,"byte_end":152487,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ Note that this function consumes the stream passed into it and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152492,"byte_end":152568,"line_start":415,"line_end":415,"column_start":5,"column_end":81}},{"value":"/ wrapped version of it, similar to the existing `filter_map` methods in","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152573,"byte_end":152647,"line_start":416,"line_end":416,"column_start":5,"column_end":79}},{"value":"/ the standard library.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152652,"byte_end":152677,"line_start":417,"line_end":417,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152682,"byte_end":152685,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152690,"byte_end":152704,"line_start":419,"line_end":419,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152709,"byte_end":152716,"line_start":420,"line_end":420,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152721,"byte_end":152762,"line_start":421,"line_end":421,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152767,"byte_end":152810,"line_start":422,"line_end":422,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152815,"byte_end":152818,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(1..=10);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152823,"byte_end":152861,"line_start":424,"line_end":424,"column_start":5,"column_end":43}},{"value":"/ let evens = stream.filter_map(|x| async move {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152866,"byte_end":152916,"line_start":425,"line_end":425,"column_start":5,"column_end":55}},{"value":"/     if x % 2 == 0 { Some(x + 1) } else { None }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152921,"byte_end":152972,"line_start":426,"line_end":426,"column_start":5,"column_end":56}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152977,"byte_end":152984,"line_start":427,"line_end":427,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152989,"byte_end":152992,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec![3, 5, 7, 9, 11], evens.collect::<Vec<_>>().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":152997,"byte_end":153067,"line_start":429,"line_end":429,"column_start":5,"column_end":75}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":153072,"byte_end":153081,"line_start":430,"line_end":430,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":153086,"byte_end":153093,"line_start":431,"line_end":431,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3415},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154140,"byte_end":154144,"line_start":463,"line_end":463,"column_start":8,"column_end":12},"name":"then","qualname":"::stream::stream::StreamExt::then","value":"pub fn then<Fut, F>(Self, F) -> Then<Self, Fut, F> where F: FnMut(Self::Item)\n-> Fut, Fut: Future, Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Computes from this stream's items new items of a different type using\n an asynchronous closure.","sig":null,"attributes":[{"value":"/ Computes from this stream's items new items of a different type using","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":153343,"byte_end":153416,"line_start":441,"line_end":441,"column_start":5,"column_end":78}},{"value":"/ an asynchronous closure.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":153421,"byte_end":153449,"line_start":442,"line_end":442,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":153454,"byte_end":153457,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ The provided closure `f` will be called with an `Item` once a value is","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":153462,"byte_end":153536,"line_start":444,"line_end":444,"column_start":5,"column_end":79}},{"value":"/ ready, it returns a future which will then be run to completion","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":153541,"byte_end":153608,"line_start":445,"line_end":445,"column_start":5,"column_end":72}},{"value":"/ to produce the next value on this stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":153613,"byte_end":153658,"line_start":446,"line_end":446,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":153663,"byte_end":153666,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ Note that this function consumes the stream passed into it and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":153671,"byte_end":153747,"line_start":448,"line_end":448,"column_start":5,"column_end":81}},{"value":"/ wrapped version of it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":153752,"byte_end":153778,"line_start":449,"line_end":449,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":153783,"byte_end":153786,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":153791,"byte_end":153805,"line_start":451,"line_end":451,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":153810,"byte_end":153813,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":153818,"byte_end":153825,"line_start":453,"line_end":453,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":153830,"byte_end":153871,"line_start":454,"line_end":454,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":153876,"byte_end":153919,"line_start":455,"line_end":455,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":153924,"byte_end":153927,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(1..=3);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":153932,"byte_end":153969,"line_start":457,"line_end":457,"column_start":5,"column_end":42}},{"value":"/ let stream = stream.then(|x| async move { x + 3 });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":153974,"byte_end":154029,"line_start":458,"line_end":458,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154034,"byte_end":154037,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec![4, 5, 6], stream.collect::<Vec<_>>().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154042,"byte_end":154106,"line_start":460,"line_end":460,"column_start":5,"column_end":69}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154111,"byte_end":154120,"line_start":461,"line_end":461,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154125,"byte_end":154132,"line_start":462,"line_end":462,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3418},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155078,"byte_end":155085,"line_start":497,"line_end":497,"column_start":8,"column_end":15},"name":"collect","qualname":"::stream::stream::StreamExt::collect","value":"pub fn collect<C: Default + Extend<Self::Item>>(Self) -> Collect<Self, C>\nwhere Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Transforms a stream into a collection, returning a\n future representing the result of that computation.","sig":null,"attributes":[{"value":"/ Transforms a stream into a collection, returning a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154353,"byte_end":154407,"line_start":472,"line_end":472,"column_start":5,"column_end":59}},{"value":"/ future representing the result of that computation.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154412,"byte_end":154467,"line_start":473,"line_end":473,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154472,"byte_end":154475,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ The returned future will be resolved when the stream terminates.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154480,"byte_end":154548,"line_start":475,"line_end":475,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154553,"byte_end":154556,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154561,"byte_end":154575,"line_start":477,"line_end":477,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154580,"byte_end":154583,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154588,"byte_end":154595,"line_start":479,"line_end":479,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154600,"byte_end":154641,"line_start":480,"line_end":480,"column_start":5,"column_end":46}},{"value":"/ use futures::channel::mpsc;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154646,"byte_end":154677,"line_start":481,"line_end":481,"column_start":5,"column_end":36}},{"value":"/ use futures::stream::StreamExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154682,"byte_end":154717,"line_start":482,"line_end":482,"column_start":5,"column_end":40}},{"value":"/ use std::thread;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154722,"byte_end":154742,"line_start":483,"line_end":483,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154747,"byte_end":154750,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ let (tx, rx) = mpsc::unbounded();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154755,"byte_end":154792,"line_start":485,"line_end":485,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154797,"byte_end":154800,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ thread::spawn(move || {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154805,"byte_end":154832,"line_start":487,"line_end":487,"column_start":5,"column_end":32}},{"value":"/     for i in 1..=5 {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154837,"byte_end":154861,"line_start":488,"line_end":488,"column_start":5,"column_end":29}},{"value":"/         tx.unbounded_send(i).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154866,"byte_end":154908,"line_start":489,"line_end":489,"column_start":5,"column_end":47}},{"value":"/     }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154913,"byte_end":154922,"line_start":490,"line_end":490,"column_start":5,"column_end":14}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154927,"byte_end":154934,"line_start":491,"line_end":491,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154939,"byte_end":154942,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ let output = rx.collect::<Vec<i32>>().await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":154947,"byte_end":154995,"line_start":493,"line_end":493,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(output, vec![1, 2, 3, 4, 5]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155000,"byte_end":155044,"line_start":494,"line_end":494,"column_start":5,"column_end":49}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155049,"byte_end":155058,"line_start":495,"line_end":495,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155063,"byte_end":155070,"line_start":496,"line_end":496,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3420},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156204,"byte_end":156209,"line_start":534,"line_end":534,"column_start":8,"column_end":13},"name":"unzip","qualname":"::stream::stream::StreamExt::unzip","value":"pub fn unzip<A, B, FromA, FromB>(Self) -> Unzip<Self, FromA, FromB> where\nFromA: Default + Extend<A>, FromB: Default + Extend<B>, Self: Sized +\nStream<Item = (A, B)>","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Converts a stream of pairs into a future, which\n resolves to pair of containers.","sig":null,"attributes":[{"value":"/ Converts a stream of pairs into a future, which","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155243,"byte_end":155294,"line_start":504,"line_end":504,"column_start":5,"column_end":56}},{"value":"/ resolves to pair of containers.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155299,"byte_end":155334,"line_start":505,"line_end":505,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155339,"byte_end":155342,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ `unzip()` produces a future, which resolves to two","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155347,"byte_end":155401,"line_start":507,"line_end":507,"column_start":5,"column_end":59}},{"value":"/ collections: one from the left elements of the pairs,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155406,"byte_end":155463,"line_start":508,"line_end":508,"column_start":5,"column_end":62}},{"value":"/ and one from the right elements.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155468,"byte_end":155504,"line_start":509,"line_end":509,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155509,"byte_end":155512,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ The returned future will be resolved when the stream terminates.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155517,"byte_end":155585,"line_start":511,"line_end":511,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155590,"byte_end":155593,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155598,"byte_end":155612,"line_start":513,"line_end":513,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155617,"byte_end":155620,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155625,"byte_end":155632,"line_start":515,"line_end":515,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155637,"byte_end":155678,"line_start":516,"line_end":516,"column_start":5,"column_end":46}},{"value":"/ use futures::channel::mpsc;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155683,"byte_end":155714,"line_start":517,"line_end":517,"column_start":5,"column_end":36}},{"value":"/ use futures::stream::StreamExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155719,"byte_end":155754,"line_start":518,"line_end":518,"column_start":5,"column_end":40}},{"value":"/ use std::thread;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155759,"byte_end":155779,"line_start":519,"line_end":519,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155784,"byte_end":155787,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ let (tx, rx) = mpsc::unbounded();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155792,"byte_end":155829,"line_start":521,"line_end":521,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155834,"byte_end":155837,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ thread::spawn(move || {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155842,"byte_end":155869,"line_start":523,"line_end":523,"column_start":5,"column_end":32}},{"value":"/     tx.unbounded_send((1, 2)).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155874,"byte_end":155917,"line_start":524,"line_end":524,"column_start":5,"column_end":48}},{"value":"/     tx.unbounded_send((3, 4)).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155922,"byte_end":155965,"line_start":525,"line_end":525,"column_start":5,"column_end":48}},{"value":"/     tx.unbounded_send((5, 6)).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":155970,"byte_end":156013,"line_start":526,"line_end":526,"column_start":5,"column_end":48}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156018,"byte_end":156025,"line_start":527,"line_end":527,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156030,"byte_end":156033,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ let (o1, o2): (Vec<_>, Vec<_>) = rx.unzip().await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156038,"byte_end":156092,"line_start":529,"line_end":529,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(o1, vec![1, 3, 5]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156097,"byte_end":156131,"line_start":530,"line_end":530,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(o2, vec![2, 4, 6]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156136,"byte_end":156170,"line_start":531,"line_end":531,"column_start":5,"column_end":39}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156175,"byte_end":156184,"line_start":532,"line_end":532,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156189,"byte_end":156196,"line_start":533,"line_end":533,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3425},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157505,"byte_end":157511,"line_start":575,"line_end":575,"column_start":8,"column_end":14},"name":"concat","qualname":"::stream::stream::StreamExt::concat","value":"pub fn concat(Self) -> Concat<Self> where Self: Sized,\nSelf::Item: Extend<<<Self as Stream>::Item as IntoIterator>::Item> +\nIntoIterator + Default","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Concatenate all items of a stream into a single extendable\n destination, returning a future representing the end result.","sig":null,"attributes":[{"value":"/ Concatenate all items of a stream into a single extendable","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156470,"byte_end":156532,"line_start":543,"line_end":543,"column_start":5,"column_end":67}},{"value":"/ destination, returning a future representing the end result.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156537,"byte_end":156601,"line_start":544,"line_end":544,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156606,"byte_end":156609,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ This combinator will extend the first item with the contents","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156614,"byte_end":156678,"line_start":546,"line_end":546,"column_start":5,"column_end":69}},{"value":"/ of all the subsequent results of the stream. If the stream is","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156683,"byte_end":156748,"line_start":547,"line_end":547,"column_start":5,"column_end":70}},{"value":"/ empty, the default value will be returned.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156753,"byte_end":156799,"line_start":548,"line_end":548,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156804,"byte_end":156807,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ Works with all collections that implement the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156812,"byte_end":156861,"line_start":550,"line_end":550,"column_start":5,"column_end":54}},{"value":"/ [`Extend`](std::iter::Extend) trait.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156866,"byte_end":156906,"line_start":551,"line_end":551,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156911,"byte_end":156914,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156919,"byte_end":156933,"line_start":553,"line_end":553,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156938,"byte_end":156941,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156946,"byte_end":156953,"line_start":555,"line_end":555,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":156958,"byte_end":156999,"line_start":556,"line_end":556,"column_start":5,"column_end":46}},{"value":"/ use futures::channel::mpsc;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157004,"byte_end":157035,"line_start":557,"line_end":557,"column_start":5,"column_end":36}},{"value":"/ use futures::stream::StreamExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157040,"byte_end":157075,"line_start":558,"line_end":558,"column_start":5,"column_end":40}},{"value":"/ use std::thread;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157080,"byte_end":157100,"line_start":559,"line_end":559,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157105,"byte_end":157108,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ let (tx, rx) = mpsc::unbounded();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157113,"byte_end":157150,"line_start":561,"line_end":561,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157155,"byte_end":157158,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ thread::spawn(move || {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157163,"byte_end":157190,"line_start":563,"line_end":563,"column_start":5,"column_end":32}},{"value":"/     for i in (0..3).rev() {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157195,"byte_end":157226,"line_start":564,"line_end":564,"column_start":5,"column_end":36}},{"value":"/         let n = i * 3;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157231,"byte_end":157257,"line_start":565,"line_end":565,"column_start":5,"column_end":31}},{"value":"/         tx.unbounded_send(vec![n + 1, n + 2, n + 3]).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157262,"byte_end":157328,"line_start":566,"line_end":566,"column_start":5,"column_end":71}},{"value":"/     }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157333,"byte_end":157342,"line_start":567,"line_end":567,"column_start":5,"column_end":14}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157347,"byte_end":157354,"line_start":568,"line_end":568,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157359,"byte_end":157362,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ let result = rx.concat().await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157367,"byte_end":157402,"line_start":570,"line_end":570,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157407,"byte_end":157410,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, vec![7, 8, 9, 4, 5, 6, 1, 2, 3]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157415,"byte_end":157471,"line_start":572,"line_end":572,"column_start":5,"column_end":61}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157476,"byte_end":157485,"line_start":573,"line_end":573,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157490,"byte_end":157497,"line_start":574,"line_end":574,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3426},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158531,"byte_end":158536,"line_start":608,"line_end":608,"column_start":8,"column_end":13},"name":"count","qualname":"::stream::stream::StreamExt::count","value":"pub fn count(Self) -> Count<Self> where Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Drives the stream to completion, counting the number of items.","sig":null,"attributes":[{"value":"/ Drives the stream to completion, counting the number of items.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157741,"byte_end":157807,"line_start":583,"line_end":583,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157812,"byte_end":157815,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ # Overflow Behavior","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157820,"byte_end":157843,"line_start":585,"line_end":585,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157848,"byte_end":157851,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ The method does no guarding against overflows, so counting elements of a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157856,"byte_end":157932,"line_start":587,"line_end":587,"column_start":5,"column_end":81}},{"value":"/ stream with more than [`usize::MAX`] elements either produces the wrong","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":157937,"byte_end":158012,"line_start":588,"line_end":588,"column_start":5,"column_end":80}},{"value":"/ result or panics. If debug assertions are enabled, a panic is guaranteed.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158017,"byte_end":158094,"line_start":589,"line_end":589,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158099,"byte_end":158102,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158107,"byte_end":158119,"line_start":591,"line_end":591,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158124,"byte_end":158127,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ This function might panic if the iterator has more than [`usize::MAX`]","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158132,"byte_end":158206,"line_start":593,"line_end":593,"column_start":5,"column_end":79}},{"value":"/ elements.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158211,"byte_end":158224,"line_start":594,"line_end":594,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158229,"byte_end":158232,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158237,"byte_end":158251,"line_start":596,"line_end":596,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158256,"byte_end":158259,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158264,"byte_end":158271,"line_start":598,"line_end":598,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158276,"byte_end":158317,"line_start":599,"line_end":599,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158322,"byte_end":158365,"line_start":600,"line_end":600,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158370,"byte_end":158373,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(1..=10);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158378,"byte_end":158416,"line_start":602,"line_end":602,"column_start":5,"column_end":43}},{"value":"/ let count = stream.count().await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158421,"byte_end":158458,"line_start":603,"line_end":603,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158463,"byte_end":158466,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(count, 10);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158471,"byte_end":158497,"line_start":605,"line_end":605,"column_start":5,"column_end":31}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158502,"byte_end":158511,"line_start":606,"line_end":606,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158516,"byte_end":158523,"line_start":607,"line_end":607,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3427},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":159492,"byte_end":159497,"line_start":638,"line_end":638,"column_start":8,"column_end":13},"name":"cycle","qualname":"::stream::stream::StreamExt::cycle","value":"pub fn cycle(Self) -> Cycle<Self> where Self: Sized + Clone","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Repeats a stream endlessly.","sig":null,"attributes":[{"value":"/ Repeats a stream endlessly.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158658,"byte_end":158689,"line_start":615,"line_end":615,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158694,"byte_end":158697,"line_start":616,"line_end":616,"column_start":5,"column_end":8}},{"value":"/ The stream never terminates. Note that you likely want to avoid","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158702,"byte_end":158769,"line_start":617,"line_end":617,"column_start":5,"column_end":72}},{"value":"/ usage of `collect` or such on the returned stream as it will exhaust","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158774,"byte_end":158846,"line_start":618,"line_end":618,"column_start":5,"column_end":77}},{"value":"/ available memory as it tries to just fill up all RAM.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158851,"byte_end":158908,"line_start":619,"line_end":619,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158913,"byte_end":158916,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158921,"byte_end":158935,"line_start":621,"line_end":621,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158940,"byte_end":158943,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158948,"byte_end":158955,"line_start":623,"line_end":623,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":158960,"byte_end":159001,"line_start":624,"line_end":624,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":159006,"byte_end":159049,"line_start":625,"line_end":625,"column_start":5,"column_end":48}},{"value":"/ let a = [1, 2, 3];","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":159054,"byte_end":159076,"line_start":626,"line_end":626,"column_start":5,"column_end":27}},{"value":"/ let mut s = stream::iter(a.iter()).cycle();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":159081,"byte_end":159128,"line_start":627,"line_end":627,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":159133,"byte_end":159136,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s.next().await, Some(&1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":159141,"byte_end":159182,"line_start":629,"line_end":629,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(s.next().await, Some(&2));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":159187,"byte_end":159228,"line_start":630,"line_end":630,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(s.next().await, Some(&3));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":159233,"byte_end":159274,"line_start":631,"line_end":631,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(s.next().await, Some(&1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":159279,"byte_end":159320,"line_start":632,"line_end":632,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(s.next().await, Some(&2));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":159325,"byte_end":159366,"line_start":633,"line_end":633,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(s.next().await, Some(&3));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":159371,"byte_end":159412,"line_start":634,"line_end":634,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(s.next().await, Some(&1));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":159417,"byte_end":159458,"line_start":635,"line_end":635,"column_start":5,"column_end":46}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":159463,"byte_end":159472,"line_start":636,"line_end":636,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":159477,"byte_end":159484,"line_start":637,"line_end":637,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3428},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160447,"byte_end":160451,"line_start":665,"line_end":665,"column_start":8,"column_end":12},"name":"fold","qualname":"::stream::stream::StreamExt::fold","value":"pub fn fold<T, Fut, F>(Self, T, F) -> Fold<Self, Fut, T, F> where\nF: FnMut(T, Self::Item) -> Fut, Fut: Future<Output = T>, Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Execute an accumulating asynchronous computation over a stream,\n collecting all the values into one final result.","sig":null,"attributes":[{"value":"/ Execute an accumulating asynchronous computation over a stream,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":159632,"byte_end":159699,"line_start":645,"line_end":645,"column_start":5,"column_end":72}},{"value":"/ collecting all the values into one final result.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":159704,"byte_end":159756,"line_start":646,"line_end":646,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":159761,"byte_end":159764,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ This combinator will accumulate all values returned by this stream","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":159769,"byte_end":159839,"line_start":648,"line_end":648,"column_start":5,"column_end":75}},{"value":"/ according to the closure provided. The initial state is also provided to","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":159844,"byte_end":159920,"line_start":649,"line_end":649,"column_start":5,"column_end":81}},{"value":"/ this method and then is returned again by each execution of the closure.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":159925,"byte_end":160001,"line_start":650,"line_end":650,"column_start":5,"column_end":81}},{"value":"/ Once the entire stream has been exhausted the returned future will","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160006,"byte_end":160076,"line_start":651,"line_end":651,"column_start":5,"column_end":75}},{"value":"/ resolve to this value.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160081,"byte_end":160107,"line_start":652,"line_end":652,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160112,"byte_end":160115,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160120,"byte_end":160134,"line_start":654,"line_end":654,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160139,"byte_end":160142,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160147,"byte_end":160154,"line_start":656,"line_end":656,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160159,"byte_end":160200,"line_start":657,"line_end":657,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160205,"byte_end":160248,"line_start":658,"line_end":658,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160253,"byte_end":160256,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ let number_stream = stream::iter(0..6);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160261,"byte_end":160304,"line_start":660,"line_end":660,"column_start":5,"column_end":48}},{"value":"/ let sum = number_stream.fold(0, |acc, x| async move { acc + x });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160309,"byte_end":160378,"line_start":661,"line_end":661,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(sum.await, 15);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160383,"byte_end":160413,"line_start":662,"line_end":662,"column_start":5,"column_end":35}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160418,"byte_end":160427,"line_start":663,"line_end":663,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160432,"byte_end":160439,"line_start":664,"line_end":664,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3432},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":161152,"byte_end":161155,"line_start":687,"line_end":687,"column_start":8,"column_end":11},"name":"any","qualname":"::stream::stream::StreamExt::any","value":"pub fn any<Fut, F>(Self, F) -> Any<Self, Fut, F> where F: FnMut(Self::Item) ->\nFut, Fut: Future<Output = bool>, Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Execute predicate over asynchronous stream, and return `true` if any element in stream satisfied a predicate.","sig":null,"attributes":[{"value":"/ Execute predicate over asynchronous stream, and return `true` if any element in stream satisfied a predicate.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160686,"byte_end":160799,"line_start":674,"line_end":674,"column_start":5,"column_end":118}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160804,"byte_end":160807,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160812,"byte_end":160826,"line_start":676,"line_end":676,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160831,"byte_end":160834,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160839,"byte_end":160846,"line_start":678,"line_end":678,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160851,"byte_end":160892,"line_start":679,"line_end":679,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160897,"byte_end":160940,"line_start":680,"line_end":680,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160945,"byte_end":160948,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ let number_stream = stream::iter(0..10);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":160953,"byte_end":160997,"line_start":682,"line_end":682,"column_start":5,"column_end":49}},{"value":"/ let contain_three = number_stream.any(|i| async move { i == 3 });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":161002,"byte_end":161071,"line_start":683,"line_end":683,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(contain_three.await, true);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":161076,"byte_end":161118,"line_start":684,"line_end":684,"column_start":5,"column_end":47}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":161123,"byte_end":161132,"line_start":685,"line_end":685,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":161137,"byte_end":161144,"line_start":686,"line_end":686,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3435},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":161842,"byte_end":161845,"line_start":709,"line_end":709,"column_start":8,"column_end":11},"name":"all","qualname":"::stream::stream::StreamExt::all","value":"pub fn all<Fut, F>(Self, F) -> All<Self, Fut, F> where F: FnMut(Self::Item) ->\nFut, Fut: Future<Output = bool>, Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Execute predicate over asynchronous stream, and return `true` if all element in stream satisfied a predicate.","sig":null,"attributes":[{"value":"/ Execute predicate over asynchronous stream, and return `true` if all element in stream satisfied a predicate.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":161370,"byte_end":161483,"line_start":696,"line_end":696,"column_start":5,"column_end":118}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":161488,"byte_end":161491,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":161496,"byte_end":161510,"line_start":698,"line_end":698,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":161515,"byte_end":161518,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":161523,"byte_end":161530,"line_start":700,"line_end":700,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":161535,"byte_end":161576,"line_start":701,"line_end":701,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":161581,"byte_end":161624,"line_start":702,"line_end":702,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":161629,"byte_end":161632,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ let number_stream = stream::iter(0..10);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":161637,"byte_end":161681,"line_start":704,"line_end":704,"column_start":5,"column_end":49}},{"value":"/ let less_then_twenty = number_stream.all(|i| async move { i < 20 });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":161686,"byte_end":161758,"line_start":705,"line_end":705,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(less_then_twenty.await, true);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":161763,"byte_end":161808,"line_start":706,"line_end":706,"column_start":5,"column_end":50}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":161813,"byte_end":161822,"line_start":707,"line_end":707,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":161827,"byte_end":161834,"line_start":708,"line_end":708,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3438},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":163019,"byte_end":163026,"line_start":749,"line_end":749,"column_start":8,"column_end":15},"name":"flatten","qualname":"::stream::stream::StreamExt::flatten","value":"pub fn flatten(Self) -> Flatten<Self> where Self::Item: Stream, Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Flattens a stream of streams into just one continuous stream.","sig":null,"attributes":[{"value":"/ Flattens a stream of streams into just one continuous stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162060,"byte_end":162125,"line_start":718,"line_end":718,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162130,"byte_end":162133,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162138,"byte_end":162152,"line_start":720,"line_end":720,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162157,"byte_end":162160,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162165,"byte_end":162172,"line_start":722,"line_end":722,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162177,"byte_end":162218,"line_start":723,"line_end":723,"column_start":5,"column_end":46}},{"value":"/ use futures::channel::mpsc;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162223,"byte_end":162254,"line_start":724,"line_end":724,"column_start":5,"column_end":36}},{"value":"/ use futures::stream::StreamExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162259,"byte_end":162294,"line_start":725,"line_end":725,"column_start":5,"column_end":40}},{"value":"/ use std::thread;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162299,"byte_end":162319,"line_start":726,"line_end":726,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162324,"byte_end":162327,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ let (tx1, rx1) = mpsc::unbounded();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162332,"byte_end":162371,"line_start":728,"line_end":728,"column_start":5,"column_end":44}},{"value":"/ let (tx2, rx2) = mpsc::unbounded();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162376,"byte_end":162415,"line_start":729,"line_end":729,"column_start":5,"column_end":44}},{"value":"/ let (tx3, rx3) = mpsc::unbounded();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162420,"byte_end":162459,"line_start":730,"line_end":730,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162464,"byte_end":162467,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ thread::spawn(move || {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162472,"byte_end":162499,"line_start":732,"line_end":732,"column_start":5,"column_end":32}},{"value":"/     tx1.unbounded_send(1).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162504,"byte_end":162543,"line_start":733,"line_end":733,"column_start":5,"column_end":44}},{"value":"/     tx1.unbounded_send(2).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162548,"byte_end":162587,"line_start":734,"line_end":734,"column_start":5,"column_end":44}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162592,"byte_end":162599,"line_start":735,"line_end":735,"column_start":5,"column_end":12}},{"value":"/ thread::spawn(move || {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162604,"byte_end":162631,"line_start":736,"line_end":736,"column_start":5,"column_end":32}},{"value":"/     tx2.unbounded_send(3).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162636,"byte_end":162675,"line_start":737,"line_end":737,"column_start":5,"column_end":44}},{"value":"/     tx2.unbounded_send(4).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162680,"byte_end":162719,"line_start":738,"line_end":738,"column_start":5,"column_end":44}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162724,"byte_end":162731,"line_start":739,"line_end":739,"column_start":5,"column_end":12}},{"value":"/ thread::spawn(move || {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162736,"byte_end":162763,"line_start":740,"line_end":740,"column_start":5,"column_end":32}},{"value":"/     tx3.unbounded_send(rx1).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162768,"byte_end":162809,"line_start":741,"line_end":741,"column_start":5,"column_end":46}},{"value":"/     tx3.unbounded_send(rx2).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162814,"byte_end":162855,"line_start":742,"line_end":742,"column_start":5,"column_end":46}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162860,"byte_end":162867,"line_start":743,"line_end":743,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162872,"byte_end":162875,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ let output = rx3.flatten().collect::<Vec<i32>>().await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162880,"byte_end":162939,"line_start":745,"line_end":745,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(output, vec![1, 2, 3, 4]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162944,"byte_end":162985,"line_start":746,"line_end":746,"column_start":5,"column_end":46}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":162990,"byte_end":162999,"line_start":747,"line_end":747,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":163004,"byte_end":163011,"line_start":748,"line_end":748,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3439},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164288,"byte_end":164296,"line_start":782,"line_end":782,"column_start":8,"column_end":16},"name":"flat_map","qualname":"::stream::stream::StreamExt::flat_map","value":"pub fn flat_map<U, F>(Self, F) -> FlatMap<Self, U, F> where\nF: FnMut(Self::Item) -> U, U: Stream, Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Maps a stream like [`StreamExt::map`] but flattens nested `Stream`s.","sig":null,"attributes":[{"value":"/ Maps a stream like [`StreamExt::map`] but flattens nested `Stream`s.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":163203,"byte_end":163275,"line_start":757,"line_end":757,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":163280,"byte_end":163283,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ [`StreamExt::map`] is very useful, but if it produces a `Stream` instead,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":163288,"byte_end":163365,"line_start":759,"line_end":759,"column_start":5,"column_end":82}},{"value":"/ you would have to chain combinators like `.map(f).flatten()` while this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":163370,"byte_end":163445,"line_start":760,"line_end":760,"column_start":5,"column_end":80}},{"value":"/ combinator provides ability to write `.flat_map(f)` instead of chaining.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":163450,"byte_end":163526,"line_start":761,"line_end":761,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":163531,"byte_end":163534,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ The provided closure which produce inner streams is executed over all elements","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":163539,"byte_end":163621,"line_start":763,"line_end":763,"column_start":5,"column_end":87}},{"value":"/ of stream as last inner stream is terminated and next stream item is available.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":163626,"byte_end":163709,"line_start":764,"line_end":764,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":163714,"byte_end":163717,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ Note that this function consumes the stream passed into it and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":163722,"byte_end":163798,"line_start":766,"line_end":766,"column_start":5,"column_end":81}},{"value":"/ wrapped version of it, similar to the existing `flat_map` methods in the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":163803,"byte_end":163879,"line_start":767,"line_end":767,"column_start":5,"column_end":81}},{"value":"/ standard library.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":163884,"byte_end":163905,"line_start":768,"line_end":768,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":163910,"byte_end":163913,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":163918,"byte_end":163932,"line_start":770,"line_end":770,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":163937,"byte_end":163940,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":163945,"byte_end":163952,"line_start":772,"line_end":772,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":163957,"byte_end":163998,"line_start":773,"line_end":773,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164003,"byte_end":164046,"line_start":774,"line_end":774,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164051,"byte_end":164054,"line_start":775,"line_end":775,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(1..=3);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164059,"byte_end":164096,"line_start":776,"line_end":776,"column_start":5,"column_end":42}},{"value":"/ let stream = stream.flat_map(|x| stream::iter(vec![x + 3; x]));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164101,"byte_end":164168,"line_start":777,"line_end":777,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164173,"byte_end":164176,"line_start":778,"line_end":778,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec![4, 5, 5, 6, 6, 6], stream.collect::<Vec<_>>().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164181,"byte_end":164254,"line_start":779,"line_end":779,"column_start":5,"column_end":78}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164259,"byte_end":164268,"line_start":780,"line_end":780,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164273,"byte_end":164280,"line_start":781,"line_end":781,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3442},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165308,"byte_end":165312,"line_start":815,"line_end":815,"column_start":8,"column_end":12},"name":"scan","qualname":"::stream::stream::StreamExt::scan","value":"pub fn scan<S, B, Fut, F>(Self, S, F) -> Scan<Self, S, Fut, F> where\nF: FnMut(&mut S, Self::Item) -> Fut, Fut: Future<Output = Option<B>>,\nSelf: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Combinator similar to [`StreamExt::fold`] that holds internal state\n and produces a new stream.","sig":null,"attributes":[{"value":"/ Combinator similar to [`StreamExt::fold`] that holds internal state","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164499,"byte_end":164570,"line_start":791,"line_end":791,"column_start":5,"column_end":76}},{"value":"/ and produces a new stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164575,"byte_end":164605,"line_start":792,"line_end":792,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164610,"byte_end":164613,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ Accepts initial state and closure which will be applied to each element","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164618,"byte_end":164693,"line_start":794,"line_end":794,"column_start":5,"column_end":80}},{"value":"/ of the stream until provided closure returns `None`. Once `None` is","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164698,"byte_end":164769,"line_start":795,"line_end":795,"column_start":5,"column_end":76}},{"value":"/ returned, stream will be terminated.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164774,"byte_end":164814,"line_start":796,"line_end":796,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164819,"byte_end":164822,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164827,"byte_end":164841,"line_start":798,"line_end":798,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164846,"byte_end":164849,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164854,"byte_end":164861,"line_start":800,"line_end":800,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164866,"byte_end":164907,"line_start":801,"line_end":801,"column_start":5,"column_end":46}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164912,"byte_end":164936,"line_start":802,"line_end":802,"column_start":5,"column_end":29}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164941,"byte_end":164984,"line_start":803,"line_end":803,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164989,"byte_end":164992,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(1..=10);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":164997,"byte_end":165035,"line_start":805,"line_end":805,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165040,"byte_end":165043,"line_start":806,"line_end":806,"column_start":5,"column_end":8}},{"value":"/ let stream = stream.scan(0, |state, x| {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165048,"byte_end":165092,"line_start":807,"line_end":807,"column_start":5,"column_end":49}},{"value":"/     *state += x;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165097,"byte_end":165117,"line_start":808,"line_end":808,"column_start":5,"column_end":25}},{"value":"/     future::ready(if *state < 10 { Some(x) } else { None })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165122,"byte_end":165185,"line_start":809,"line_end":809,"column_start":5,"column_end":68}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165190,"byte_end":165197,"line_start":810,"line_end":810,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165202,"byte_end":165205,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec![1, 2, 3], stream.collect::<Vec<_>>().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165210,"byte_end":165274,"line_start":812,"line_end":812,"column_start":5,"column_end":69}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165279,"byte_end":165288,"line_start":813,"line_end":813,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165293,"byte_end":165300,"line_start":814,"line_end":814,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3447},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166359,"byte_end":166369,"line_start":846,"line_end":846,"column_start":8,"column_end":18},"name":"skip_while","qualname":"::stream::stream::StreamExt::skip_while","value":"pub fn skip_while<Fut, F>(Self, F) -> SkipWhile<Self, Fut, F> where\nF: FnMut(&Self::Item) -> Fut, Fut: Future<Output = bool>, Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Skip elements on this stream while the provided asynchronous predicate\n resolves to `true`.","sig":null,"attributes":[{"value":"/ Skip elements on this stream while the provided asynchronous predicate","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165581,"byte_end":165655,"line_start":824,"line_end":824,"column_start":5,"column_end":79}},{"value":"/ resolves to `true`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165660,"byte_end":165683,"line_start":825,"line_end":825,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165688,"byte_end":165691,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ This function, like `Iterator::skip_while`, will skip elements on the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165696,"byte_end":165769,"line_start":827,"line_end":827,"column_start":5,"column_end":78}},{"value":"/ stream until the predicate `f` resolves to `false`. Once one element","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165774,"byte_end":165846,"line_start":828,"line_end":828,"column_start":5,"column_end":77}},{"value":"/ returns `false`, all future elements will be returned from the underlying","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165851,"byte_end":165928,"line_start":829,"line_end":829,"column_start":5,"column_end":82}},{"value":"/ stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165933,"byte_end":165944,"line_start":830,"line_end":830,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165949,"byte_end":165952,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165957,"byte_end":165971,"line_start":832,"line_end":832,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165976,"byte_end":165979,"line_start":833,"line_end":833,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165984,"byte_end":165991,"line_start":834,"line_end":834,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":165996,"byte_end":166037,"line_start":835,"line_end":835,"column_start":5,"column_end":46}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166042,"byte_end":166066,"line_start":836,"line_end":836,"column_start":5,"column_end":29}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166071,"byte_end":166114,"line_start":837,"line_end":837,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166119,"byte_end":166122,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(1..=10);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166127,"byte_end":166165,"line_start":839,"line_end":839,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166170,"byte_end":166173,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ let stream = stream.skip_while(|x| future::ready(*x <= 5));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166178,"byte_end":166241,"line_start":841,"line_end":841,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166246,"byte_end":166249,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec![6, 7, 8, 9, 10], stream.collect::<Vec<_>>().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166254,"byte_end":166325,"line_start":843,"line_end":843,"column_start":5,"column_end":76}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166330,"byte_end":166339,"line_start":844,"line_end":844,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166344,"byte_end":166351,"line_start":845,"line_end":845,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3450},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":167358,"byte_end":167368,"line_start":876,"line_end":876,"column_start":8,"column_end":18},"name":"take_while","qualname":"::stream::stream::StreamExt::take_while","value":"pub fn take_while<Fut, F>(Self, F) -> TakeWhile<Self, Fut, F> where\nF: FnMut(&Self::Item) -> Fut, Fut: Future<Output = bool>, Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Take elements from this stream while the provided asynchronous predicate\n resolves to `true`.","sig":null,"attributes":[{"value":"/ Take elements from this stream while the provided asynchronous predicate","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166603,"byte_end":166679,"line_start":855,"line_end":855,"column_start":5,"column_end":81}},{"value":"/ resolves to `true`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166684,"byte_end":166707,"line_start":856,"line_end":856,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166712,"byte_end":166715,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ This function, like `Iterator::take_while`, will take elements from the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166720,"byte_end":166795,"line_start":858,"line_end":858,"column_start":5,"column_end":80}},{"value":"/ stream until the predicate `f` resolves to `false`. Once one element","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166800,"byte_end":166872,"line_start":859,"line_end":859,"column_start":5,"column_end":77}},{"value":"/ returns `false`, it will always return that the stream is done.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166877,"byte_end":166944,"line_start":860,"line_end":860,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166949,"byte_end":166952,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166957,"byte_end":166971,"line_start":862,"line_end":862,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166976,"byte_end":166979,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166984,"byte_end":166991,"line_start":864,"line_end":864,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":166996,"byte_end":167037,"line_start":865,"line_end":865,"column_start":5,"column_end":46}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":167042,"byte_end":167066,"line_start":866,"line_end":866,"column_start":5,"column_end":29}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":167071,"byte_end":167114,"line_start":867,"line_end":867,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":167119,"byte_end":167122,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(1..=10);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":167127,"byte_end":167165,"line_start":869,"line_end":869,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":167170,"byte_end":167173,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ let stream = stream.take_while(|x| future::ready(*x <= 5));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":167178,"byte_end":167241,"line_start":871,"line_end":871,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":167246,"byte_end":167249,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec![1, 2, 3, 4, 5], stream.collect::<Vec<_>>().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":167254,"byte_end":167324,"line_start":873,"line_end":873,"column_start":5,"column_end":75}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":167329,"byte_end":167338,"line_start":874,"line_end":874,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":167343,"byte_end":167350,"line_start":875,"line_end":875,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3453},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168884,"byte_end":168894,"line_start":921,"line_end":921,"column_start":8,"column_end":18},"name":"take_until","qualname":"::stream::stream::StreamExt::take_until","value":"pub fn take_until<Fut>(Self, Fut) -> TakeUntil<Self, Fut> where Fut: Future,\nSelf: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Take elements from this stream until the provided future resolves.","sig":null,"attributes":[{"value":"/ Take elements from this stream until the provided future resolves.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":167602,"byte_end":167672,"line_start":885,"line_end":885,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":167677,"byte_end":167680,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ This function will take elements from the stream until the provided","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":167685,"byte_end":167756,"line_start":887,"line_end":887,"column_start":5,"column_end":76}},{"value":"/ stopping future `fut` resolves. Once the `fut` future becomes ready,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":167761,"byte_end":167833,"line_start":888,"line_end":888,"column_start":5,"column_end":77}},{"value":"/ this stream combinator will always return that the stream is done.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":167838,"byte_end":167908,"line_start":889,"line_end":889,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":167913,"byte_end":167916,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ The stopping future may return any type. Once the stream is stopped","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":167921,"byte_end":167992,"line_start":891,"line_end":891,"column_start":5,"column_end":76}},{"value":"/ the result of the stopping future may be accessed with `TakeUntil::take_result()`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":167997,"byte_end":168083,"line_start":892,"line_end":892,"column_start":5,"column_end":91}},{"value":"/ The stream may also be resumed with `TakeUntil::take_future()`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168088,"byte_end":168155,"line_start":893,"line_end":893,"column_start":5,"column_end":72}},{"value":"/ See the documentation of [`TakeUntil`] for more information.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168160,"byte_end":168224,"line_start":894,"line_end":894,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168229,"byte_end":168232,"line_start":895,"line_end":895,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168237,"byte_end":168251,"line_start":896,"line_end":896,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168256,"byte_end":168259,"line_start":897,"line_end":897,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168264,"byte_end":168271,"line_start":898,"line_end":898,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168276,"byte_end":168317,"line_start":899,"line_end":899,"column_start":5,"column_end":46}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168322,"byte_end":168346,"line_start":900,"line_end":900,"column_start":5,"column_end":29}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168351,"byte_end":168394,"line_start":901,"line_end":901,"column_start":5,"column_end":48}},{"value":"/ use futures::task::Poll;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168399,"byte_end":168427,"line_start":902,"line_end":902,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168432,"byte_end":168435,"line_start":903,"line_end":903,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(1..=10);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168440,"byte_end":168478,"line_start":904,"line_end":904,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168483,"byte_end":168486,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/ let mut i = 0;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168491,"byte_end":168509,"line_start":906,"line_end":906,"column_start":5,"column_end":23}},{"value":"/ let stop_fut = future::poll_fn(|_cx| {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168514,"byte_end":168556,"line_start":907,"line_end":907,"column_start":5,"column_end":47}},{"value":"/     i += 1;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168561,"byte_end":168576,"line_start":908,"line_end":908,"column_start":5,"column_end":20}},{"value":"/     if i <= 5 {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168581,"byte_end":168600,"line_start":909,"line_end":909,"column_start":5,"column_end":24}},{"value":"/         Poll::Pending","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168605,"byte_end":168630,"line_start":910,"line_end":910,"column_start":5,"column_end":30}},{"value":"/     } else {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168635,"byte_end":168651,"line_start":911,"line_end":911,"column_start":5,"column_end":21}},{"value":"/         Poll::Ready(())","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168656,"byte_end":168683,"line_start":912,"line_end":912,"column_start":5,"column_end":32}},{"value":"/     }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168688,"byte_end":168697,"line_start":913,"line_end":913,"column_start":5,"column_end":14}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168702,"byte_end":168709,"line_start":914,"line_end":914,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168714,"byte_end":168717,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ let stream = stream.take_until(stop_fut);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168722,"byte_end":168767,"line_start":916,"line_end":916,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168772,"byte_end":168775,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec![1, 2, 3, 4, 5], stream.collect::<Vec<_>>().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168780,"byte_end":168850,"line_start":918,"line_end":918,"column_start":5,"column_end":75}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168855,"byte_end":168864,"line_start":919,"line_end":919,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":168869,"byte_end":168876,"line_start":920,"line_end":920,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3455},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":170133,"byte_end":170141,"line_start":962,"line_end":962,"column_start":8,"column_end":16},"name":"for_each","qualname":"::stream::stream::StreamExt::for_each","value":"pub fn for_each<Fut, F>(Self, F) -> ForEach<Self, Fut, F> where\nF: FnMut(Self::Item) -> Fut, Fut: Future<Output = ()>, Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Runs this stream to completion, executing the provided asynchronous\n closure for each element on the stream.","sig":null,"attributes":[{"value":"/ Runs this stream to completion, executing the provided asynchronous","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169075,"byte_end":169146,"line_start":929,"line_end":929,"column_start":5,"column_end":76}},{"value":"/ closure for each element on the stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169151,"byte_end":169194,"line_start":930,"line_end":930,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169199,"byte_end":169202,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ The closure provided will be called for each item this stream produces,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169207,"byte_end":169282,"line_start":932,"line_end":932,"column_start":5,"column_end":80}},{"value":"/ yielding a future. That future will then be executed to completion","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169287,"byte_end":169357,"line_start":933,"line_end":933,"column_start":5,"column_end":75}},{"value":"/ before moving on to the next item.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169362,"byte_end":169400,"line_start":934,"line_end":934,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169405,"byte_end":169408,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ The returned value is a `Future` where the `Output` type is `()`; it is","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169413,"byte_end":169488,"line_start":936,"line_end":936,"column_start":5,"column_end":80}},{"value":"/ executed entirely for its side effects.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169493,"byte_end":169536,"line_start":937,"line_end":937,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169541,"byte_end":169544,"line_start":938,"line_end":938,"column_start":5,"column_end":8}},{"value":"/ To process each item in the stream and produce another stream instead","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169549,"byte_end":169622,"line_start":939,"line_end":939,"column_start":5,"column_end":78}},{"value":"/ of a single future, use `then` instead.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169627,"byte_end":169670,"line_start":940,"line_end":940,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169675,"byte_end":169678,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169683,"byte_end":169697,"line_start":942,"line_end":942,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169702,"byte_end":169705,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169710,"byte_end":169717,"line_start":944,"line_end":944,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169722,"byte_end":169763,"line_start":945,"line_end":945,"column_start":5,"column_end":46}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169768,"byte_end":169792,"line_start":946,"line_end":946,"column_start":5,"column_end":29}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169797,"byte_end":169840,"line_start":947,"line_end":947,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169845,"byte_end":169848,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ let mut x = 0;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169853,"byte_end":169871,"line_start":949,"line_end":949,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169876,"byte_end":169879,"line_start":950,"line_end":950,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169884,"byte_end":169889,"line_start":951,"line_end":951,"column_start":5,"column_end":10}},{"value":"/     let fut = stream::repeat(1).take(3).for_each(|item| {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169894,"byte_end":169955,"line_start":952,"line_end":952,"column_start":5,"column_end":66}},{"value":"/         x += item;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169960,"byte_end":169982,"line_start":953,"line_end":953,"column_start":5,"column_end":27}},{"value":"/         future::ready(())","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":169987,"byte_end":170016,"line_start":954,"line_end":954,"column_start":5,"column_end":34}},{"value":"/     });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":170021,"byte_end":170032,"line_start":955,"line_end":955,"column_start":5,"column_end":16}},{"value":"/     fut.await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":170037,"byte_end":170055,"line_start":956,"line_end":956,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":170060,"byte_end":170065,"line_start":957,"line_end":957,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":170070,"byte_end":170073,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(x, 3);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":170078,"byte_end":170099,"line_start":959,"line_end":959,"column_start":5,"column_end":26}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":170104,"byte_end":170113,"line_start":960,"line_end":960,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":170118,"byte_end":170125,"line_start":961,"line_end":961,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3458},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172303,"byte_end":172322,"line_start":1018,"line_end":1018,"column_start":8,"column_end":27},"name":"for_each_concurrent","qualname":"::stream::stream::StreamExt::for_each_concurrent","value":"pub fn for_each_concurrent<Fut, F,\n                           impl Into<Option<usize>>: Into<Option<usize>>>(Self,\n                                                                          impl Into<Option<usize>>,\n                                                                          F)\n-> ForEachConcurrent<Self, Fut, F> where F: FnMut(Self::Item) -> Fut,\nFut: Future<Output = ()>, Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Runs this stream to completion, executing the provided asynchronous\n closure for each element on the stream concurrently as elements become\n available.","sig":null,"attributes":[{"value":"/ Runs this stream to completion, executing the provided asynchronous","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":170360,"byte_end":170431,"line_start":971,"line_end":971,"column_start":5,"column_end":76}},{"value":"/ closure for each element on the stream concurrently as elements become","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":170436,"byte_end":170510,"line_start":972,"line_end":972,"column_start":5,"column_end":79}},{"value":"/ available.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":170515,"byte_end":170529,"line_start":973,"line_end":973,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":170534,"byte_end":170537,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ This is similar to [`StreamExt::for_each`], but the futures","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":170542,"byte_end":170605,"line_start":975,"line_end":975,"column_start":5,"column_end":68}},{"value":"/ produced by the closure are run concurrently (but not in parallel--","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":170610,"byte_end":170681,"line_start":976,"line_end":976,"column_start":5,"column_end":76}},{"value":"/ this combinator does not introduce any threads).","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":170686,"byte_end":170738,"line_start":977,"line_end":977,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":170743,"byte_end":170746,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ The closure provided will be called for each item this stream produces,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":170751,"byte_end":170826,"line_start":979,"line_end":979,"column_start":5,"column_end":80}},{"value":"/ yielding a future. That future will then be executed to completion","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":170831,"byte_end":170901,"line_start":980,"line_end":980,"column_start":5,"column_end":75}},{"value":"/ concurrently with the other futures produced by the closure.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":170906,"byte_end":170970,"line_start":981,"line_end":981,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":170975,"byte_end":170978,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ The first argument is an optional limit on the number of concurrent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":170983,"byte_end":171054,"line_start":983,"line_end":983,"column_start":5,"column_end":76}},{"value":"/ futures. If this limit is not `None`, no more than `limit` futures","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171059,"byte_end":171129,"line_start":984,"line_end":984,"column_start":5,"column_end":75}},{"value":"/ will be run concurrently. The `limit` argument is of type","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171134,"byte_end":171195,"line_start":985,"line_end":985,"column_start":5,"column_end":66}},{"value":"/ `Into<Option<usize>>`, and so can be provided as either `None`,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171200,"byte_end":171267,"line_start":986,"line_end":986,"column_start":5,"column_end":72}},{"value":"/ `Some(10)`, or just `10`. Note: a limit of zero is interpreted as","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171272,"byte_end":171341,"line_start":987,"line_end":987,"column_start":5,"column_end":74}},{"value":"/ no limit at all, and will have the same result as passing in `None`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171346,"byte_end":171418,"line_start":988,"line_end":988,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171423,"byte_end":171426,"line_start":989,"line_end":989,"column_start":5,"column_end":8}},{"value":"/ This method is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171431,"byte_end":171506,"line_start":990,"line_end":990,"column_start":5,"column_end":80}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171511,"byte_end":171568,"line_start":991,"line_end":991,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171573,"byte_end":171576,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171581,"byte_end":171595,"line_start":993,"line_end":993,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171600,"byte_end":171603,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171608,"byte_end":171615,"line_start":995,"line_end":995,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171620,"byte_end":171661,"line_start":996,"line_end":996,"column_start":5,"column_end":46}},{"value":"/ use futures::channel::oneshot;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171666,"byte_end":171700,"line_start":997,"line_end":997,"column_start":5,"column_end":39}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171705,"byte_end":171748,"line_start":998,"line_end":998,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171753,"byte_end":171756,"line_start":999,"line_end":999,"column_start":5,"column_end":8}},{"value":"/ let (tx1, rx1) = oneshot::channel();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171761,"byte_end":171801,"line_start":1000,"line_end":1000,"column_start":5,"column_end":45}},{"value":"/ let (tx2, rx2) = oneshot::channel();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171806,"byte_end":171846,"line_start":1001,"line_end":1001,"column_start":5,"column_end":45}},{"value":"/ let (tx3, rx3) = oneshot::channel();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171851,"byte_end":171891,"line_start":1002,"line_end":1002,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171896,"byte_end":171899,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ let fut = stream::iter(vec![rx1, rx2, rx3]).for_each_concurrent(","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171904,"byte_end":171972,"line_start":1004,"line_end":1004,"column_start":5,"column_end":73}},{"value":"/     /* limit */ 2,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":171977,"byte_end":171999,"line_start":1005,"line_end":1005,"column_start":5,"column_end":27}},{"value":"/     |rx| async move {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172004,"byte_end":172029,"line_start":1006,"line_end":1006,"column_start":5,"column_end":30}},{"value":"/         rx.await.unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172034,"byte_end":172064,"line_start":1007,"line_end":1007,"column_start":5,"column_end":35}},{"value":"/     }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172069,"byte_end":172078,"line_start":1008,"line_end":1008,"column_start":5,"column_end":14}},{"value":"/ );","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172083,"byte_end":172089,"line_start":1009,"line_end":1009,"column_start":5,"column_end":11}},{"value":"/ tx1.send(()).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172094,"byte_end":172120,"line_start":1010,"line_end":1010,"column_start":5,"column_end":31}},{"value":"/ tx2.send(()).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172125,"byte_end":172151,"line_start":1011,"line_end":1011,"column_start":5,"column_end":31}},{"value":"/ tx3.send(()).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172156,"byte_end":172182,"line_start":1012,"line_end":1012,"column_start":5,"column_end":31}},{"value":"/ fut.await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172187,"byte_end":172201,"line_start":1013,"line_end":1013,"column_start":5,"column_end":19}},{"value":"/ # })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172206,"byte_end":172214,"line_start":1014,"line_end":1014,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172219,"byte_end":172226,"line_start":1015,"line_end":1015,"column_start":5,"column_end":12}},{"value":"cfg(not(futures_no_atomic_cas))","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172231,"byte_end":172265,"line_start":1016,"line_end":1016,"column_start":5,"column_end":39}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172270,"byte_end":172295,"line_start":1017,"line_end":1017,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3462},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173147,"byte_end":173151,"line_start":1047,"line_end":1047,"column_start":8,"column_end":12},"name":"take","qualname":"::stream::stream::StreamExt::take","value":"pub fn take(Self, usize) -> Take<Self> where Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Creates a new stream of at most `n` items of the underlying stream.","sig":null,"attributes":[{"value":"/ Creates a new stream of at most `n` items of the underlying stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172639,"byte_end":172710,"line_start":1031,"line_end":1031,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172715,"byte_end":172718,"line_start":1032,"line_end":1032,"column_start":5,"column_end":8}},{"value":"/ Once `n` items have been yielded from this stream then it will always","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172723,"byte_end":172796,"line_start":1033,"line_end":1033,"column_start":5,"column_end":78}},{"value":"/ return that the stream is done.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172801,"byte_end":172836,"line_start":1034,"line_end":1034,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172841,"byte_end":172844,"line_start":1035,"line_end":1035,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172849,"byte_end":172863,"line_start":1036,"line_end":1036,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172868,"byte_end":172871,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172876,"byte_end":172883,"line_start":1038,"line_end":1038,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172888,"byte_end":172929,"line_start":1039,"line_end":1039,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172934,"byte_end":172977,"line_start":1040,"line_end":1040,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172982,"byte_end":172985,"line_start":1041,"line_end":1041,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(1..=10).take(3);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":172990,"byte_end":173036,"line_start":1042,"line_end":1042,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173041,"byte_end":173044,"line_start":1043,"line_end":1043,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec![1, 2, 3], stream.collect::<Vec<_>>().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173049,"byte_end":173113,"line_start":1044,"line_end":1044,"column_start":5,"column_end":69}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173118,"byte_end":173127,"line_start":1045,"line_end":1045,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173132,"byte_end":173139,"line_start":1046,"line_end":1046,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3463},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173816,"byte_end":173820,"line_start":1070,"line_end":1070,"column_start":8,"column_end":12},"name":"skip","qualname":"::stream::stream::StreamExt::skip","value":"pub fn skip(Self, usize) -> Skip<Self> where Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Creates a new stream which skips `n` items of the underlying stream.","sig":null,"attributes":[{"value":"/ Creates a new stream which skips `n` items of the underlying stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173289,"byte_end":173361,"line_start":1054,"line_end":1054,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173366,"byte_end":173369,"line_start":1055,"line_end":1055,"column_start":5,"column_end":8}},{"value":"/ Once `n` items have been skipped from this stream then it will always","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173374,"byte_end":173447,"line_start":1056,"line_end":1056,"column_start":5,"column_end":78}},{"value":"/ return the remaining items on this stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173452,"byte_end":173498,"line_start":1057,"line_end":1057,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173503,"byte_end":173506,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173511,"byte_end":173525,"line_start":1059,"line_end":1059,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173530,"byte_end":173533,"line_start":1060,"line_end":1060,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173538,"byte_end":173545,"line_start":1061,"line_end":1061,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173550,"byte_end":173591,"line_start":1062,"line_end":1062,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173596,"byte_end":173639,"line_start":1063,"line_end":1063,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173644,"byte_end":173647,"line_start":1064,"line_end":1064,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(1..=10).skip(5);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173652,"byte_end":173698,"line_start":1065,"line_end":1065,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173703,"byte_end":173706,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec![6, 7, 8, 9, 10], stream.collect::<Vec<_>>().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173711,"byte_end":173782,"line_start":1067,"line_end":1067,"column_start":5,"column_end":76}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173787,"byte_end":173796,"line_start":1068,"line_end":1068,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173801,"byte_end":173808,"line_start":1069,"line_end":1069,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3464},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175441,"byte_end":175445,"line_start":1116,"line_end":1116,"column_start":8,"column_end":12},"name":"fuse","qualname":"::stream::stream::StreamExt::fuse","value":"pub fn fuse(Self) -> Fuse<Self> where Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Fuse a stream such that [`poll_next`](Stream::poll_next) will never\n again be called once it has finished. This method can be used to turn\n any `Stream` into a `FusedStream`.","sig":null,"attributes":[{"value":"/ Fuse a stream such that [`poll_next`](Stream::poll_next) will never","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":173958,"byte_end":174029,"line_start":1077,"line_end":1077,"column_start":5,"column_end":76}},{"value":"/ again be called once it has finished. This method can be used to turn","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174034,"byte_end":174107,"line_start":1078,"line_end":1078,"column_start":5,"column_end":78}},{"value":"/ any `Stream` into a `FusedStream`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174112,"byte_end":174150,"line_start":1079,"line_end":1079,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174155,"byte_end":174158,"line_start":1080,"line_end":1080,"column_start":5,"column_end":8}},{"value":"/ Normally, once a stream has returned [`None`] from","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174163,"byte_end":174217,"line_start":1081,"line_end":1081,"column_start":5,"column_end":59}},{"value":"/ [`poll_next`](Stream::poll_next) any further calls could exhibit bad","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174222,"byte_end":174294,"line_start":1082,"line_end":1082,"column_start":5,"column_end":77}},{"value":"/ behavior such as block forever, panic, never return, etc. If it is known","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174299,"byte_end":174375,"line_start":1083,"line_end":1083,"column_start":5,"column_end":81}},{"value":"/ that [`poll_next`](Stream::poll_next) may be called after stream","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174380,"byte_end":174448,"line_start":1084,"line_end":1084,"column_start":5,"column_end":73}},{"value":"/ has already finished, then this method can be used to ensure that it has","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174453,"byte_end":174529,"line_start":1085,"line_end":1085,"column_start":5,"column_end":81}},{"value":"/ defined semantics.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174534,"byte_end":174556,"line_start":1086,"line_end":1086,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174561,"byte_end":174564,"line_start":1087,"line_end":1087,"column_start":5,"column_end":8}},{"value":"/ The [`poll_next`](Stream::poll_next) method of a `fuse`d stream","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174569,"byte_end":174636,"line_start":1088,"line_end":1088,"column_start":5,"column_end":72}},{"value":"/ is guaranteed to return [`None`] after the underlying stream has","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174641,"byte_end":174709,"line_start":1089,"line_end":1089,"column_start":5,"column_end":73}},{"value":"/ finished.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174714,"byte_end":174727,"line_start":1090,"line_end":1090,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174732,"byte_end":174735,"line_start":1091,"line_end":1091,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174740,"byte_end":174754,"line_start":1092,"line_end":1092,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174759,"byte_end":174762,"line_start":1093,"line_end":1093,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174767,"byte_end":174774,"line_start":1094,"line_end":1094,"column_start":5,"column_end":12}},{"value":"/ use futures::executor::block_on_stream;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174779,"byte_end":174822,"line_start":1095,"line_end":1095,"column_start":5,"column_end":48}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174827,"byte_end":174870,"line_start":1096,"line_end":1096,"column_start":5,"column_end":48}},{"value":"/ use futures::task::Poll;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174875,"byte_end":174903,"line_start":1097,"line_end":1097,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174908,"byte_end":174911,"line_start":1098,"line_end":1098,"column_start":5,"column_end":8}},{"value":"/ let mut x = 0;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174916,"byte_end":174934,"line_start":1099,"line_end":1099,"column_start":5,"column_end":23}},{"value":"/ let stream = stream::poll_fn(|_| {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174939,"byte_end":174977,"line_start":1100,"line_end":1100,"column_start":5,"column_end":43}},{"value":"/     x += 1;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":174982,"byte_end":174997,"line_start":1101,"line_end":1101,"column_start":5,"column_end":20}},{"value":"/     match x {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175002,"byte_end":175019,"line_start":1102,"line_end":1102,"column_start":5,"column_end":22}},{"value":"/         0..=2 => Poll::Ready(Some(x)),","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175024,"byte_end":175066,"line_start":1103,"line_end":1103,"column_start":5,"column_end":47}},{"value":"/         3 => Poll::Ready(None),","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175071,"byte_end":175106,"line_start":1104,"line_end":1104,"column_start":5,"column_end":40}},{"value":"/         _ => panic!(\"should not happen\")","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175111,"byte_end":175155,"line_start":1105,"line_end":1105,"column_start":5,"column_end":49}},{"value":"/     }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175160,"byte_end":175169,"line_start":1106,"line_end":1106,"column_start":5,"column_end":14}},{"value":"/ }).fuse();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175174,"byte_end":175188,"line_start":1107,"line_end":1107,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175193,"byte_end":175196,"line_start":1108,"line_end":1108,"column_start":5,"column_end":8}},{"value":"/ let mut iter = block_on_stream(stream);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175201,"byte_end":175244,"line_start":1109,"line_end":1109,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some(1), iter.next());","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175249,"byte_end":175286,"line_start":1110,"line_end":1110,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(Some(2), iter.next());","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175291,"byte_end":175328,"line_start":1111,"line_end":1111,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(None, iter.next());","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175333,"byte_end":175367,"line_start":1112,"line_end":1112,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(None, iter.next());","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175372,"byte_end":175406,"line_start":1113,"line_end":1113,"column_start":5,"column_end":39}},{"value":"/ // ...","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175411,"byte_end":175421,"line_start":1114,"line_end":1114,"column_start":5,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175426,"byte_end":175433,"line_start":1115,"line_end":1115,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3465},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":176374,"byte_end":176380,"line_start":1149,"line_end":1149,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::stream::stream::StreamExt::by_ref","value":"pub fn by_ref(&mut Self) -> &mut Self","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Borrows a stream, rather than consuming it.","sig":null,"attributes":[{"value":"/ Borrows a stream, rather than consuming it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175570,"byte_end":175617,"line_start":1123,"line_end":1123,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175622,"byte_end":175625,"line_start":1124,"line_end":1124,"column_start":5,"column_end":8}},{"value":"/ This is useful to allow applying stream adaptors while still retaining","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175630,"byte_end":175704,"line_start":1125,"line_end":1125,"column_start":5,"column_end":79}},{"value":"/ ownership of the original stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175709,"byte_end":175746,"line_start":1126,"line_end":1126,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175751,"byte_end":175754,"line_start":1127,"line_end":1127,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175759,"byte_end":175773,"line_start":1128,"line_end":1128,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175778,"byte_end":175781,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175786,"byte_end":175793,"line_start":1130,"line_end":1130,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175798,"byte_end":175839,"line_start":1131,"line_end":1131,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175844,"byte_end":175887,"line_start":1132,"line_end":1132,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175892,"byte_end":175895,"line_start":1133,"line_end":1133,"column_start":5,"column_end":8}},{"value":"/ let mut stream = stream::iter(1..5);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175900,"byte_end":175940,"line_start":1134,"line_end":1134,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175945,"byte_end":175948,"line_start":1135,"line_end":1135,"column_start":5,"column_end":8}},{"value":"/ let sum = stream.by_ref()","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175953,"byte_end":175982,"line_start":1136,"line_end":1136,"column_start":5,"column_end":34}},{"value":"/                 .take(2)","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":175987,"byte_end":176015,"line_start":1137,"line_end":1137,"column_start":5,"column_end":33}},{"value":"/                 .fold(0, |a, b| async move { a + b })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":176020,"byte_end":176077,"line_start":1138,"line_end":1138,"column_start":5,"column_end":62}},{"value":"/                 .await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":176082,"byte_end":176109,"line_start":1139,"line_end":1139,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(sum, 3);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":176114,"byte_end":176137,"line_start":1140,"line_end":1140,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":176142,"byte_end":176145,"line_start":1141,"line_end":1141,"column_start":5,"column_end":8}},{"value":"/ // You can use the stream again","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":176150,"byte_end":176185,"line_start":1142,"line_end":1142,"column_start":5,"column_end":40}},{"value":"/ let sum = stream.take(2)","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":176190,"byte_end":176218,"line_start":1143,"line_end":1143,"column_start":5,"column_end":33}},{"value":"/                 .fold(0, |a, b| async move { a + b })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":176223,"byte_end":176280,"line_start":1144,"line_end":1144,"column_start":5,"column_end":62}},{"value":"/                 .await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":176285,"byte_end":176312,"line_start":1145,"line_end":1145,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(sum, 7);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":176317,"byte_end":176340,"line_start":1146,"line_end":1146,"column_start":5,"column_end":28}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":176345,"byte_end":176354,"line_start":1147,"line_end":1147,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":176359,"byte_end":176366,"line_start":1148,"line_end":1148,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3466},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":178527,"byte_end":178532,"line_start":1206,"line_end":1206,"column_start":8,"column_end":13},"name":"boxed","qualname":"::stream::stream::StreamExt::boxed","value":"pub fn boxed<'a>(Self) -> BoxStream where Self: Sized + Send + 'a","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Wrap the stream in a Box, pinning it.","sig":null,"attributes":[{"value":"/ Wrap the stream in a Box, pinning it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":178298,"byte_end":178339,"line_start":1201,"line_end":1201,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":178344,"byte_end":178347,"line_start":1202,"line_end":1202,"column_start":5,"column_end":8}},{"value":"/ This method is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":178352,"byte_end":178427,"line_start":1203,"line_end":1203,"column_start":5,"column_end":80}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":178432,"byte_end":178489,"line_start":1204,"line_end":1204,"column_start":5,"column_end":62}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":178494,"byte_end":178519,"line_start":1205,"line_end":1205,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3468},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":178988,"byte_end":178999,"line_start":1220,"line_end":1220,"column_start":8,"column_end":19},"name":"boxed_local","qualname":"::stream::stream::StreamExt::boxed_local","value":"pub fn boxed_local<'a>(Self) -> LocalBoxStream where Self: Sized + 'a","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Wrap the stream in a Box, pinning it.","sig":null,"attributes":[{"value":"/ Wrap the stream in a Box, pinning it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":178687,"byte_end":178728,"line_start":1213,"line_end":1213,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":178733,"byte_end":178736,"line_start":1214,"line_end":1214,"column_start":5,"column_end":8}},{"value":"/ Similar to `boxed`, but without the `Send` requirement.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":178741,"byte_end":178800,"line_start":1215,"line_end":1215,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":178805,"byte_end":178808,"line_start":1216,"line_end":1216,"column_start":5,"column_end":8}},{"value":"/ This method is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":178813,"byte_end":178888,"line_start":1217,"line_end":1217,"column_start":5,"column_end":80}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":178893,"byte_end":178950,"line_start":1218,"line_end":1218,"column_start":5,"column_end":62}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":178955,"byte_end":178980,"line_start":1219,"line_end":1219,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3470},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":179892,"byte_end":179900,"line_start":1241,"line_end":1241,"column_start":8,"column_end":16},"name":"buffered","qualname":"::stream::stream::StreamExt::buffered","value":"pub fn buffered(Self, usize) -> Buffered<Self> where Self::Item: Future,\nSelf: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" An adaptor for creating a buffered list of pending futures.","sig":null,"attributes":[{"value":"/ An adaptor for creating a buffered list of pending futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":179152,"byte_end":179215,"line_start":1227,"line_end":1227,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":179220,"byte_end":179223,"line_start":1228,"line_end":1228,"column_start":5,"column_end":8}},{"value":"/ If this stream's item can be converted into a future, then this adaptor","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":179228,"byte_end":179303,"line_start":1229,"line_end":1229,"column_start":5,"column_end":80}},{"value":"/ will buffer up to at most `n` futures and then return the outputs in the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":179308,"byte_end":179384,"line_start":1230,"line_end":1230,"column_start":5,"column_end":81}},{"value":"/ same order as the underlying stream. No more than `n` futures will be","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":179389,"byte_end":179462,"line_start":1231,"line_end":1231,"column_start":5,"column_end":78}},{"value":"/ buffered at any point in time, and less than `n` may also be buffered","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":179467,"byte_end":179540,"line_start":1232,"line_end":1232,"column_start":5,"column_end":78}},{"value":"/ depending on the state of each future.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":179545,"byte_end":179587,"line_start":1233,"line_end":1233,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":179592,"byte_end":179595,"line_start":1234,"line_end":1234,"column_start":5,"column_end":8}},{"value":"/ The returned stream will be a stream of each future's output.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":179600,"byte_end":179665,"line_start":1235,"line_end":1235,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":179670,"byte_end":179673,"line_start":1236,"line_end":1236,"column_start":5,"column_end":8}},{"value":"/ This method is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":179678,"byte_end":179753,"line_start":1237,"line_end":1237,"column_start":5,"column_end":80}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":179758,"byte_end":179815,"line_start":1238,"line_end":1238,"column_start":5,"column_end":62}},{"value":"cfg(not(futures_no_atomic_cas))","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":179820,"byte_end":179854,"line_start":1239,"line_end":1239,"column_start":5,"column_end":39}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":179859,"byte_end":179884,"line_start":1240,"line_end":1240,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3471},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":181580,"byte_end":181596,"line_start":1286,"line_end":1286,"column_start":8,"column_end":24},"name":"buffer_unordered","qualname":"::stream::stream::StreamExt::buffer_unordered","value":"pub fn buffer_unordered(Self, usize) -> BufferUnordered<Self> where\nSelf::Item: Future, Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" An adaptor for creating a buffered list of pending futures (unordered).","sig":null,"attributes":[{"value":"/ An adaptor for creating a buffered list of pending futures (unordered).","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":180094,"byte_end":180169,"line_start":1249,"line_end":1249,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":180174,"byte_end":180177,"line_start":1250,"line_end":1250,"column_start":5,"column_end":8}},{"value":"/ If this stream's item can be converted into a future, then this adaptor","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":180182,"byte_end":180257,"line_start":1251,"line_end":1251,"column_start":5,"column_end":80}},{"value":"/ will buffer up to `n` futures and then return the outputs in the order","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":180262,"byte_end":180336,"line_start":1252,"line_end":1252,"column_start":5,"column_end":79}},{"value":"/ in which they complete. No more than `n` futures will be buffered at","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":180341,"byte_end":180413,"line_start":1253,"line_end":1253,"column_start":5,"column_end":77}},{"value":"/ any point in time, and less than `n` may also be buffered depending on","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":180418,"byte_end":180492,"line_start":1254,"line_end":1254,"column_start":5,"column_end":79}},{"value":"/ the state of each future.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":180497,"byte_end":180526,"line_start":1255,"line_end":1255,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":180531,"byte_end":180534,"line_start":1256,"line_end":1256,"column_start":5,"column_end":8}},{"value":"/ The returned stream will be a stream of each future's output.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":180539,"byte_end":180604,"line_start":1257,"line_end":1257,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":180609,"byte_end":180612,"line_start":1258,"line_end":1258,"column_start":5,"column_end":8}},{"value":"/ This method is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":180617,"byte_end":180692,"line_start":1259,"line_end":1259,"column_start":5,"column_end":80}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":180697,"byte_end":180754,"line_start":1260,"line_end":1260,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":180759,"byte_end":180762,"line_start":1261,"line_end":1261,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":180767,"byte_end":180781,"line_start":1262,"line_end":1262,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":180786,"byte_end":180789,"line_start":1263,"line_end":1263,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":180794,"byte_end":180801,"line_start":1264,"line_end":1264,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":180806,"byte_end":180847,"line_start":1265,"line_end":1265,"column_start":5,"column_end":46}},{"value":"/ use futures::channel::oneshot;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":180852,"byte_end":180886,"line_start":1266,"line_end":1266,"column_start":5,"column_end":39}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":180891,"byte_end":180934,"line_start":1267,"line_end":1267,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":180939,"byte_end":180942,"line_start":1268,"line_end":1268,"column_start":5,"column_end":8}},{"value":"/ let (send_one, recv_one) = oneshot::channel();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":180947,"byte_end":180997,"line_start":1269,"line_end":1269,"column_start":5,"column_end":55}},{"value":"/ let (send_two, recv_two) = oneshot::channel();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":181002,"byte_end":181052,"line_start":1270,"line_end":1270,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":181057,"byte_end":181060,"line_start":1271,"line_end":1271,"column_start":5,"column_end":8}},{"value":"/ let stream_of_futures = stream::iter(vec![recv_one, recv_two]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":181065,"byte_end":181132,"line_start":1272,"line_end":1272,"column_start":5,"column_end":72}},{"value":"/ let mut buffered = stream_of_futures.buffer_unordered(10);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":181137,"byte_end":181199,"line_start":1273,"line_end":1273,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":181204,"byte_end":181207,"line_start":1274,"line_end":1274,"column_start":5,"column_end":8}},{"value":"/ send_two.send(2i32)?;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":181212,"byte_end":181237,"line_start":1275,"line_end":1275,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(buffered.next().await, Some(Ok(2i32)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":181242,"byte_end":181296,"line_start":1276,"line_end":1276,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":181301,"byte_end":181304,"line_start":1277,"line_end":1277,"column_start":5,"column_end":8}},{"value":"/ send_one.send(1i32)?;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":181309,"byte_end":181334,"line_start":1278,"line_end":1278,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(buffered.next().await, Some(Ok(1i32)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":181339,"byte_end":181393,"line_start":1279,"line_end":1279,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":181398,"byte_end":181401,"line_start":1280,"line_end":1280,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffered.next().await, None);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":181406,"byte_end":181450,"line_start":1281,"line_end":1281,"column_start":5,"column_end":49}},{"value":"/ # Ok::<(), i32>(()) }).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":181455,"byte_end":181491,"line_start":1282,"line_end":1282,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":181496,"byte_end":181503,"line_start":1283,"line_end":1283,"column_start":5,"column_end":12}},{"value":"cfg(not(futures_no_atomic_cas))","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":181508,"byte_end":181542,"line_start":1284,"line_end":1284,"column_start":5,"column_end":39}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":181547,"byte_end":181572,"line_start":1285,"line_end":1285,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3472},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182492,"byte_end":182495,"line_start":1316,"line_end":1316,"column_start":8,"column_end":11},"name":"zip","qualname":"::stream::stream::StreamExt::zip","value":"pub fn zip<St>(Self, St) -> Zip<Self, St> where St: Stream, Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" An adapter for zipping two streams together.","sig":null,"attributes":[{"value":"/ An adapter for zipping two streams together.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":181804,"byte_end":181852,"line_start":1294,"line_end":1294,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":181857,"byte_end":181860,"line_start":1295,"line_end":1295,"column_start":5,"column_end":8}},{"value":"/ The zipped stream waits for both streams to produce an item, and then","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":181865,"byte_end":181938,"line_start":1296,"line_end":1296,"column_start":5,"column_end":78}},{"value":"/ returns that pair. If either stream ends then the zipped stream will","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":181943,"byte_end":182015,"line_start":1297,"line_end":1297,"column_start":5,"column_end":77}},{"value":"/ also end.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182020,"byte_end":182033,"line_start":1298,"line_end":1298,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182038,"byte_end":182041,"line_start":1299,"line_end":1299,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182046,"byte_end":182060,"line_start":1300,"line_end":1300,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182065,"byte_end":182068,"line_start":1301,"line_end":1301,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182073,"byte_end":182080,"line_start":1302,"line_end":1302,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182085,"byte_end":182126,"line_start":1303,"line_end":1303,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182131,"byte_end":182174,"line_start":1304,"line_end":1304,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182179,"byte_end":182182,"line_start":1305,"line_end":1305,"column_start":5,"column_end":8}},{"value":"/ let stream1 = stream::iter(1..=3);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182187,"byte_end":182225,"line_start":1306,"line_end":1306,"column_start":5,"column_end":43}},{"value":"/ let stream2 = stream::iter(5..=10);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182230,"byte_end":182269,"line_start":1307,"line_end":1307,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182274,"byte_end":182277,"line_start":1308,"line_end":1308,"column_start":5,"column_end":8}},{"value":"/ let vec = stream1.zip(stream2)","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182282,"byte_end":182316,"line_start":1309,"line_end":1309,"column_start":5,"column_end":39}},{"value":"/                  .collect::<Vec<_>>()","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182321,"byte_end":182362,"line_start":1310,"line_end":1310,"column_start":5,"column_end":46}},{"value":"/                  .await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182367,"byte_end":182395,"line_start":1311,"line_end":1311,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(vec![(1, 5), (2, 6), (3, 7)], vec);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182400,"byte_end":182450,"line_start":1312,"line_end":1312,"column_start":5,"column_end":55}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182455,"byte_end":182464,"line_start":1313,"line_end":1313,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182469,"byte_end":182476,"line_start":1314,"line_end":1314,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182481,"byte_end":182484,"line_start":1315,"line_end":1315,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":3474},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183403,"byte_end":183408,"line_start":1347,"line_end":1347,"column_start":8,"column_end":13},"name":"chain","qualname":"::stream::stream::StreamExt::chain","value":"pub fn chain<St>(Self, St) -> Chain<Self, St> where St: Stream<Item =\nSelf::Item>, Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Adapter for chaining two streams.","sig":null,"attributes":[{"value":"/ Adapter for chaining two streams.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182676,"byte_end":182713,"line_start":1324,"line_end":1324,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182718,"byte_end":182721,"line_start":1325,"line_end":1325,"column_start":5,"column_end":8}},{"value":"/ The resulting stream emits elements from the first stream, and when","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182726,"byte_end":182797,"line_start":1326,"line_end":1326,"column_start":5,"column_end":76}},{"value":"/ first stream reaches the end, emits the elements from the second stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182802,"byte_end":182878,"line_start":1327,"line_end":1327,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182883,"byte_end":182886,"line_start":1328,"line_end":1328,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182891,"byte_end":182898,"line_start":1329,"line_end":1329,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182903,"byte_end":182944,"line_start":1330,"line_end":1330,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182949,"byte_end":182992,"line_start":1331,"line_end":1331,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":182997,"byte_end":183000,"line_start":1332,"line_end":1332,"column_start":5,"column_end":8}},{"value":"/ let stream1 = stream::iter(vec![Ok(10), Err(false)]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183005,"byte_end":183062,"line_start":1333,"line_end":1333,"column_start":5,"column_end":62}},{"value":"/ let stream2 = stream::iter(vec![Err(true), Ok(20)]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183067,"byte_end":183123,"line_start":1334,"line_end":1334,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183128,"byte_end":183131,"line_start":1335,"line_end":1335,"column_start":5,"column_end":8}},{"value":"/ let stream = stream1.chain(stream2);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183136,"byte_end":183176,"line_start":1336,"line_end":1336,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183181,"byte_end":183184,"line_start":1337,"line_end":1337,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = stream.collect().await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183189,"byte_end":183237,"line_start":1338,"line_end":1338,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(result, vec![","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183242,"byte_end":183270,"line_start":1339,"line_end":1339,"column_start":5,"column_end":33}},{"value":"/     Ok(10),","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183275,"byte_end":183290,"line_start":1340,"line_end":1340,"column_start":5,"column_end":20}},{"value":"/     Err(false),","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183295,"byte_end":183314,"line_start":1341,"line_end":1341,"column_start":5,"column_end":24}},{"value":"/     Err(true),","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183319,"byte_end":183337,"line_start":1342,"line_end":1342,"column_start":5,"column_end":23}},{"value":"/     Ok(20),","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183342,"byte_end":183357,"line_start":1343,"line_end":1343,"column_start":5,"column_end":20}},{"value":"/ ]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183362,"byte_end":183369,"line_start":1344,"line_end":1344,"column_start":5,"column_end":12}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183374,"byte_end":183383,"line_start":1345,"line_end":1345,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183388,"byte_end":183395,"line_start":1346,"line_end":1346,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3476},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183746,"byte_end":183754,"line_start":1358,"line_end":1358,"column_start":8,"column_end":16},"name":"peekable","qualname":"::stream::stream::StreamExt::peekable","value":"pub fn peekable(Self) -> Peekable<Self> where Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Creates a new stream which exposes a `peek` method.","sig":null,"attributes":[{"value":"/ Creates a new stream which exposes a `peek` method.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183600,"byte_end":183655,"line_start":1355,"line_end":1355,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183660,"byte_end":183663,"line_start":1356,"line_end":1356,"column_start":5,"column_end":8}},{"value":"/ Calling `peek` returns a reference to the next item in the stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183668,"byte_end":183738,"line_start":1357,"line_end":1357,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":3477},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":184789,"byte_end":184795,"line_start":1384,"line_end":1384,"column_start":8,"column_end":14},"name":"chunks","qualname":"::stream::stream::StreamExt::chunks","value":"pub fn chunks(Self, usize) -> Chunks<Self> where Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" An adaptor for chunking up items of the stream inside a vector.","sig":null,"attributes":[{"value":"/ An adaptor for chunking up items of the stream inside a vector.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183887,"byte_end":183954,"line_start":1365,"line_end":1365,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183959,"byte_end":183962,"line_start":1366,"line_end":1366,"column_start":5,"column_end":8}},{"value":"/ This combinator will attempt to pull items from this stream and buffer","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":183967,"byte_end":184041,"line_start":1367,"line_end":1367,"column_start":5,"column_end":79}},{"value":"/ them into a local vector. At most `capacity` items will get buffered","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":184046,"byte_end":184118,"line_start":1368,"line_end":1368,"column_start":5,"column_end":77}},{"value":"/ before they're yielded from the returned stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":184123,"byte_end":184175,"line_start":1369,"line_end":1369,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":184180,"byte_end":184183,"line_start":1370,"line_end":1370,"column_start":5,"column_end":8}},{"value":"/ Note that the vectors returned from this iterator may not always have","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":184188,"byte_end":184261,"line_start":1371,"line_end":1371,"column_start":5,"column_end":78}},{"value":"/ `capacity` elements. If the underlying stream ended and only a partial","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":184266,"byte_end":184340,"line_start":1372,"line_end":1372,"column_start":5,"column_end":79}},{"value":"/ vector was created, it'll be returned. Additionally if an error happens","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":184345,"byte_end":184420,"line_start":1373,"line_end":1373,"column_start":5,"column_end":80}},{"value":"/ from the underlying stream then the currently buffered items will be","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":184425,"byte_end":184497,"line_start":1374,"line_end":1374,"column_start":5,"column_end":77}},{"value":"/ yielded.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":184502,"byte_end":184514,"line_start":1375,"line_end":1375,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":184519,"byte_end":184522,"line_start":1376,"line_end":1376,"column_start":5,"column_end":8}},{"value":"/ This method is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":184527,"byte_end":184602,"line_start":1377,"line_end":1377,"column_start":5,"column_end":80}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":184607,"byte_end":184664,"line_start":1378,"line_end":1378,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":184669,"byte_end":184672,"line_start":1379,"line_end":1379,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":184677,"byte_end":184689,"line_start":1380,"line_end":1380,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":184694,"byte_end":184697,"line_start":1381,"line_end":1381,"column_start":5,"column_end":8}},{"value":"/ This method will panic if `capacity` is zero.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":184702,"byte_end":184751,"line_start":1382,"line_end":1382,"column_start":5,"column_end":54}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":184756,"byte_end":184781,"line_start":1383,"line_end":1383,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3478},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":185892,"byte_end":185904,"line_start":1410,"line_end":1410,"column_start":8,"column_end":20},"name":"ready_chunks","qualname":"::stream::stream::StreamExt::ready_chunks","value":"pub fn ready_chunks(Self, usize) -> ReadyChunks<Self> where Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" An adaptor for chunking up ready items of the stream inside a vector.","sig":null,"attributes":[{"value":"/ An adaptor for chunking up ready items of the stream inside a vector.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":184956,"byte_end":185029,"line_start":1391,"line_end":1391,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":185034,"byte_end":185037,"line_start":1392,"line_end":1392,"column_start":5,"column_end":8}},{"value":"/ This combinator will attempt to pull ready items from this stream and","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":185042,"byte_end":185115,"line_start":1393,"line_end":1393,"column_start":5,"column_end":78}},{"value":"/ buffer them into a local vector. At most `capacity` items will get","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":185120,"byte_end":185190,"line_start":1394,"line_end":1394,"column_start":5,"column_end":75}},{"value":"/ buffered before they're yielded from the returned stream. If underlying","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":185195,"byte_end":185270,"line_start":1395,"line_end":1395,"column_start":5,"column_end":80}},{"value":"/ stream returns `Poll::Pending`, and collected chunk is not empty, it will","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":185275,"byte_end":185352,"line_start":1396,"line_end":1396,"column_start":5,"column_end":82}},{"value":"/ be immediately returned.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":185357,"byte_end":185385,"line_start":1397,"line_end":1397,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":185390,"byte_end":185393,"line_start":1398,"line_end":1398,"column_start":5,"column_end":8}},{"value":"/ If the underlying stream ended and only a partial vector was created,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":185398,"byte_end":185471,"line_start":1399,"line_end":1399,"column_start":5,"column_end":78}},{"value":"/ it'll be returned. Additionally if an error happens from the underlying","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":185476,"byte_end":185551,"line_start":1400,"line_end":1400,"column_start":5,"column_end":80}},{"value":"/ stream then the currently buffered items will be yielded.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":185556,"byte_end":185617,"line_start":1401,"line_end":1401,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":185622,"byte_end":185625,"line_start":1402,"line_end":1402,"column_start":5,"column_end":8}},{"value":"/ This method is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":185630,"byte_end":185705,"line_start":1403,"line_end":1403,"column_start":5,"column_end":80}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":185710,"byte_end":185767,"line_start":1404,"line_end":1404,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":185772,"byte_end":185775,"line_start":1405,"line_end":1405,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":185780,"byte_end":185792,"line_start":1406,"line_end":1406,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":185797,"byte_end":185800,"line_start":1407,"line_end":1407,"column_start":5,"column_end":8}},{"value":"/ This method will panic if `capacity` is zero.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":185805,"byte_end":185854,"line_start":1408,"line_end":1408,"column_start":5,"column_end":54}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":185859,"byte_end":185884,"line_start":1409,"line_end":1409,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3479},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":188701,"byte_end":188708,"line_start":1470,"line_end":1470,"column_start":8,"column_end":15},"name":"inspect","qualname":"::stream::stream::StreamExt::inspect","value":"pub fn inspect<F>(Self, F) -> Inspect<Self, F> where F: FnMut(&Self::Item) ->\n(), Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Do something with each item of this stream, afterwards passing it on.","sig":null,"attributes":[{"value":"/ Do something with each item of this stream, afterwards passing it on.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":188398,"byte_end":188471,"line_start":1465,"line_end":1465,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":188476,"byte_end":188479,"line_start":1466,"line_end":1466,"column_start":5,"column_end":8}},{"value":"/ This is similar to the `Iterator::inspect` method in the standard","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":188484,"byte_end":188553,"line_start":1467,"line_end":1467,"column_start":5,"column_end":74}},{"value":"/ library where it allows easily inspecting each value as it passes","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":188558,"byte_end":188627,"line_start":1468,"line_end":1468,"column_start":5,"column_end":74}},{"value":"/ through the stream, for example to debug what's going on.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":188632,"byte_end":188693,"line_start":1469,"line_end":1469,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3481},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":189164,"byte_end":189175,"line_start":1483,"line_end":1483,"column_start":8,"column_end":19},"name":"left_stream","qualname":"::stream::stream::StreamExt::left_stream","value":"pub fn left_stream<B>(Self) -> Either<Self, B> where B: Stream<Item =\nSelf::Item>, Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Wrap this stream in an `Either` stream, making it the left-hand variant\n of that `Either`.","sig":null,"attributes":[{"value":"/ Wrap this stream in an `Either` stream, making it the left-hand variant","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":188885,"byte_end":188960,"line_start":1478,"line_end":1478,"column_start":5,"column_end":80}},{"value":"/ of that `Either`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":188965,"byte_end":188986,"line_start":1479,"line_end":1479,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":188991,"byte_end":188994,"line_start":1480,"line_end":1480,"column_start":5,"column_end":8}},{"value":"/ This can be used in combination with the `right_stream` method to write `if`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":188999,"byte_end":189079,"line_start":1481,"line_end":1481,"column_start":5,"column_end":85}},{"value":"/ statements that evaluate to different streams in different branches.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":189084,"byte_end":189156,"line_start":1482,"line_end":1482,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3483},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":189628,"byte_end":189640,"line_start":1496,"line_end":1496,"column_start":8,"column_end":20},"name":"right_stream","qualname":"::stream::stream::StreamExt::right_stream","value":"pub fn right_stream<B>(Self) -> Either<B, Self> where B: Stream<Item =\nSelf::Item>, Self: Sized","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Wrap this stream in an `Either` stream, making it the right-hand variant\n of that `Either`.","sig":null,"attributes":[{"value":"/ Wrap this stream in an `Either` stream, making it the right-hand variant","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":189349,"byte_end":189425,"line_start":1491,"line_end":1491,"column_start":5,"column_end":81}},{"value":"/ of that `Either`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":189430,"byte_end":189451,"line_start":1492,"line_end":1492,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":189456,"byte_end":189459,"line_start":1493,"line_end":1493,"column_start":5,"column_end":8}},{"value":"/ This can be used in combination with the `left_stream` method to write `if`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":189464,"byte_end":189543,"line_start":1494,"line_end":1494,"column_start":5,"column_end":84}},{"value":"/ statements that evaluate to different streams in different branches.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":189548,"byte_end":189620,"line_start":1495,"line_end":1495,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3485},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":189916,"byte_end":189931,"line_start":1506,"line_end":1506,"column_start":8,"column_end":23},"name":"poll_next_unpin","qualname":"::stream::stream::StreamExt::poll_next_unpin","value":"pub fn poll_next_unpin(&mut Self, &mut Context) -> Poll<Option<Self::Item>>\nwhere Self: Unpin","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" A convenience method for calling [`Stream::poll_next`] on [`Unpin`]\n stream types.\n","sig":null,"attributes":[{"value":"/ A convenience method for calling [`Stream::poll_next`] on [`Unpin`]","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":189815,"byte_end":189886,"line_start":1504,"line_end":1504,"column_start":5,"column_end":76}},{"value":"/ stream types.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":189891,"byte_end":189908,"line_start":1505,"line_end":1505,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":3486},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":192032,"byte_end":192048,"line_start":1561,"line_end":1561,"column_start":8,"column_end":24},"name":"select_next_some","qualname":"::stream::stream::StreamExt::select_next_some","value":"pub fn select_next_some(&mut Self) -> SelectNextSome<, Self> where\nSelf: Unpin + FusedStream","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Returns a [`Future`] that resolves when the next item in this stream is\n ready.","sig":null,"attributes":[{"value":"/ Returns a [`Future`] that resolves when the next item in this stream is","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":190078,"byte_end":190153,"line_start":1513,"line_end":1513,"column_start":5,"column_end":80}},{"value":"/ ready.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":190158,"byte_end":190168,"line_start":1514,"line_end":1514,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":190173,"byte_end":190176,"line_start":1515,"line_end":1515,"column_start":5,"column_end":8}},{"value":"/ This is similar to the [`next`][StreamExt::next] method, but it won't","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":190181,"byte_end":190254,"line_start":1516,"line_end":1516,"column_start":5,"column_end":78}},{"value":"/ resolve to [`None`] if used on an empty [`Stream`]. Instead, the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":190259,"byte_end":190327,"line_start":1517,"line_end":1517,"column_start":5,"column_end":73}},{"value":"/ returned future type will return `true` from","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":190332,"byte_end":190380,"line_start":1518,"line_end":1518,"column_start":5,"column_end":53}},{"value":"/ [`FusedFuture::is_terminated`][] when the [`Stream`] is empty, allowing","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":190385,"byte_end":190460,"line_start":1519,"line_end":1519,"column_start":5,"column_end":80}},{"value":"/ [`select_next_some`][StreamExt::select_next_some] to be easily used with","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":190465,"byte_end":190541,"line_start":1520,"line_end":1520,"column_start":5,"column_end":81}},{"value":"/ the [`select!`] macro.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":190546,"byte_end":190572,"line_start":1521,"line_end":1521,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":190577,"byte_end":190580,"line_start":1522,"line_end":1522,"column_start":5,"column_end":8}},{"value":"/ If the future is polled after this [`Stream`] is empty it will panic.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":190585,"byte_end":190658,"line_start":1523,"line_end":1523,"column_start":5,"column_end":78}},{"value":"/ Using the future with a [`FusedFuture`][]-aware primitive like the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":190663,"byte_end":190733,"line_start":1524,"line_end":1524,"column_start":5,"column_end":75}},{"value":"/ [`select!`] macro will prevent this.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":190738,"byte_end":190778,"line_start":1525,"line_end":1525,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":190783,"byte_end":190786,"line_start":1526,"line_end":1526,"column_start":5,"column_end":8}},{"value":"/ [`FusedFuture`]: futures_core::future::FusedFuture","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":190791,"byte_end":190845,"line_start":1527,"line_end":1527,"column_start":5,"column_end":59}},{"value":"/ [`FusedFuture::is_terminated`]: futures_core::future::FusedFuture::is_terminated","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":190850,"byte_end":190934,"line_start":1528,"line_end":1528,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":190939,"byte_end":190942,"line_start":1529,"line_end":1529,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":190947,"byte_end":190961,"line_start":1530,"line_end":1530,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":190966,"byte_end":190969,"line_start":1531,"line_end":1531,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":190974,"byte_end":190981,"line_start":1532,"line_end":1532,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":190986,"byte_end":191027,"line_start":1533,"line_end":1533,"column_start":5,"column_end":46}},{"value":"/ use futures::{future, select};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191032,"byte_end":191066,"line_start":1534,"line_end":1534,"column_start":5,"column_end":39}},{"value":"/ use futures::stream::{StreamExt, FuturesUnordered};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191071,"byte_end":191126,"line_start":1535,"line_end":1535,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191131,"byte_end":191134,"line_start":1536,"line_end":1536,"column_start":5,"column_end":8}},{"value":"/ let mut fut = future::ready(1);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191139,"byte_end":191174,"line_start":1537,"line_end":1537,"column_start":5,"column_end":40}},{"value":"/ let mut async_tasks = FuturesUnordered::new();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191179,"byte_end":191229,"line_start":1538,"line_end":1538,"column_start":5,"column_end":55}},{"value":"/ let mut total = 0;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191234,"byte_end":191256,"line_start":1539,"line_end":1539,"column_start":5,"column_end":27}},{"value":"/ loop {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191261,"byte_end":191271,"line_start":1540,"line_end":1540,"column_start":5,"column_end":15}},{"value":"/     select! {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191276,"byte_end":191293,"line_start":1541,"line_end":1541,"column_start":5,"column_end":22}},{"value":"/         num = fut => {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191298,"byte_end":191324,"line_start":1542,"line_end":1542,"column_start":5,"column_end":31}},{"value":"/             // First, the `ready` future completes.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191329,"byte_end":191384,"line_start":1543,"line_end":1543,"column_start":5,"column_end":60}},{"value":"/             total += num;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191389,"byte_end":191418,"line_start":1544,"line_end":1544,"column_start":5,"column_end":34}},{"value":"/             // Then we spawn a new task onto `async_tasks`,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191423,"byte_end":191486,"line_start":1545,"line_end":1545,"column_start":5,"column_end":68}},{"value":"/             async_tasks.push(async { 5 });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191491,"byte_end":191537,"line_start":1546,"line_end":1546,"column_start":5,"column_end":51}},{"value":"/         },","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191542,"byte_end":191556,"line_start":1547,"line_end":1547,"column_start":5,"column_end":19}},{"value":"/         // On the next iteration of the loop, the task we spawned","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191561,"byte_end":191630,"line_start":1548,"line_end":1548,"column_start":5,"column_end":74}},{"value":"/         // completes.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191635,"byte_end":191660,"line_start":1549,"line_end":1549,"column_start":5,"column_end":30}},{"value":"/         num = async_tasks.select_next_some() => {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191665,"byte_end":191718,"line_start":1550,"line_end":1550,"column_start":5,"column_end":58}},{"value":"/             total += num;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191723,"byte_end":191752,"line_start":1551,"line_end":1551,"column_start":5,"column_end":34}},{"value":"/         }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191757,"byte_end":191770,"line_start":1552,"line_end":1552,"column_start":5,"column_end":18}},{"value":"/         // Finally, both the `ready` future and `async_tasks` have","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191775,"byte_end":191845,"line_start":1553,"line_end":1553,"column_start":5,"column_end":75}},{"value":"/         // finished, so we enter the `complete` branch.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191850,"byte_end":191909,"line_start":1554,"line_end":1554,"column_start":5,"column_end":64}},{"value":"/         complete => break,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191914,"byte_end":191944,"line_start":1555,"line_end":1555,"column_start":5,"column_end":35}},{"value":"/     }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191949,"byte_end":191958,"line_start":1556,"line_end":1556,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191963,"byte_end":191968,"line_start":1557,"line_end":1557,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(total, 6);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":191973,"byte_end":191998,"line_start":1558,"line_end":1558,"column_start":5,"column_end":30}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":192003,"byte_end":192012,"line_start":1559,"line_end":1559,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":192017,"byte_end":192024,"line_start":1560,"line_end":1560,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":10834},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/and_then.rs","byte_start":325163,"byte_end":325170,"line_start":14,"line_end":14,"column_start":16,"column_end":23},"name":"AndThen","qualname":"::stream::try_stream::and_then::AndThen","value":"AndThen {  }","parent":null,"children":[{"krate":0,"index":10838},{"krate":0,"index":10839},{"krate":0,"index":10840}],"decl_id":null,"docs":" Stream for the [`and_then`](super::TryStreamExt::and_then) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":10898},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":287172,"byte_end":287179,"line_start":30,"line_end":30,"column_start":5,"column_end":12},"name":"ErrInto","qualname":"::stream::try_stream::ErrInto","value":"ErrInto {  }","parent":null,"children":[{"krate":0,"index":10901}],"decl_id":null,"docs":" Stream for the [`err_into`](super::TryStreamExt::err_into) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":10967},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":287427,"byte_end":287436,"line_start":37,"line_end":37,"column_start":5,"column_end":14},"name":"InspectOk","qualname":"::stream::try_stream::InspectOk","value":"InspectOk {  }","parent":null,"children":[{"krate":0,"index":10970}],"decl_id":null,"docs":" Stream for the [`inspect_ok`](super::TryStreamExt::inspect_ok) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":11036},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":287737,"byte_end":287747,"line_start":44,"line_end":44,"column_start":5,"column_end":15},"name":"InspectErr","qualname":"::stream::try_stream::InspectErr","value":"InspectErr {  }","parent":null,"children":[{"krate":0,"index":11039}],"decl_id":null,"docs":" Stream for the [`inspect_err`](super::TryStreamExt::inspect_err) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":11107},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/into_stream.rs","byte_start":327912,"byte_end":327922,"line_start":12,"line_end":12,"column_start":16,"column_end":26},"name":"IntoStream","qualname":"::stream::try_stream::into_stream::IntoStream","value":"IntoStream {  }","parent":null,"children":[{"krate":0,"index":11109}],"decl_id":null,"docs":" Stream for the [`into_stream`](super::TryStreamExt::into_stream) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":11145},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":288173,"byte_end":288178,"line_start":55,"line_end":55,"column_start":5,"column_end":10},"name":"MapOk","qualname":"::stream::try_stream::MapOk","value":"MapOk {  }","parent":null,"children":[{"krate":0,"index":11148}],"decl_id":null,"docs":" Stream for the [`map_ok`](super::TryStreamExt::map_ok) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":11214},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":288455,"byte_end":288461,"line_start":62,"line_end":62,"column_start":5,"column_end":11},"name":"MapErr","qualname":"::stream::try_stream::MapErr","value":"MapErr {  }","parent":null,"children":[{"krate":0,"index":11217}],"decl_id":null,"docs":" Stream for the [`map_err`](super::TryStreamExt::map_err) method.\n","sig":null,"attributes":[{"value":"must_use =\n  \"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":11280},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/or_else.rs","byte_start":329270,"byte_end":329276,"line_start":14,"line_end":14,"column_start":16,"column_end":22},"name":"OrElse","qualname":"::stream::try_stream::or_else::OrElse","value":"OrElse {  }","parent":null,"children":[{"krate":0,"index":11284},{"krate":0,"index":11285},{"krate":0,"index":11286}],"decl_id":null,"docs":" Stream for the [`or_else`](super::TryStreamExt::or_else) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":11341},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_next.rs","byte_start":332112,"byte_end":332119,"line_start":10,"line_end":10,"column_start":12,"column_end":19},"name":"TryNext","qualname":"::stream::try_stream::try_next::TryNext","value":"TryNext {  }","parent":null,"children":[{"krate":0,"index":11344}],"decl_id":null,"docs":" Future for the [`try_next`](super::TryStreamExt::try_next) method.\n","sig":null,"attributes":[{"value":"/ Future for the [`try_next`](super::TryStreamExt::try_next) method.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_next.rs","byte_start":331945,"byte_end":332015,"line_start":7,"line_end":7,"column_start":1,"column_end":71}},{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_next.rs","byte_start":332033,"byte_end":332100,"line_start":9,"line_end":9,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":11349},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_for_each.rs","byte_start":333204,"byte_end":333214,"line_start":12,"line_end":12,"column_start":16,"column_end":26},"name":"TryForEach","qualname":"::stream::try_stream::try_for_each::TryForEach","value":"TryForEach {  }","parent":null,"children":[{"krate":0,"index":11353},{"krate":0,"index":11354},{"krate":0,"index":11355}],"decl_id":null,"docs":" Future for the [`try_for_each`](super::TryStreamExt::try_for_each) method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":11406},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_filter.rs","byte_start":335100,"byte_end":335109,"line_start":15,"line_end":15,"column_start":16,"column_end":25},"name":"TryFilter","qualname":"::stream::try_stream::try_filter::TryFilter","value":"TryFilter {  }","parent":null,"children":[{"krate":0,"index":11410},{"krate":0,"index":11411},{"krate":0,"index":11412},{"krate":0,"index":11413}],"decl_id":null,"docs":" Stream for the [`try_filter`](super::TryStreamExt::try_filter)\n method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":11471},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_filter_map.rs","byte_start":338244,"byte_end":338256,"line_start":15,"line_end":15,"column_start":16,"column_end":28},"name":"TryFilterMap","qualname":"::stream::try_stream::try_filter_map::TryFilterMap","value":"TryFilterMap {  }","parent":null,"children":[{"krate":0,"index":11475},{"krate":0,"index":11476},{"krate":0,"index":11477}],"decl_id":null,"docs":" Stream for the [`try_filter_map`](super::TryStreamExt::try_filter_map)\n method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":11537},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_flatten.rs","byte_start":341261,"byte_end":341271,"line_start":13,"line_end":13,"column_start":16,"column_end":26},"name":"TryFlatten","qualname":"::stream::try_stream::try_flatten::TryFlatten","value":"TryFlatten {  }","parent":null,"children":[{"krate":0,"index":11539},{"krate":0,"index":11540}],"decl_id":null,"docs":" Stream for the [`try_flatten`](super::TryStreamExt::try_flatten) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":11583},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_collect.rs","byte_start":343449,"byte_end":343459,"line_start":13,"line_end":13,"column_start":16,"column_end":26},"name":"TryCollect","qualname":"::stream::try_stream::try_collect::TryCollect","value":"TryCollect {  }","parent":null,"children":[{"krate":0,"index":11586},{"krate":0,"index":11587}],"decl_id":null,"docs":" Future for the [`try_collect`](super::TryStreamExt::try_collect) method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":11630},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_concat.rs","byte_start":344808,"byte_end":344817,"line_start":12,"line_end":12,"column_start":16,"column_end":25},"name":"TryConcat","qualname":"::stream::try_stream::try_concat::TryConcat","value":"TryConcat {  }","parent":null,"children":[{"krate":0,"index":11632},{"krate":0,"index":11633}],"decl_id":null,"docs":" Future for the [`try_concat`](super::TryStreamExt::try_concat) method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":11670},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_chunks.rs","byte_start":346328,"byte_end":346337,"line_start":17,"line_end":17,"column_start":16,"column_end":25},"name":"TryChunks","qualname":"::stream::try_stream::try_chunks::TryChunks","value":"TryChunks {  }","parent":null,"children":[{"krate":0,"index":11672},{"krate":0,"index":11673},{"krate":0,"index":11674}],"decl_id":null,"docs":" Stream for the [`try_chunks`](super::TryStreamExt::try_chunks) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":11713},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_chunks.rs","byte_start":349589,"byte_end":349603,"line_start":116,"line_end":116,"column_start":12,"column_end":26},"name":"TryChunksError","qualname":"::stream::try_stream::try_chunks::TryChunksError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error indicating, that while chunk was collected inner stream produced an error.","sig":null,"attributes":[{"value":"/ Error indicating, that while chunk was collected inner stream produced an error.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_chunks.rs","byte_start":349366,"byte_end":349450,"line_start":112,"line_end":112,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_chunks.rs","byte_start":349451,"byte_end":349454,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ Contains all items that were collected before an error occurred, and the stream error itself.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_chunks.rs","byte_start":349455,"byte_end":349552,"line_start":114,"line_end":114,"column_start":1,"column_end":98}}]},{"kind":"Field","id":{"krate":0,"index":11717},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_chunks.rs","byte_start":349610,"byte_end":349620,"line_start":116,"line_end":116,"column_start":33,"column_end":43},"name":"0","qualname":"::stream::try_stream::try_chunks::TryChunksError::0","value":"alloc::vec::Vec<T>","parent":{"krate":0,"index":11713},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":11718},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_chunks.rs","byte_start":349622,"byte_end":349627,"line_start":116,"line_end":116,"column_start":45,"column_end":50},"name":"1","qualname":"::stream::try_stream::try_chunks::TryChunksError::1","value":"E","parent":{"krate":0,"index":11713},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11734},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_fold.rs","byte_start":350465,"byte_end":350472,"line_start":12,"line_end":12,"column_start":16,"column_end":23},"name":"TryFold","qualname":"::stream::try_stream::try_fold::TryFold","value":"TryFold {  }","parent":null,"children":[{"krate":0,"index":11739},{"krate":0,"index":11740},{"krate":0,"index":11741},{"krate":0,"index":11742}],"decl_id":null,"docs":" Future for the [`try_fold`](super::TryStreamExt::try_fold) method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":4321},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354920,"byte_end":354930,"line_start":59,"line_end":59,"column_start":8,"column_end":18},"name":"try_unfold","qualname":"::stream::try_stream::try_unfold::try_unfold","value":"pub fn try_unfold<T, F, Fut, Item>(T, F) -> TryUnfold<T, F, Fut> where\nF: FnMut(T) -> Fut, Fut: TryFuture<Ok = Option<(Item, T)>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `TryStream` from a seed and a closure returning a `TryFuture`.","sig":null,"attributes":[{"value":"/ Creates a `TryStream` from a seed and a closure returning a `TryFuture`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":353063,"byte_end":353139,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":353140,"byte_end":353143,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This function is the dual for the `TryStream::try_fold()` adapter: while","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":353144,"byte_end":353220,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ `TryStream::try_fold()` reduces a `TryStream` to one single value,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":353221,"byte_end":353291,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"/ `try_unfold()` creates a `TryStream` from a seed value.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":353292,"byte_end":353351,"line_start":14,"line_end":14,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":353352,"byte_end":353355,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ `try_unfold()` will call the provided closure with the provided seed, then","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":353356,"byte_end":353434,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ wait for the returned `TryFuture` to complete with `(a, b)`. It will then","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":353435,"byte_end":353512,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"/ yield the value `a`, and use `b` as the next internal state.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":353513,"byte_end":353577,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":353578,"byte_end":353581,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ If the closure returns `None` instead of `Some(TryFuture)`, then the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":353582,"byte_end":353654,"line_start":20,"line_end":20,"column_start":1,"column_end":73}},{"value":"/ `try_unfold()` will stop producing items and return `Poll::Ready(None)` in","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":353655,"byte_end":353733,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ future calls to `poll()`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":353734,"byte_end":353763,"line_start":22,"line_end":22,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":353764,"byte_end":353767,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ In case of error generated by the returned `TryFuture`, the error will be","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":353768,"byte_end":353845,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ returned by the `TryStream`. The `TryStream` will then yield","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":353846,"byte_end":353910,"line_start":25,"line_end":25,"column_start":1,"column_end":65}},{"value":"/ `Poll::Ready(None)` in future calls to `poll()`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":353911,"byte_end":353963,"line_start":26,"line_end":26,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":353964,"byte_end":353967,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ This function can typically be used when wanting to go from the \"world of","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":353968,"byte_end":354045,"line_start":28,"line_end":28,"column_start":1,"column_end":78}},{"value":"/ futures\" to the \"world of streams\": the provided closure can build a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354046,"byte_end":354118,"line_start":29,"line_end":29,"column_start":1,"column_end":73}},{"value":"/ `TryFuture` using other library functions working on futures, and","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354119,"byte_end":354188,"line_start":30,"line_end":30,"column_start":1,"column_end":70}},{"value":"/ `try_unfold()` will turn it into a `TryStream` by repeating the operation.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354189,"byte_end":354267,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354268,"byte_end":354271,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354272,"byte_end":354285,"line_start":33,"line_end":33,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354286,"byte_end":354289,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354290,"byte_end":354297,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ # #[derive(Debug, PartialEq)]","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354298,"byte_end":354331,"line_start":36,"line_end":36,"column_start":1,"column_end":34}},{"value":"/ # struct SomeError;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354332,"byte_end":354355,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354356,"byte_end":354397,"line_start":38,"line_end":38,"column_start":1,"column_end":42}},{"value":"/ use futures::stream::{self, TryStreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354398,"byte_end":354444,"line_start":39,"line_end":39,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354445,"byte_end":354448,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ let stream = stream::try_unfold(0, |state| async move {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354449,"byte_end":354508,"line_start":41,"line_end":41,"column_start":1,"column_end":60}},{"value":"/     if state < 0 {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354509,"byte_end":354531,"line_start":42,"line_end":42,"column_start":1,"column_end":23}},{"value":"/         return Err(SomeError);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354532,"byte_end":354566,"line_start":43,"line_end":43,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354567,"byte_end":354576,"line_start":44,"line_end":44,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354577,"byte_end":354580,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/     if state <= 2 {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354581,"byte_end":354604,"line_start":46,"line_end":46,"column_start":1,"column_end":24}},{"value":"/         let next_state = state + 1;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354605,"byte_end":354644,"line_start":47,"line_end":47,"column_start":1,"column_end":40}},{"value":"/         let yielded = state * 2;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354645,"byte_end":354681,"line_start":48,"line_end":48,"column_start":1,"column_end":37}},{"value":"/         Ok(Some((yielded, next_state)))","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354682,"byte_end":354725,"line_start":49,"line_end":49,"column_start":1,"column_end":44}},{"value":"/     } else {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354726,"byte_end":354742,"line_start":50,"line_end":50,"column_start":1,"column_end":17}},{"value":"/         Ok(None)","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354743,"byte_end":354763,"line_start":51,"line_end":51,"column_start":1,"column_end":21}},{"value":"/     }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354764,"byte_end":354773,"line_start":52,"line_end":52,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354774,"byte_end":354781,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354782,"byte_end":354785,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ let result: Result<Vec<i32>, _> = stream.try_collect().await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354786,"byte_end":354851,"line_start":55,"line_end":55,"column_start":1,"column_end":66}},{"value":"/ assert_eq!(result, Ok(vec![0, 2, 4]));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354852,"byte_end":354894,"line_start":56,"line_end":56,"column_start":1,"column_end":43}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354895,"byte_end":354904,"line_start":57,"line_end":57,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":354905,"byte_end":354912,"line_start":58,"line_end":58,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":11803},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":355293,"byte_end":355302,"line_start":70,"line_end":70,"column_start":16,"column_end":25},"name":"TryUnfold","qualname":"::stream::try_stream::try_unfold::TryUnfold","value":"TryUnfold {  }","parent":null,"children":[{"krate":0,"index":11807},{"krate":0,"index":11808},{"krate":0,"index":11809}],"decl_id":null,"docs":" Stream for the [`try_unfold`] function.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":11860},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_skip_while.rs","byte_start":357210,"byte_end":357222,"line_start":15,"line_end":15,"column_start":16,"column_end":28},"name":"TrySkipWhile","qualname":"::stream::try_stream::try_skip_while::TrySkipWhile","value":"TrySkipWhile {  }","parent":null,"children":[{"krate":0,"index":11864},{"krate":0,"index":11865},{"krate":0,"index":11866},{"krate":0,"index":11867},{"krate":0,"index":11868}],"decl_id":null,"docs":" Stream for the [`try_skip_while`](super::TryStreamExt::try_skip_while)\n method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":11929},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_take_while.rs","byte_start":360766,"byte_end":360778,"line_start":15,"line_end":15,"column_start":16,"column_end":28},"name":"TryTakeWhile","qualname":"::stream::try_stream::try_take_while::TryTakeWhile","value":"TryTakeWhile {  }","parent":null,"children":[{"krate":0,"index":11933},{"krate":0,"index":11934},{"krate":0,"index":11935},{"krate":0,"index":11936},{"krate":0,"index":11937}],"decl_id":null,"docs":" Stream for the [`try_take_while`](super::TryStreamExt::try_take_while)\n method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":12003},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_buffer_unordered.rs","byte_start":364554,"byte_end":364572,"line_start":16,"line_end":16,"column_start":16,"column_end":34},"name":"TryBufferUnordered","qualname":"::stream::try_stream::try_buffer_unordered::TryBufferUnordered","value":"TryBufferUnordered {  }","parent":null,"children":[{"krate":0,"index":12005},{"krate":0,"index":12006},{"krate":0,"index":12007}],"decl_id":null,"docs":" Stream for the\n [`try_buffer_unordered`](super::TryStreamExt::try_buffer_unordered) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":12051},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_buffered.rs","byte_start":367112,"byte_end":367123,"line_start":15,"line_end":15,"column_start":16,"column_end":27},"name":"TryBuffered","qualname":"::stream::try_stream::try_buffered::TryBuffered","value":"TryBuffered {  }","parent":null,"children":[{"krate":0,"index":12053},{"krate":0,"index":12054},{"krate":0,"index":12055}],"decl_id":null,"docs":" Stream for the [`try_buffered`](super::TryStreamExt::try_buffered) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":12094},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_for_each_concurrent.rs","byte_start":369655,"byte_end":369675,"line_start":16,"line_end":16,"column_start":16,"column_end":36},"name":"TryForEachConcurrent","qualname":"::stream::try_stream::try_for_each_concurrent::TryForEachConcurrent","value":"TryForEachConcurrent {  }","parent":null,"children":[{"krate":0,"index":12098},{"krate":0,"index":12099},{"krate":0,"index":12100},{"krate":0,"index":12101}],"decl_id":null,"docs":" Future for the\n [`try_for_each_concurrent`](super::TryStreamExt::try_for_each_concurrent)\n method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Trait","id":{"krate":0,"index":4636},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":291670,"byte_end":291682,"line_start":157,"line_end":157,"column_start":11,"column_end":23},"name":"TryStreamExt","qualname":"::stream::try_stream::TryStreamExt","value":"TryStreamExt: TryStream","parent":null,"children":[{"krate":0,"index":4637},{"krate":0,"index":4639},{"krate":0,"index":4642},{"krate":0,"index":4645},{"krate":0,"index":4648},{"krate":0,"index":4651},{"krate":0,"index":4653},{"krate":0,"index":4655},{"krate":0,"index":4656},{"krate":0,"index":4657},{"krate":0,"index":4660},{"krate":0,"index":4663},{"krate":0,"index":4666},{"krate":0,"index":4670},{"krate":0,"index":4672},{"krate":0,"index":4673},{"krate":0,"index":4676},{"krate":0,"index":4680},{"krate":0,"index":4681},{"krate":0,"index":4685},{"krate":0,"index":4686},{"krate":0,"index":4687},{"krate":0,"index":4688}],"decl_id":null,"docs":" Adapters specific to `Result`-returning streams\n","sig":null,"attributes":[{"value":"/ Adapters specific to `Result`-returning streams","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":291608,"byte_end":291659,"line_start":156,"line_end":156,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":4637},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292224,"byte_end":292232,"line_start":175,"line_end":175,"column_start":8,"column_end":16},"name":"err_into","qualname":"::stream::try_stream::TryStreamExt::err_into","value":"pub fn err_into<E>(Self) -> ErrInto<Self, E> where Self: Sized,\nSelf::Error: Into<E>","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" Wraps the current stream in a new stream which converts the error type\n into the one provided.","sig":null,"attributes":[{"value":"/ Wraps the current stream in a new stream which converts the error type","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":291700,"byte_end":291774,"line_start":158,"line_end":158,"column_start":5,"column_end":79}},{"value":"/ into the one provided.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":291779,"byte_end":291805,"line_start":159,"line_end":159,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":291810,"byte_end":291813,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":291818,"byte_end":291832,"line_start":161,"line_end":161,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":291837,"byte_end":291840,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":291845,"byte_end":291852,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":291857,"byte_end":291898,"line_start":164,"line_end":164,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, TryStreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":291903,"byte_end":291949,"line_start":165,"line_end":165,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":291954,"byte_end":291957,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ let mut stream =","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":291962,"byte_end":291982,"line_start":167,"line_end":167,"column_start":5,"column_end":25}},{"value":"/     stream::iter(vec![Ok(()), Err(5i32)])","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":291987,"byte_end":292032,"line_start":168,"line_end":168,"column_start":5,"column_end":50}},{"value":"/         .err_into::<i64>();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292037,"byte_end":292068,"line_start":169,"line_end":169,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292073,"byte_end":292076,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(stream.try_next().await, Ok(Some(())));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292081,"byte_end":292135,"line_start":171,"line_end":171,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(stream.try_next().await, Err(5i64));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292140,"byte_end":292191,"line_start":172,"line_end":172,"column_start":5,"column_end":56}},{"value":"/ # })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292196,"byte_end":292204,"line_start":173,"line_end":173,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292209,"byte_end":292216,"line_start":174,"line_end":174,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4639},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292928,"byte_end":292934,"line_start":200,"line_end":200,"column_start":8,"column_end":14},"name":"map_ok","qualname":"::stream::try_stream::TryStreamExt::map_ok","value":"pub fn map_ok<T, F>(Self, F) -> MapOk<Self, F> where Self: Sized,\nF: FnMut(Self::Ok) -> T","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" Wraps the current stream in a new stream which maps the success value\n using the provided closure.","sig":null,"attributes":[{"value":"/ Wraps the current stream in a new stream which maps the success value","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292408,"byte_end":292481,"line_start":183,"line_end":183,"column_start":5,"column_end":78}},{"value":"/ using the provided closure.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292486,"byte_end":292517,"line_start":184,"line_end":184,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292522,"byte_end":292525,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292530,"byte_end":292544,"line_start":186,"line_end":186,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292549,"byte_end":292552,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292557,"byte_end":292564,"line_start":188,"line_end":188,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292569,"byte_end":292610,"line_start":189,"line_end":189,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, TryStreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292615,"byte_end":292661,"line_start":190,"line_end":190,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292666,"byte_end":292669,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ let mut stream =","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292674,"byte_end":292694,"line_start":192,"line_end":192,"column_start":5,"column_end":25}},{"value":"/     stream::iter(vec![Ok(5), Err(0)])","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292699,"byte_end":292740,"line_start":193,"line_end":193,"column_start":5,"column_end":46}},{"value":"/         .map_ok(|x| x + 2);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292745,"byte_end":292776,"line_start":194,"line_end":194,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292781,"byte_end":292784,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(stream.try_next().await, Ok(Some(7)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292789,"byte_end":292842,"line_start":196,"line_end":196,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(stream.try_next().await, Err(0));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292847,"byte_end":292895,"line_start":197,"line_end":197,"column_start":5,"column_end":53}},{"value":"/ # })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292900,"byte_end":292908,"line_start":198,"line_end":198,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":292913,"byte_end":292920,"line_start":199,"line_end":199,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4642},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293643,"byte_end":293650,"line_start":225,"line_end":225,"column_start":8,"column_end":15},"name":"map_err","qualname":"::stream::try_stream::TryStreamExt::map_err","value":"pub fn map_err<E, F>(Self, F) -> MapErr<Self, F> where Self: Sized,\nF: FnMut(Self::Error) -> E","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" Wraps the current stream in a new stream which maps the error value\n using the provided closure.","sig":null,"attributes":[{"value":"/ Wraps the current stream in a new stream which maps the error value","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293124,"byte_end":293195,"line_start":208,"line_end":208,"column_start":5,"column_end":76}},{"value":"/ using the provided closure.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293200,"byte_end":293231,"line_start":209,"line_end":209,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293236,"byte_end":293239,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293244,"byte_end":293258,"line_start":211,"line_end":211,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293263,"byte_end":293266,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293271,"byte_end":293278,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293283,"byte_end":293324,"line_start":214,"line_end":214,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, TryStreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293329,"byte_end":293375,"line_start":215,"line_end":215,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293380,"byte_end":293383,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ let mut stream =","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293388,"byte_end":293408,"line_start":217,"line_end":217,"column_start":5,"column_end":25}},{"value":"/     stream::iter(vec![Ok(5), Err(0)])","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293413,"byte_end":293454,"line_start":218,"line_end":218,"column_start":5,"column_end":46}},{"value":"/         .map_err(|x| x + 2);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293459,"byte_end":293491,"line_start":219,"line_end":219,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293496,"byte_end":293499,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(stream.try_next().await, Ok(Some(5)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293504,"byte_end":293557,"line_start":221,"line_end":221,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(stream.try_next().await, Err(2));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293562,"byte_end":293610,"line_start":222,"line_end":222,"column_start":5,"column_end":53}},{"value":"/ # })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293615,"byte_end":293623,"line_start":223,"line_end":223,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293628,"byte_end":293635,"line_start":224,"line_end":224,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4645},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":295255,"byte_end":295263,"line_start":271,"line_end":271,"column_start":8,"column_end":16},"name":"and_then","qualname":"::stream::try_stream::TryStreamExt::and_then","value":"pub fn and_then<Fut, F>(Self, F) -> AndThen<Self, Fut, F> where\nF: FnMut(Self::Ok) -> Fut, Fut: TryFuture<Error = Self::Error>, Self: Sized","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" Chain on a computation for when a value is ready, passing the successful\n results to the provided closure `f`.","sig":null,"attributes":[{"value":"/ Chain on a computation for when a value is ready, passing the successful","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293842,"byte_end":293918,"line_start":233,"line_end":233,"column_start":5,"column_end":81}},{"value":"/ results to the provided closure `f`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293923,"byte_end":293963,"line_start":234,"line_end":234,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293968,"byte_end":293971,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ This function can be used to run a unit of work when the next successful","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":293976,"byte_end":294052,"line_start":236,"line_end":236,"column_start":5,"column_end":81}},{"value":"/ value on a stream is ready. The closure provided will be yielded a value","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294057,"byte_end":294133,"line_start":237,"line_end":237,"column_start":5,"column_end":81}},{"value":"/ when ready, and the returned future will then be run to completion to","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294138,"byte_end":294211,"line_start":238,"line_end":238,"column_start":5,"column_end":78}},{"value":"/ produce the next value on this stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294216,"byte_end":294258,"line_start":239,"line_end":239,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294263,"byte_end":294266,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ Any errors produced by this stream will not be passed to the closure,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294271,"byte_end":294344,"line_start":241,"line_end":241,"column_start":5,"column_end":78}},{"value":"/ and will be passed through.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294349,"byte_end":294380,"line_start":242,"line_end":242,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294385,"byte_end":294388,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ The returned value of the closure must implement the `TryFuture` trait","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294393,"byte_end":294467,"line_start":244,"line_end":244,"column_start":5,"column_end":79}},{"value":"/ and can represent some more work to be done before the composed stream","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294472,"byte_end":294546,"line_start":245,"line_end":245,"column_start":5,"column_end":79}},{"value":"/ is finished.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294551,"byte_end":294567,"line_start":246,"line_end":246,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294572,"byte_end":294575,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ Note that this function consumes the receiving stream and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294580,"byte_end":294651,"line_start":248,"line_end":248,"column_start":5,"column_end":76}},{"value":"/ wrapped version of it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294656,"byte_end":294682,"line_start":249,"line_end":249,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294687,"byte_end":294690,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ To process the entire stream and return a single future representing","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294695,"byte_end":294767,"line_start":251,"line_end":251,"column_start":5,"column_end":77}},{"value":"/ success or error, use `try_for_each` instead.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294772,"byte_end":294821,"line_start":252,"line_end":252,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294826,"byte_end":294829,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294834,"byte_end":294848,"line_start":254,"line_end":254,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294853,"byte_end":294856,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294861,"byte_end":294868,"line_start":256,"line_end":256,"column_start":5,"column_end":12}},{"value":"/ use futures::channel::mpsc;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294873,"byte_end":294904,"line_start":257,"line_end":257,"column_start":5,"column_end":36}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294909,"byte_end":294933,"line_start":258,"line_end":258,"column_start":5,"column_end":29}},{"value":"/ use futures::stream::TryStreamExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294938,"byte_end":294976,"line_start":259,"line_end":259,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294981,"byte_end":294984,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ let (_tx, rx) = mpsc::channel::<Result<i32, ()>>(1);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":294989,"byte_end":295045,"line_start":261,"line_end":261,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":295050,"byte_end":295053,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ let rx = rx.and_then(|result| {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":295058,"byte_end":295093,"line_start":263,"line_end":263,"column_start":5,"column_end":40}},{"value":"/     future::ok(if result % 2 == 0 {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":295098,"byte_end":295137,"line_start":264,"line_end":264,"column_start":5,"column_end":44}},{"value":"/         Some(result)","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":295142,"byte_end":295166,"line_start":265,"line_end":265,"column_start":5,"column_end":29}},{"value":"/     } else {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":295171,"byte_end":295187,"line_start":266,"line_end":266,"column_start":5,"column_end":21}},{"value":"/         None","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":295192,"byte_end":295208,"line_start":267,"line_end":267,"column_start":5,"column_end":21}},{"value":"/     })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":295213,"byte_end":295223,"line_start":268,"line_end":268,"column_start":5,"column_end":15}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":295228,"byte_end":295235,"line_start":269,"line_end":269,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":295240,"byte_end":295247,"line_start":270,"line_end":270,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4648},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":296415,"byte_end":296422,"line_start":297,"line_end":297,"column_start":8,"column_end":15},"name":"or_else","qualname":"::stream::try_stream::TryStreamExt::or_else","value":"pub fn or_else<Fut, F>(Self, F) -> OrElse<Self, Fut, F> where\nF: FnMut(Self::Error) -> Fut, Fut: TryFuture<Ok = Self::Ok>, Self: Sized","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" Chain on a computation for when an error happens, passing the\n erroneous result to the provided closure `f`.","sig":null,"attributes":[{"value":"/ Chain on a computation for when an error happens, passing the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":295516,"byte_end":295581,"line_start":280,"line_end":280,"column_start":5,"column_end":70}},{"value":"/ erroneous result to the provided closure `f`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":295586,"byte_end":295635,"line_start":281,"line_end":281,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":295640,"byte_end":295643,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ This function can be used to run a unit of work and attempt to recover from","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":295648,"byte_end":295727,"line_start":283,"line_end":283,"column_start":5,"column_end":84}},{"value":"/ an error if one happens. The closure provided will be yielded an error","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":295732,"byte_end":295806,"line_start":284,"line_end":284,"column_start":5,"column_end":79}},{"value":"/ when one appears, and the returned future will then be run to completion","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":295811,"byte_end":295887,"line_start":285,"line_end":285,"column_start":5,"column_end":81}},{"value":"/ to produce the next value on this stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":295892,"byte_end":295937,"line_start":286,"line_end":286,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":295942,"byte_end":295945,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ Any successful values produced by this stream will not be passed to the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":295950,"byte_end":296025,"line_start":288,"line_end":288,"column_start":5,"column_end":80}},{"value":"/ closure, and will be passed through.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":296030,"byte_end":296070,"line_start":289,"line_end":289,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":296075,"byte_end":296078,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ The returned value of the closure must implement the [`TryFuture`](futures_core::future::TryFuture) trait","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":296083,"byte_end":296192,"line_start":291,"line_end":291,"column_start":5,"column_end":114}},{"value":"/ and can represent some more work to be done before the composed stream","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":296197,"byte_end":296271,"line_start":292,"line_end":292,"column_start":5,"column_end":79}},{"value":"/ is finished.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":296276,"byte_end":296292,"line_start":293,"line_end":293,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":296297,"byte_end":296300,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ Note that this function consumes the receiving stream and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":296305,"byte_end":296376,"line_start":295,"line_end":295,"column_start":5,"column_end":76}},{"value":"/ wrapped version of it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":296381,"byte_end":296407,"line_start":296,"line_end":296,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":4651},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":296974,"byte_end":296984,"line_start":312,"line_end":312,"column_start":8,"column_end":18},"name":"inspect_ok","qualname":"::stream::try_stream::TryStreamExt::inspect_ok","value":"pub fn inspect_ok<F>(Self, F) -> InspectOk<Self, F> where F: FnMut(&Self::Ok)\n-> (), Self: Sized","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" Do something with the success value of this stream, afterwards passing\n it on.","sig":null,"attributes":[{"value":"/ Do something with the success value of this stream, afterwards passing","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":296671,"byte_end":296745,"line_start":306,"line_end":306,"column_start":5,"column_end":79}},{"value":"/ it on.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":296750,"byte_end":296760,"line_start":307,"line_end":307,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":296765,"byte_end":296768,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ This is similar to the `StreamExt::inspect` method where it allows","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":296773,"byte_end":296843,"line_start":309,"line_end":309,"column_start":5,"column_end":75}},{"value":"/ easily inspecting the success value as it passes through the stream, for","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":296848,"byte_end":296924,"line_start":310,"line_end":310,"column_start":5,"column_end":81}},{"value":"/ example to debug what's going on.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":296929,"byte_end":296966,"line_start":311,"line_end":311,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":4653},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":297473,"byte_end":297484,"line_start":325,"line_end":325,"column_start":8,"column_end":19},"name":"inspect_err","qualname":"::stream::try_stream::TryStreamExt::inspect_err","value":"pub fn inspect_err<F>(Self, F) -> InspectErr<Self, F> where\nF: FnMut(&Self::Error) -> (), Self: Sized","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" Do something with the error value of this stream, afterwards passing it on.","sig":null,"attributes":[{"value":"/ Do something with the error value of this stream, afterwards passing it on.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":297182,"byte_end":297261,"line_start":320,"line_end":320,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":297266,"byte_end":297269,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ This is similar to the `StreamExt::inspect` method where it allows","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":297274,"byte_end":297344,"line_start":322,"line_end":322,"column_start":5,"column_end":75}},{"value":"/ easily inspecting the error value as it passes through the stream, for","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":297349,"byte_end":297423,"line_start":323,"line_end":323,"column_start":5,"column_end":79}},{"value":"/ example to debug what's going on.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":297428,"byte_end":297465,"line_start":324,"line_end":324,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":4655},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298405,"byte_end":298416,"line_start":354,"line_end":354,"column_start":8,"column_end":19},"name":"into_stream","qualname":"::stream::try_stream::TryStreamExt::into_stream","value":"pub fn into_stream(Self) -> IntoStream<Self> where Self: Sized","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" Wraps a [`TryStream`] into a type that implements\n [`Stream`](futures_core::stream::Stream)","sig":null,"attributes":[{"value":"/ Wraps a [`TryStream`] into a type that implements","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":297687,"byte_end":297740,"line_start":333,"line_end":333,"column_start":5,"column_end":58}},{"value":"/ [`Stream`](futures_core::stream::Stream)","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":297745,"byte_end":297789,"line_start":334,"line_end":334,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":297794,"byte_end":297797,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ [`TryStream`]s currently do not implement the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":297802,"byte_end":297851,"line_start":336,"line_end":336,"column_start":5,"column_end":54}},{"value":"/ [`Stream`](futures_core::stream::Stream) trait because of limitations","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":297856,"byte_end":297929,"line_start":337,"line_end":337,"column_start":5,"column_end":78}},{"value":"/ of the compiler.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":297934,"byte_end":297954,"line_start":338,"line_end":338,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":297959,"byte_end":297962,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":297967,"byte_end":297981,"line_start":340,"line_end":340,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":297986,"byte_end":297989,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":297994,"byte_end":298001,"line_start":342,"line_end":342,"column_start":5,"column_end":12}},{"value":"/ use futures::stream::{Stream, TryStream, TryStreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298006,"byte_end":298065,"line_start":343,"line_end":343,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298070,"byte_end":298073,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ # type T = i32;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298078,"byte_end":298097,"line_start":345,"line_end":345,"column_start":5,"column_end":24}},{"value":"/ # type E = ();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298102,"byte_end":298120,"line_start":346,"line_end":346,"column_start":5,"column_end":23}},{"value":"/ fn make_try_stream() -> impl TryStream<Ok = T, Error = E> { // ... }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298125,"byte_end":298197,"line_start":347,"line_end":347,"column_start":5,"column_end":77}},{"value":"/ # futures::stream::empty()","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298202,"byte_end":298232,"line_start":348,"line_end":348,"column_start":5,"column_end":35}},{"value":"/ # }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298237,"byte_end":298244,"line_start":349,"line_end":349,"column_start":5,"column_end":12}},{"value":"/ fn take_stream(stream: impl Stream<Item = Result<T, E>>) { /* ... */ }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298249,"byte_end":298323,"line_start":350,"line_end":350,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298328,"byte_end":298331,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ take_stream(make_try_stream().into_stream());","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298336,"byte_end":298385,"line_start":352,"line_end":352,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298390,"byte_end":298397,"line_start":353,"line_end":353,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4656},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":299311,"byte_end":299319,"line_start":381,"line_end":381,"column_start":8,"column_end":16},"name":"try_next","qualname":"::stream::try_stream::TryStreamExt::try_next","value":"pub fn try_next(&mut Self) -> TryNext<, Self> where Self: Unpin","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" Creates a future that attempts to resolve the next item in the stream.\n If an error is encountered before the next item, the error is returned\n instead.","sig":null,"attributes":[{"value":"/ Creates a future that attempts to resolve the next item in the stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298572,"byte_end":298646,"line_start":361,"line_end":361,"column_start":5,"column_end":79}},{"value":"/ If an error is encountered before the next item, the error is returned","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298651,"byte_end":298725,"line_start":362,"line_end":362,"column_start":5,"column_end":79}},{"value":"/ instead.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298730,"byte_end":298742,"line_start":363,"line_end":363,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298747,"byte_end":298750,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ This is similar to the `Stream::next` combinator, but returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298755,"byte_end":298822,"line_start":365,"line_end":365,"column_start":5,"column_end":72}},{"value":"/ `Result<Option<T>, E>` rather than an `Option<Result<T, E>>`, making","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298827,"byte_end":298899,"line_start":366,"line_end":366,"column_start":5,"column_end":77}},{"value":"/ for easy use with the `?` operator.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298904,"byte_end":298943,"line_start":367,"line_end":367,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298948,"byte_end":298951,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298956,"byte_end":298970,"line_start":369,"line_end":369,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298975,"byte_end":298978,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298983,"byte_end":298990,"line_start":371,"line_end":371,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":298995,"byte_end":299036,"line_start":372,"line_end":372,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, TryStreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":299041,"byte_end":299087,"line_start":373,"line_end":373,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":299092,"byte_end":299095,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ let mut stream = stream::iter(vec![Ok(()), Err(())]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":299100,"byte_end":299157,"line_start":375,"line_end":375,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":299162,"byte_end":299165,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(stream.try_next().await, Ok(Some(())));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":299170,"byte_end":299224,"line_start":377,"line_end":377,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(stream.try_next().await, Err(()));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":299229,"byte_end":299278,"line_start":378,"line_end":378,"column_start":5,"column_end":54}},{"value":"/ # })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":299283,"byte_end":299291,"line_start":379,"line_end":379,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":299296,"byte_end":299303,"line_start":380,"line_end":380,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4657},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300671,"byte_end":300683,"line_start":421,"line_end":421,"column_start":8,"column_end":20},"name":"try_for_each","qualname":"::stream::try_stream::TryStreamExt::try_for_each","value":"pub fn try_for_each<Fut, F>(Self, F) -> TryForEach<Self, Fut, F> where\nF: FnMut(Self::Ok) -> Fut, Fut: TryFuture<Ok = (), Error = ()>, Self: Sized","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" Attempts to run this stream to completion, executing the provided\n asynchronous closure for each element on the stream.","sig":null,"attributes":[{"value":"/ Attempts to run this stream to completion, executing the provided","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":299486,"byte_end":299555,"line_start":388,"line_end":388,"column_start":5,"column_end":74}},{"value":"/ asynchronous closure for each element on the stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":299560,"byte_end":299616,"line_start":389,"line_end":389,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":299621,"byte_end":299624,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ The provided closure will be called for each item this stream produces,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":299629,"byte_end":299704,"line_start":391,"line_end":391,"column_start":5,"column_end":80}},{"value":"/ yielding a future. That future will then be executed to completion","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":299709,"byte_end":299779,"line_start":392,"line_end":392,"column_start":5,"column_end":75}},{"value":"/ before moving on to the next item.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":299784,"byte_end":299822,"line_start":393,"line_end":393,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":299827,"byte_end":299830,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ The returned value is a [`Future`](futures_core::future::Future) where the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":299835,"byte_end":299913,"line_start":395,"line_end":395,"column_start":5,"column_end":83}},{"value":"/ [`Output`](futures_core::future::Future::Output) type is","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":299918,"byte_end":299978,"line_start":396,"line_end":396,"column_start":5,"column_end":65}},{"value":"/ `Result<(), Self::Error>`. If any of the intermediate","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":299983,"byte_end":300040,"line_start":397,"line_end":397,"column_start":5,"column_end":62}},{"value":"/ futures or the stream returns an error, this future will return","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300045,"byte_end":300112,"line_start":398,"line_end":398,"column_start":5,"column_end":72}},{"value":"/ immediately with an error.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300117,"byte_end":300147,"line_start":399,"line_end":399,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300152,"byte_end":300155,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300160,"byte_end":300174,"line_start":401,"line_end":401,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300179,"byte_end":300182,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300187,"byte_end":300194,"line_start":403,"line_end":403,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300199,"byte_end":300240,"line_start":404,"line_end":404,"column_start":5,"column_end":46}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300245,"byte_end":300269,"line_start":405,"line_end":405,"column_start":5,"column_end":29}},{"value":"/ use futures::stream::{self, TryStreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300274,"byte_end":300320,"line_start":406,"line_end":406,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300325,"byte_end":300328,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ let mut x = 0i32;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300333,"byte_end":300354,"line_start":408,"line_end":408,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300359,"byte_end":300362,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300367,"byte_end":300372,"line_start":410,"line_end":410,"column_start":5,"column_end":10}},{"value":"/     let fut = stream::repeat(Ok(1)).try_for_each(|item| {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300377,"byte_end":300438,"line_start":411,"line_end":411,"column_start":5,"column_end":66}},{"value":"/         x += item;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300443,"byte_end":300465,"line_start":412,"line_end":412,"column_start":5,"column_end":27}},{"value":"/         future::ready(if x == 3 { Err(()) } else { Ok(()) })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300470,"byte_end":300534,"line_start":413,"line_end":413,"column_start":5,"column_end":69}},{"value":"/     });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300539,"byte_end":300550,"line_start":414,"line_end":414,"column_start":5,"column_end":16}},{"value":"/     assert_eq!(fut.await, Err(()));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300555,"byte_end":300594,"line_start":415,"line_end":415,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300599,"byte_end":300604,"line_start":416,"line_end":416,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300609,"byte_end":300612,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(x, 3);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300617,"byte_end":300638,"line_start":418,"line_end":418,"column_start":5,"column_end":26}},{"value":"/ # })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300643,"byte_end":300651,"line_start":419,"line_end":419,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300656,"byte_end":300663,"line_start":420,"line_end":420,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4660},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301696,"byte_end":301710,"line_start":451,"line_end":451,"column_start":8,"column_end":22},"name":"try_skip_while","qualname":"::stream::try_stream::TryStreamExt::try_skip_while","value":"pub fn try_skip_while<Fut, F>(Self, F) -> TrySkipWhile<Self, Fut, F> where\nF: FnMut(&Self::Ok) -> Fut, Fut: TryFuture<Ok = bool, Error = bool>,\nSelf: Sized","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" Skip elements on this stream while the provided asynchronous predicate\n resolves to `true`.","sig":null,"attributes":[{"value":"/ Skip elements on this stream while the provided asynchronous predicate","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":300947,"byte_end":301021,"line_start":430,"line_end":430,"column_start":5,"column_end":79}},{"value":"/ resolves to `true`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301026,"byte_end":301049,"line_start":431,"line_end":431,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301054,"byte_end":301057,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ This function is similar to","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301062,"byte_end":301093,"line_start":433,"line_end":433,"column_start":5,"column_end":36}},{"value":"/ [`StreamExt::skip_while`](crate::stream::StreamExt::skip_while) but exits","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301098,"byte_end":301175,"line_start":434,"line_end":434,"column_start":5,"column_end":82}},{"value":"/ early if an error occurs.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301180,"byte_end":301209,"line_start":435,"line_end":435,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301214,"byte_end":301217,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301222,"byte_end":301236,"line_start":437,"line_end":437,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301241,"byte_end":301244,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301249,"byte_end":301256,"line_start":439,"line_end":439,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301261,"byte_end":301302,"line_start":440,"line_end":440,"column_start":5,"column_end":46}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301307,"byte_end":301331,"line_start":441,"line_end":441,"column_start":5,"column_end":29}},{"value":"/ use futures::stream::{self, TryStreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301336,"byte_end":301382,"line_start":442,"line_end":442,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301387,"byte_end":301390,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(vec![Ok::<i32, i32>(1), Ok(3), Ok(2)]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301395,"byte_end":301464,"line_start":444,"line_end":444,"column_start":5,"column_end":74}},{"value":"/ let stream = stream.try_skip_while(|x| future::ready(Ok(*x < 3)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301469,"byte_end":301539,"line_start":445,"line_end":445,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301544,"byte_end":301547,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ let output: Result<Vec<i32>, i32> = stream.try_collect().await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301552,"byte_end":301619,"line_start":447,"line_end":447,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(output, Ok(vec![3, 2]));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301624,"byte_end":301663,"line_start":448,"line_end":448,"column_start":5,"column_end":44}},{"value":"/ # })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301668,"byte_end":301676,"line_start":449,"line_end":449,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301681,"byte_end":301688,"line_start":450,"line_end":450,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4663},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":302743,"byte_end":302757,"line_start":481,"line_end":481,"column_start":8,"column_end":22},"name":"try_take_while","qualname":"::stream::try_stream::TryStreamExt::try_take_while","value":"pub fn try_take_while<Fut, F>(Self, F) -> TryTakeWhile<Self, Fut, F> where\nF: FnMut(&Self::Ok) -> Fut, Fut: TryFuture<Ok = bool, Error = bool>,\nSelf: Sized","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" Take elements on this stream while the provided asynchronous predicate\n resolves to `true`.","sig":null,"attributes":[{"value":"/ Take elements on this stream while the provided asynchronous predicate","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":301987,"byte_end":302061,"line_start":460,"line_end":460,"column_start":5,"column_end":79}},{"value":"/ resolves to `true`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":302066,"byte_end":302089,"line_start":461,"line_end":461,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":302094,"byte_end":302097,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ This function is similar to","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":302102,"byte_end":302133,"line_start":463,"line_end":463,"column_start":5,"column_end":36}},{"value":"/ [`StreamExt::take_while`](crate::stream::StreamExt::take_while) but exits","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":302138,"byte_end":302215,"line_start":464,"line_end":464,"column_start":5,"column_end":82}},{"value":"/ early if an error occurs.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":302220,"byte_end":302249,"line_start":465,"line_end":465,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":302254,"byte_end":302257,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":302262,"byte_end":302276,"line_start":467,"line_end":467,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":302281,"byte_end":302284,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":302289,"byte_end":302296,"line_start":469,"line_end":469,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":302301,"byte_end":302342,"line_start":470,"line_end":470,"column_start":5,"column_end":46}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":302347,"byte_end":302371,"line_start":471,"line_end":471,"column_start":5,"column_end":29}},{"value":"/ use futures::stream::{self, TryStreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":302376,"byte_end":302422,"line_start":472,"line_end":472,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":302427,"byte_end":302430,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(vec![Ok::<i32, i32>(1), Ok(2), Ok(3), Ok(2)]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":302435,"byte_end":302511,"line_start":474,"line_end":474,"column_start":5,"column_end":81}},{"value":"/ let stream = stream.try_take_while(|x| future::ready(Ok(*x < 3)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":302516,"byte_end":302586,"line_start":475,"line_end":475,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":302591,"byte_end":302594,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ let output: Result<Vec<i32>, i32> = stream.try_collect().await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":302599,"byte_end":302666,"line_start":477,"line_end":477,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(output, Ok(vec![1, 2]));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":302671,"byte_end":302710,"line_start":478,"line_end":478,"column_start":5,"column_end":44}},{"value":"/ # })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":302715,"byte_end":302723,"line_start":479,"line_end":479,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":302728,"byte_end":302735,"line_start":480,"line_end":480,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4666},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":304672,"byte_end":304695,"line_start":533,"line_end":533,"column_start":8,"column_end":31},"name":"try_for_each_concurrent","qualname":"::stream::try_stream::TryStreamExt::try_for_each_concurrent","value":"pub fn try_for_each_concurrent<Fut, F,\n                               impl Into<Option<usize>>: Into<Option<usize>>>(Self,\n                                                                              impl Into<Option<usize>>,\n                                                                              F)\n-> TryForEachConcurrent<Self, Fut, F> where F: FnMut(Self::Ok) -> Fut,\nFut: Future<Output = Result<(), Self::Error>>, Self: Sized","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" Attempts to run this stream to completion, executing the provided asynchronous\n closure for each element on the stream concurrently as elements become\n available, exiting as soon as an error occurs.","sig":null,"attributes":[{"value":"/ Attempts to run this stream to completion, executing the provided asynchronous","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303034,"byte_end":303116,"line_start":490,"line_end":490,"column_start":5,"column_end":87}},{"value":"/ closure for each element on the stream concurrently as elements become","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303121,"byte_end":303195,"line_start":491,"line_end":491,"column_start":5,"column_end":79}},{"value":"/ available, exiting as soon as an error occurs.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303200,"byte_end":303250,"line_start":492,"line_end":492,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303255,"byte_end":303258,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ This is similar to","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303263,"byte_end":303285,"line_start":494,"line_end":494,"column_start":5,"column_end":27}},{"value":"/ [`StreamExt::for_each_concurrent`](crate::stream::StreamExt::for_each_concurrent),","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303290,"byte_end":303376,"line_start":495,"line_end":495,"column_start":5,"column_end":91}},{"value":"/ but will resolve to an error immediately if the underlying stream or the provided","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303381,"byte_end":303466,"line_start":496,"line_end":496,"column_start":5,"column_end":90}},{"value":"/ closure return an error.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303471,"byte_end":303499,"line_start":497,"line_end":497,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303504,"byte_end":303507,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ This method is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303512,"byte_end":303587,"line_start":499,"line_end":499,"column_start":5,"column_end":80}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303592,"byte_end":303649,"line_start":500,"line_end":500,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303654,"byte_end":303657,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303662,"byte_end":303676,"line_start":502,"line_end":502,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303681,"byte_end":303684,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303689,"byte_end":303696,"line_start":504,"line_end":504,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303701,"byte_end":303742,"line_start":505,"line_end":505,"column_start":5,"column_end":46}},{"value":"/ use futures::channel::oneshot;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303747,"byte_end":303781,"line_start":506,"line_end":506,"column_start":5,"column_end":39}},{"value":"/ use futures::stream::{self, StreamExt, TryStreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303786,"byte_end":303843,"line_start":507,"line_end":507,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303848,"byte_end":303851,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ let (tx1, rx1) = oneshot::channel();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303856,"byte_end":303896,"line_start":509,"line_end":509,"column_start":5,"column_end":45}},{"value":"/ let (tx2, rx2) = oneshot::channel();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303901,"byte_end":303941,"line_start":510,"line_end":510,"column_start":5,"column_end":45}},{"value":"/ let (_tx3, rx3) = oneshot::channel();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303946,"byte_end":303987,"line_start":511,"line_end":511,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":303992,"byte_end":303995,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(vec![rx1, rx2, rx3]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":304000,"byte_end":304051,"line_start":513,"line_end":513,"column_start":5,"column_end":56}},{"value":"/ let fut = stream.map(Ok).try_for_each_concurrent(","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":304056,"byte_end":304109,"line_start":514,"line_end":514,"column_start":5,"column_end":58}},{"value":"/     /* limit */ 2,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":304114,"byte_end":304136,"line_start":515,"line_end":515,"column_start":5,"column_end":27}},{"value":"/     |rx| async move {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":304141,"byte_end":304166,"line_start":516,"line_end":516,"column_start":5,"column_end":30}},{"value":"/         let res: Result<(), oneshot::Canceled> = rx.await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":304171,"byte_end":304233,"line_start":517,"line_end":517,"column_start":5,"column_end":67}},{"value":"/         res","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":304238,"byte_end":304253,"line_start":518,"line_end":518,"column_start":5,"column_end":20}},{"value":"/     }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":304258,"byte_end":304267,"line_start":519,"line_end":519,"column_start":5,"column_end":14}},{"value":"/ );","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":304272,"byte_end":304278,"line_start":520,"line_end":520,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":304283,"byte_end":304286,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ tx1.send(()).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":304291,"byte_end":304317,"line_start":522,"line_end":522,"column_start":5,"column_end":31}},{"value":"/ // Drop the second sender so that `rx2` resolves to `Canceled`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":304322,"byte_end":304389,"line_start":523,"line_end":523,"column_start":5,"column_end":72}},{"value":"/ drop(tx2);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":304394,"byte_end":304408,"line_start":524,"line_end":524,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":304413,"byte_end":304416,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ // The final result is an error because the second future","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":304421,"byte_end":304482,"line_start":526,"line_end":526,"column_start":5,"column_end":66}},{"value":"/ // resulted in an error.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":304487,"byte_end":304515,"line_start":527,"line_end":527,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(Err(oneshot::Canceled), fut.await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":304520,"byte_end":304570,"line_start":528,"line_end":528,"column_start":5,"column_end":55}},{"value":"/ # })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":304575,"byte_end":304583,"line_start":529,"line_end":529,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":304588,"byte_end":304595,"line_start":530,"line_end":530,"column_start":5,"column_end":12}},{"value":"cfg(not(futures_no_atomic_cas))","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":304600,"byte_end":304634,"line_start":531,"line_end":531,"column_start":5,"column_end":39}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":304639,"byte_end":304664,"line_start":532,"line_end":532,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":4670},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":306144,"byte_end":306155,"line_start":580,"line_end":580,"column_start":8,"column_end":19},"name":"try_collect","qualname":"::stream::try_stream::TryStreamExt::try_collect","value":"pub fn try_collect<C: Default + Extend<Self::Ok>>(Self) -> TryCollect<Self, C>\nwhere Self: Sized","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" Attempt to transform a stream into a collection,\n returning a future representing the result of that computation.","sig":null,"attributes":[{"value":"/ Attempt to transform a stream into a collection,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305105,"byte_end":305157,"line_start":550,"line_end":550,"column_start":5,"column_end":57}},{"value":"/ returning a future representing the result of that computation.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305162,"byte_end":305229,"line_start":551,"line_end":551,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305234,"byte_end":305237,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ This combinator will collect all successful results of this stream and","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305242,"byte_end":305316,"line_start":553,"line_end":553,"column_start":5,"column_end":79}},{"value":"/ collect them into the specified collection type. If an error happens then all","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305321,"byte_end":305402,"line_start":554,"line_end":554,"column_start":5,"column_end":86}},{"value":"/ collected elements will be dropped and the error will be returned.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305407,"byte_end":305477,"line_start":555,"line_end":555,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305482,"byte_end":305485,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ The returned future will be resolved when the stream terminates.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305490,"byte_end":305558,"line_start":557,"line_end":557,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305563,"byte_end":305566,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305571,"byte_end":305585,"line_start":559,"line_end":559,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305590,"byte_end":305593,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305598,"byte_end":305605,"line_start":561,"line_end":561,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305610,"byte_end":305651,"line_start":562,"line_end":562,"column_start":5,"column_end":46}},{"value":"/ use futures::channel::mpsc;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305656,"byte_end":305687,"line_start":563,"line_end":563,"column_start":5,"column_end":36}},{"value":"/ use futures::stream::TryStreamExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305692,"byte_end":305730,"line_start":564,"line_end":564,"column_start":5,"column_end":43}},{"value":"/ use std::thread;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305735,"byte_end":305755,"line_start":565,"line_end":565,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305760,"byte_end":305763,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ let (tx, rx) = mpsc::unbounded();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305768,"byte_end":305805,"line_start":567,"line_end":567,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305810,"byte_end":305813,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ thread::spawn(move || {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305818,"byte_end":305845,"line_start":569,"line_end":569,"column_start":5,"column_end":32}},{"value":"/     for i in 1..=5 {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305850,"byte_end":305874,"line_start":570,"line_end":570,"column_start":5,"column_end":29}},{"value":"/         tx.unbounded_send(Ok(i)).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305879,"byte_end":305925,"line_start":571,"line_end":571,"column_start":5,"column_end":51}},{"value":"/     }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305930,"byte_end":305939,"line_start":572,"line_end":572,"column_start":5,"column_end":14}},{"value":"/     tx.unbounded_send(Err(6)).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305944,"byte_end":305987,"line_start":573,"line_end":573,"column_start":5,"column_end":48}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":305992,"byte_end":305999,"line_start":574,"line_end":574,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":306004,"byte_end":306007,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ let output: Result<Vec<i32>, i32> = rx.try_collect().await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":306012,"byte_end":306075,"line_start":576,"line_end":576,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(output, Err(6));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":306080,"byte_end":306111,"line_start":577,"line_end":577,"column_start":5,"column_end":36}},{"value":"/ # })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":306116,"byte_end":306124,"line_start":578,"line_end":578,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":306129,"byte_end":306136,"line_start":579,"line_end":579,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4672},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307970,"byte_end":307980,"line_start":625,"line_end":625,"column_start":8,"column_end":18},"name":"try_chunks","qualname":"::stream::try_stream::TryStreamExt::try_chunks","value":"pub fn try_chunks(Self, usize) -> TryChunks<Self> where Self: Sized","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" An adaptor for chunking up successful items of the stream inside a vector.","sig":null,"attributes":[{"value":"/ An adaptor for chunking up successful items of the stream inside a vector.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":306338,"byte_end":306416,"line_start":587,"line_end":587,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":306421,"byte_end":306424,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ This combinator will attempt to pull successful items from this stream and buffer","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":306429,"byte_end":306514,"line_start":589,"line_end":589,"column_start":5,"column_end":90}},{"value":"/ them into a local vector. At most `capacity` items will get buffered","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":306519,"byte_end":306591,"line_start":590,"line_end":590,"column_start":5,"column_end":77}},{"value":"/ before they're yielded from the returned stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":306596,"byte_end":306648,"line_start":591,"line_end":591,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":306653,"byte_end":306656,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ Note that the vectors returned from this iterator may not always have","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":306661,"byte_end":306734,"line_start":593,"line_end":593,"column_start":5,"column_end":78}},{"value":"/ `capacity` elements. If the underlying stream ended and only a partial","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":306739,"byte_end":306813,"line_start":594,"line_end":594,"column_start":5,"column_end":79}},{"value":"/ vector was created, it'll be returned. Additionally if an error happens","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":306818,"byte_end":306893,"line_start":595,"line_end":595,"column_start":5,"column_end":80}},{"value":"/ from the underlying stream then the currently buffered items will be","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":306898,"byte_end":306970,"line_start":596,"line_end":596,"column_start":5,"column_end":77}},{"value":"/ yielded.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":306975,"byte_end":306987,"line_start":597,"line_end":597,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":306992,"byte_end":306995,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ This method is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307000,"byte_end":307075,"line_start":599,"line_end":599,"column_start":5,"column_end":80}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307080,"byte_end":307137,"line_start":600,"line_end":600,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307142,"byte_end":307145,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ This function is similar to","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307150,"byte_end":307181,"line_start":602,"line_end":602,"column_start":5,"column_end":36}},{"value":"/ [`StreamExt::chunks`](crate::stream::StreamExt::chunks) but exits","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307186,"byte_end":307255,"line_start":603,"line_end":603,"column_start":5,"column_end":74}},{"value":"/ early if an error occurs.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307260,"byte_end":307289,"line_start":604,"line_end":604,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307294,"byte_end":307297,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307302,"byte_end":307316,"line_start":606,"line_end":606,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307321,"byte_end":307324,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307329,"byte_end":307336,"line_start":608,"line_end":608,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307341,"byte_end":307382,"line_start":609,"line_end":609,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, TryChunksError, TryStreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307387,"byte_end":307449,"line_start":610,"line_end":610,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307454,"byte_end":307457,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(vec![Ok::<i32, i32>(1), Ok(2), Ok(3), Err(4), Ok(5), Ok(6)]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307462,"byte_end":307553,"line_start":612,"line_end":612,"column_start":5,"column_end":96}},{"value":"/ let mut stream = stream.try_chunks(2);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307558,"byte_end":307600,"line_start":613,"line_end":613,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307605,"byte_end":307608,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(stream.try_next().await, Ok(Some(vec![1, 2])));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307613,"byte_end":307675,"line_start":615,"line_end":615,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(stream.try_next().await, Err(TryChunksError(vec![3], 4)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307680,"byte_end":307753,"line_start":616,"line_end":616,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(stream.try_next().await, Ok(Some(vec![5, 6])));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307758,"byte_end":307820,"line_start":617,"line_end":617,"column_start":5,"column_end":67}},{"value":"/ # })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307825,"byte_end":307833,"line_start":618,"line_end":618,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307838,"byte_end":307845,"line_start":619,"line_end":619,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307850,"byte_end":307853,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307858,"byte_end":307870,"line_start":621,"line_end":621,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307875,"byte_end":307878,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ This method will panic if `capacity` is zero.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307883,"byte_end":307932,"line_start":623,"line_end":623,"column_start":5,"column_end":54}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":307937,"byte_end":307962,"line_start":624,"line_end":624,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":4673},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":309503,"byte_end":309513,"line_start":664,"line_end":664,"column_start":8,"column_end":18},"name":"try_filter","qualname":"::stream::try_stream::TryStreamExt::try_filter","value":"pub fn try_filter<Fut, F>(Self, F) -> TryFilter<Self, Fut, F> where\nFut: Future<Output = bool>, F: FnMut(&Self::Ok) -> Fut, Self: Sized","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" Attempt to filter the values produced by this stream according to the\n provided asynchronous closure.","sig":null,"attributes":[{"value":"/ Attempt to filter the values produced by this stream according to the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":308215,"byte_end":308288,"line_start":634,"line_end":634,"column_start":5,"column_end":78}},{"value":"/ provided asynchronous closure.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":308293,"byte_end":308327,"line_start":635,"line_end":635,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":308332,"byte_end":308335,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ As values of this stream are made available, the provided predicate `f`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":308340,"byte_end":308415,"line_start":637,"line_end":637,"column_start":5,"column_end":80}},{"value":"/ will be run on them. If the predicate returns a `Future` which resolves","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":308420,"byte_end":308495,"line_start":638,"line_end":638,"column_start":5,"column_end":80}},{"value":"/ to `true`, then the stream will yield the value, but if the predicate","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":308500,"byte_end":308573,"line_start":639,"line_end":639,"column_start":5,"column_end":78}},{"value":"/ return a `Future` which resolves to `false`, then the value will be","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":308578,"byte_end":308649,"line_start":640,"line_end":640,"column_start":5,"column_end":76}},{"value":"/ discarded and the next value will be produced.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":308654,"byte_end":308704,"line_start":641,"line_end":641,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":308709,"byte_end":308712,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ All errors are passed through without filtering in this combinator.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":308717,"byte_end":308788,"line_start":643,"line_end":643,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":308793,"byte_end":308796,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ Note that this function consumes the stream passed into it and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":308801,"byte_end":308877,"line_start":645,"line_end":645,"column_start":5,"column_end":81}},{"value":"/ wrapped version of it, similar to the existing `filter` methods in","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":308882,"byte_end":308952,"line_start":646,"line_end":646,"column_start":5,"column_end":75}},{"value":"/ the standard library.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":308957,"byte_end":308982,"line_start":647,"line_end":647,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":308987,"byte_end":308990,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":308995,"byte_end":309009,"line_start":649,"line_end":649,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":309014,"byte_end":309021,"line_start":650,"line_end":650,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":309026,"byte_end":309067,"line_start":651,"line_end":651,"column_start":5,"column_end":46}},{"value":"/ use futures::future;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":309072,"byte_end":309096,"line_start":652,"line_end":652,"column_start":5,"column_end":29}},{"value":"/ use futures::stream::{self, StreamExt, TryStreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":309101,"byte_end":309158,"line_start":653,"line_end":653,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":309163,"byte_end":309166,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(vec![Ok(1i32), Ok(2i32), Ok(3i32), Err(\"error\")]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":309171,"byte_end":309251,"line_start":655,"line_end":655,"column_start":5,"column_end":85}},{"value":"/ let mut evens = stream.try_filter(|x| {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":309256,"byte_end":309299,"line_start":656,"line_end":656,"column_start":5,"column_end":48}},{"value":"/     future::ready(x % 2 == 0)","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":309304,"byte_end":309337,"line_start":657,"line_end":657,"column_start":5,"column_end":38}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":309342,"byte_end":309349,"line_start":658,"line_end":658,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":309354,"byte_end":309357,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(evens.next().await, Some(Ok(2)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":309362,"byte_end":309410,"line_start":660,"line_end":660,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(evens.next().await, Some(Err(\"error\")));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":309415,"byte_end":309470,"line_start":661,"line_end":661,"column_start":5,"column_end":60}},{"value":"/ # })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":309475,"byte_end":309483,"line_start":662,"line_end":662,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":309488,"byte_end":309495,"line_start":663,"line_end":663,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4676},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":311140,"byte_end":311154,"line_start":705,"line_end":705,"column_start":8,"column_end":22},"name":"try_filter_map","qualname":"::stream::try_stream::TryStreamExt::try_filter_map","value":"pub fn try_filter_map<Fut, F, T>(Self, F) -> TryFilterMap<Self, Fut, F> where\nFut: TryFuture<Ok = Option<T>, Error = Option<T>>, F: FnMut(Self::Ok) -> Fut,\nSelf: Sized","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" Attempt to filter the values produced by this stream while\n simultaneously mapping them to a different type according to the\n provided asynchronous closure.","sig":null,"attributes":[{"value":"/ Attempt to filter the values produced by this stream while","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":309764,"byte_end":309826,"line_start":673,"line_end":673,"column_start":5,"column_end":67}},{"value":"/ simultaneously mapping them to a different type according to the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":309831,"byte_end":309899,"line_start":674,"line_end":674,"column_start":5,"column_end":73}},{"value":"/ provided asynchronous closure.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":309904,"byte_end":309938,"line_start":675,"line_end":675,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":309943,"byte_end":309946,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ As values of this stream are made available, the provided function will","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":309951,"byte_end":310026,"line_start":677,"line_end":677,"column_start":5,"column_end":80}},{"value":"/ be run on them. If the future returned by the predicate `f` resolves to","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310031,"byte_end":310106,"line_start":678,"line_end":678,"column_start":5,"column_end":80}},{"value":"/ [`Some(item)`](Some) then the stream will yield the value `item`, but if","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310111,"byte_end":310187,"line_start":679,"line_end":679,"column_start":5,"column_end":81}},{"value":"/ it resolves to [`None`] then the next value will be produced.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310192,"byte_end":310257,"line_start":680,"line_end":680,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310262,"byte_end":310265,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ All errors are passed through without filtering in this combinator.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310270,"byte_end":310341,"line_start":682,"line_end":682,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310346,"byte_end":310349,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ Note that this function consumes the stream passed into it and returns a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310354,"byte_end":310430,"line_start":684,"line_end":684,"column_start":5,"column_end":81}},{"value":"/ wrapped version of it, similar to the existing `filter_map` methods in","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310435,"byte_end":310509,"line_start":685,"line_end":685,"column_start":5,"column_end":79}},{"value":"/ the standard library.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310514,"byte_end":310539,"line_start":686,"line_end":686,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310544,"byte_end":310547,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310552,"byte_end":310566,"line_start":688,"line_end":688,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310571,"byte_end":310578,"line_start":689,"line_end":689,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310583,"byte_end":310624,"line_start":690,"line_end":690,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, StreamExt, TryStreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310629,"byte_end":310686,"line_start":691,"line_end":691,"column_start":5,"column_end":62}},{"value":"/ use futures::pin_mut;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310691,"byte_end":310716,"line_start":692,"line_end":692,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310721,"byte_end":310724,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ let stream = stream::iter(vec![Ok(1i32), Ok(6i32), Err(\"error\")]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310729,"byte_end":310799,"line_start":694,"line_end":694,"column_start":5,"column_end":75}},{"value":"/ let halves = stream.try_filter_map(|x| async move {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310804,"byte_end":310859,"line_start":695,"line_end":695,"column_start":5,"column_end":60}},{"value":"/     let ret = if x % 2 == 0 { Some(x / 2) } else { None };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310864,"byte_end":310926,"line_start":696,"line_end":696,"column_start":5,"column_end":67}},{"value":"/     Ok(ret)","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310931,"byte_end":310946,"line_start":697,"line_end":697,"column_start":5,"column_end":20}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310951,"byte_end":310958,"line_start":698,"line_end":698,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310963,"byte_end":310966,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ pin_mut!(halves);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310971,"byte_end":310992,"line_start":700,"line_end":700,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(halves.next().await, Some(Ok(3)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":310997,"byte_end":311046,"line_start":701,"line_end":701,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(halves.next().await, Some(Err(\"error\")));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":311051,"byte_end":311107,"line_start":702,"line_end":702,"column_start":5,"column_end":61}},{"value":"/ # })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":311112,"byte_end":311120,"line_start":703,"line_end":703,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":311125,"byte_end":311132,"line_start":704,"line_end":704,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4680},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312846,"byte_end":312857,"line_start":752,"line_end":752,"column_start":8,"column_end":19},"name":"try_flatten","qualname":"::stream::try_stream::TryStreamExt::try_flatten","value":"pub fn try_flatten(Self) -> TryFlatten<Self> where Self::Ok: TryStream,\n<Self::Ok as TryStream>::Error: From<Self::Error>, Self: Sized","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" Flattens a stream of streams into just one continuous stream.","sig":null,"attributes":[{"value":"/ Flattens a stream of streams into just one continuous stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":311431,"byte_end":311496,"line_start":714,"line_end":714,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":311501,"byte_end":311504,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ If this stream's elements are themselves streams then this combinator","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":311509,"byte_end":311582,"line_start":716,"line_end":716,"column_start":5,"column_end":78}},{"value":"/ will flatten out the entire stream to one long chain of elements. Any","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":311587,"byte_end":311660,"line_start":717,"line_end":717,"column_start":5,"column_end":78}},{"value":"/ errors are passed through without looking at them, but otherwise each","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":311665,"byte_end":311738,"line_start":718,"line_end":718,"column_start":5,"column_end":78}},{"value":"/ individual stream will get exhausted before moving on to the next.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":311743,"byte_end":311813,"line_start":719,"line_end":719,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":311818,"byte_end":311821,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":311826,"byte_end":311840,"line_start":721,"line_end":721,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":311845,"byte_end":311848,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":311853,"byte_end":311860,"line_start":723,"line_end":723,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":311865,"byte_end":311906,"line_start":724,"line_end":724,"column_start":5,"column_end":46}},{"value":"/ use futures::channel::mpsc;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":311911,"byte_end":311942,"line_start":725,"line_end":725,"column_start":5,"column_end":36}},{"value":"/ use futures::stream::{StreamExt, TryStreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":311947,"byte_end":311998,"line_start":726,"line_end":726,"column_start":5,"column_end":56}},{"value":"/ use std::thread;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312003,"byte_end":312023,"line_start":727,"line_end":727,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312028,"byte_end":312031,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ let (tx1, rx1) = mpsc::unbounded();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312036,"byte_end":312075,"line_start":729,"line_end":729,"column_start":5,"column_end":44}},{"value":"/ let (tx2, rx2) = mpsc::unbounded();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312080,"byte_end":312119,"line_start":730,"line_end":730,"column_start":5,"column_end":44}},{"value":"/ let (tx3, rx3) = mpsc::unbounded();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312124,"byte_end":312163,"line_start":731,"line_end":731,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312168,"byte_end":312171,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ thread::spawn(move || {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312176,"byte_end":312203,"line_start":733,"line_end":733,"column_start":5,"column_end":32}},{"value":"/     tx1.unbounded_send(Ok(1)).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312208,"byte_end":312251,"line_start":734,"line_end":734,"column_start":5,"column_end":48}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312256,"byte_end":312263,"line_start":735,"line_end":735,"column_start":5,"column_end":12}},{"value":"/ thread::spawn(move || {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312268,"byte_end":312295,"line_start":736,"line_end":736,"column_start":5,"column_end":32}},{"value":"/     tx2.unbounded_send(Ok(2)).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312300,"byte_end":312343,"line_start":737,"line_end":737,"column_start":5,"column_end":48}},{"value":"/     tx2.unbounded_send(Err(3)).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312348,"byte_end":312392,"line_start":738,"line_end":738,"column_start":5,"column_end":49}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312397,"byte_end":312404,"line_start":739,"line_end":739,"column_start":5,"column_end":12}},{"value":"/ thread::spawn(move || {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312409,"byte_end":312436,"line_start":740,"line_end":740,"column_start":5,"column_end":32}},{"value":"/     tx3.unbounded_send(Ok(rx1)).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312441,"byte_end":312486,"line_start":741,"line_end":741,"column_start":5,"column_end":50}},{"value":"/     tx3.unbounded_send(Ok(rx2)).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312491,"byte_end":312536,"line_start":742,"line_end":742,"column_start":5,"column_end":50}},{"value":"/     tx3.unbounded_send(Err(4)).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312541,"byte_end":312585,"line_start":743,"line_end":743,"column_start":5,"column_end":49}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312590,"byte_end":312597,"line_start":744,"line_end":744,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312602,"byte_end":312605,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ let mut stream = rx3.try_flatten();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312610,"byte_end":312649,"line_start":746,"line_end":746,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(stream.next().await, Some(Ok(1)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312654,"byte_end":312703,"line_start":747,"line_end":747,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(stream.next().await, Some(Ok(2)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312708,"byte_end":312757,"line_start":748,"line_end":748,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(stream.next().await, Some(Err(3)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312762,"byte_end":312812,"line_start":749,"line_end":749,"column_start":5,"column_end":55}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312817,"byte_end":312826,"line_start":750,"line_end":750,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":312831,"byte_end":312838,"line_start":751,"line_end":751,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4681},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":314449,"byte_end":314457,"line_start":791,"line_end":791,"column_start":8,"column_end":16},"name":"try_fold","qualname":"::stream::try_stream::TryStreamExt::try_fold","value":"pub fn try_fold<T, Fut, F>(Self, T, F) -> TryFold<Self, Fut, T, F> where\nF: FnMut(T, Self::Ok) -> Fut, Fut: TryFuture<Ok = T, Error = T>, Self: Sized","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" Attempt to execute an accumulating asynchronous computation over a\n stream, collecting all the values into one final result.","sig":null,"attributes":[{"value":"/ Attempt to execute an accumulating asynchronous computation over a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":313162,"byte_end":313232,"line_start":763,"line_end":763,"column_start":5,"column_end":75}},{"value":"/ stream, collecting all the values into one final result.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":313237,"byte_end":313297,"line_start":764,"line_end":764,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":313302,"byte_end":313305,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ This combinator will accumulate all values returned by this stream","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":313310,"byte_end":313380,"line_start":766,"line_end":766,"column_start":5,"column_end":75}},{"value":"/ according to the closure provided. The initial state is also provided to","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":313385,"byte_end":313461,"line_start":767,"line_end":767,"column_start":5,"column_end":81}},{"value":"/ this method and then is returned again by each execution of the closure.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":313466,"byte_end":313542,"line_start":768,"line_end":768,"column_start":5,"column_end":81}},{"value":"/ Once the entire stream has been exhausted the returned future will","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":313547,"byte_end":313617,"line_start":769,"line_end":769,"column_start":5,"column_end":75}},{"value":"/ resolve to this value.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":313622,"byte_end":313648,"line_start":770,"line_end":770,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":313653,"byte_end":313656,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ This method is similar to [`fold`](crate::stream::StreamExt::fold), but will","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":313661,"byte_end":313741,"line_start":772,"line_end":772,"column_start":5,"column_end":85}},{"value":"/ exit early if an error is encountered in either the stream or the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":313746,"byte_end":313815,"line_start":773,"line_end":773,"column_start":5,"column_end":74}},{"value":"/ provided closure.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":313820,"byte_end":313841,"line_start":774,"line_end":774,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":313846,"byte_end":313849,"line_start":775,"line_end":775,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":313854,"byte_end":313868,"line_start":776,"line_end":776,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":313873,"byte_end":313876,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":313881,"byte_end":313888,"line_start":778,"line_end":778,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":313893,"byte_end":313934,"line_start":779,"line_end":779,"column_start":5,"column_end":46}},{"value":"/ use futures::stream::{self, TryStreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":313939,"byte_end":313985,"line_start":780,"line_end":780,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":313990,"byte_end":313993,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ let number_stream = stream::iter(vec![Ok::<i32, i32>(1), Ok(2)]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":313998,"byte_end":314067,"line_start":782,"line_end":782,"column_start":5,"column_end":74}},{"value":"/ let sum = number_stream.try_fold(0, |acc, x| async move { Ok(acc + x) });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":314072,"byte_end":314149,"line_start":783,"line_end":783,"column_start":5,"column_end":82}},{"value":"/ assert_eq!(sum.await, Ok(3));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":314154,"byte_end":314187,"line_start":784,"line_end":784,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":314192,"byte_end":314195,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ let number_stream_with_err = stream::iter(vec![Ok::<i32, i32>(1), Err(2), Ok(1)]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":314200,"byte_end":314286,"line_start":786,"line_end":786,"column_start":5,"column_end":91}},{"value":"/ let sum = number_stream_with_err.try_fold(0, |acc, x| async move { Ok(acc + x) });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":314291,"byte_end":314377,"line_start":787,"line_end":787,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(sum.await, Err(2));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":314382,"byte_end":314416,"line_start":788,"line_end":788,"column_start":5,"column_end":39}},{"value":"/ # })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":314421,"byte_end":314429,"line_start":789,"line_end":789,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":314434,"byte_end":314441,"line_start":790,"line_end":790,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4685},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315983,"byte_end":315993,"line_start":834,"line_end":834,"column_start":8,"column_end":18},"name":"try_concat","qualname":"::stream::try_stream::TryStreamExt::try_concat","value":"pub fn try_concat(Self) -> TryConcat<Self> where Self: Sized,\nSelf::Ok: Extend<<<Self as TryStream>::Ok as IntoIterator>::Item> +\nIntoIterator + Default","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" Attempt to concatenate all items of a stream into a single\n extendable destination, returning a future representing the end result.","sig":null,"attributes":[{"value":"/ Attempt to concatenate all items of a stream into a single","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":314737,"byte_end":314799,"line_start":800,"line_end":800,"column_start":5,"column_end":67}},{"value":"/ extendable destination, returning a future representing the end result.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":314804,"byte_end":314879,"line_start":801,"line_end":801,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":314884,"byte_end":314887,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ This combinator will extend the first item with the contents of all","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":314892,"byte_end":314963,"line_start":803,"line_end":803,"column_start":5,"column_end":76}},{"value":"/ the subsequent successful results of the stream. If the stream is empty,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":314968,"byte_end":315044,"line_start":804,"line_end":804,"column_start":5,"column_end":81}},{"value":"/ the default value will be returned.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315049,"byte_end":315088,"line_start":805,"line_end":805,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315093,"byte_end":315096,"line_start":806,"line_end":806,"column_start":5,"column_end":8}},{"value":"/ Works with all collections that implement the [`Extend`](std::iter::Extend) trait.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315101,"byte_end":315187,"line_start":807,"line_end":807,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315192,"byte_end":315195,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ This method is similar to [`concat`](crate::stream::StreamExt::concat), but will","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315200,"byte_end":315284,"line_start":809,"line_end":809,"column_start":5,"column_end":89}},{"value":"/ exit early if an error is encountered in the stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315289,"byte_end":315345,"line_start":810,"line_end":810,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315350,"byte_end":315353,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315358,"byte_end":315372,"line_start":812,"line_end":812,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315377,"byte_end":315380,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315385,"byte_end":315392,"line_start":814,"line_end":814,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315397,"byte_end":315438,"line_start":815,"line_end":815,"column_start":5,"column_end":46}},{"value":"/ use futures::channel::mpsc;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315443,"byte_end":315474,"line_start":816,"line_end":816,"column_start":5,"column_end":36}},{"value":"/ use futures::stream::TryStreamExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315479,"byte_end":315517,"line_start":817,"line_end":817,"column_start":5,"column_end":43}},{"value":"/ use std::thread;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315522,"byte_end":315542,"line_start":818,"line_end":818,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315547,"byte_end":315550,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ let (tx, rx) = mpsc::unbounded::<Result<Vec<i32>, ()>>();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315555,"byte_end":315616,"line_start":820,"line_end":820,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315621,"byte_end":315624,"line_start":821,"line_end":821,"column_start":5,"column_end":8}},{"value":"/ thread::spawn(move || {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315629,"byte_end":315656,"line_start":822,"line_end":822,"column_start":5,"column_end":32}},{"value":"/     for i in (0..3).rev() {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315661,"byte_end":315692,"line_start":823,"line_end":823,"column_start":5,"column_end":36}},{"value":"/         let n = i * 3;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315697,"byte_end":315723,"line_start":824,"line_end":824,"column_start":5,"column_end":31}},{"value":"/         tx.unbounded_send(Ok(vec![n + 1, n + 2, n + 3])).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315728,"byte_end":315798,"line_start":825,"line_end":825,"column_start":5,"column_end":75}},{"value":"/     }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315803,"byte_end":315812,"line_start":826,"line_end":826,"column_start":5,"column_end":14}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315817,"byte_end":315824,"line_start":827,"line_end":827,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315829,"byte_end":315832,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ let result = rx.try_concat().await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315837,"byte_end":315876,"line_start":829,"line_end":829,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315881,"byte_end":315884,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, Ok(vec![7, 8, 9, 4, 5, 6, 1, 2, 3]));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315889,"byte_end":315949,"line_start":831,"line_end":831,"column_start":5,"column_end":65}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315954,"byte_end":315963,"line_start":832,"line_end":832,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":315968,"byte_end":315975,"line_start":833,"line_end":833,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4686},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":318715,"byte_end":318735,"line_start":901,"line_end":901,"column_start":8,"column_end":28},"name":"try_buffer_unordered","qualname":"::stream::try_stream::TryStreamExt::try_buffer_unordered","value":"pub fn try_buffer_unordered(Self, usize) -> TryBufferUnordered<Self> where\nSelf::Ok: TryFuture<Error = Self::Error>, Self: Sized","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" Attempt to execute several futures from a stream concurrently (unordered).","sig":null,"attributes":[{"value":"/ Attempt to execute several futures from a stream concurrently (unordered).","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":316247,"byte_end":316325,"line_start":842,"line_end":842,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":316330,"byte_end":316333,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ This stream's `Ok` type must be a [`TryFuture`](futures_core::future::TryFuture) with an `Error` type","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":316338,"byte_end":316443,"line_start":844,"line_end":844,"column_start":5,"column_end":110}},{"value":"/ that matches the stream's `Error` type.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":316448,"byte_end":316491,"line_start":845,"line_end":845,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":316496,"byte_end":316499,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ This adaptor will buffer up to `n` futures and then return their","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":316504,"byte_end":316572,"line_start":847,"line_end":847,"column_start":5,"column_end":73}},{"value":"/ outputs in the order in which they complete. If the underlying stream","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":316577,"byte_end":316650,"line_start":848,"line_end":848,"column_start":5,"column_end":78}},{"value":"/ returns an error, it will be immediately propagated.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":316655,"byte_end":316711,"line_start":849,"line_end":849,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":316716,"byte_end":316719,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ The returned stream will be a stream of results, each containing either","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":316724,"byte_end":316799,"line_start":851,"line_end":851,"column_start":5,"column_end":80}},{"value":"/ an error or a future's output. An error can be produced either by the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":316804,"byte_end":316877,"line_start":852,"line_end":852,"column_start":5,"column_end":78}},{"value":"/ underlying stream itself or by one of the futures it yielded.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":316882,"byte_end":316947,"line_start":853,"line_end":853,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":316952,"byte_end":316955,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ This method is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":316960,"byte_end":317035,"line_start":855,"line_end":855,"column_start":5,"column_end":80}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317040,"byte_end":317097,"line_start":856,"line_end":856,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317102,"byte_end":317105,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317110,"byte_end":317124,"line_start":858,"line_end":858,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317129,"byte_end":317132,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ Results are returned in the order of completion:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317137,"byte_end":317189,"line_start":860,"line_end":860,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317194,"byte_end":317201,"line_start":861,"line_end":861,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317206,"byte_end":317247,"line_start":862,"line_end":862,"column_start":5,"column_end":46}},{"value":"/ use futures::channel::oneshot;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317252,"byte_end":317286,"line_start":863,"line_end":863,"column_start":5,"column_end":39}},{"value":"/ use futures::stream::{self, StreamExt, TryStreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317291,"byte_end":317348,"line_start":864,"line_end":864,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317353,"byte_end":317356,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ let (send_one, recv_one) = oneshot::channel();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317361,"byte_end":317411,"line_start":866,"line_end":866,"column_start":5,"column_end":55}},{"value":"/ let (send_two, recv_two) = oneshot::channel();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317416,"byte_end":317466,"line_start":867,"line_end":867,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317471,"byte_end":317474,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ let stream_of_futures = stream::iter(vec![Ok(recv_one), Ok(recv_two)]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317479,"byte_end":317554,"line_start":869,"line_end":869,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317559,"byte_end":317562,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ let mut buffered = stream_of_futures.try_buffer_unordered(10);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317567,"byte_end":317633,"line_start":871,"line_end":871,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317638,"byte_end":317641,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ send_two.send(2i32)?;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317646,"byte_end":317671,"line_start":873,"line_end":873,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(buffered.next().await, Some(Ok(2i32)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317676,"byte_end":317730,"line_start":874,"line_end":874,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317735,"byte_end":317738,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ send_one.send(1i32)?;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317743,"byte_end":317768,"line_start":876,"line_end":876,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(buffered.next().await, Some(Ok(1i32)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317773,"byte_end":317827,"line_start":877,"line_end":877,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317832,"byte_end":317835,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffered.next().await, None);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317840,"byte_end":317884,"line_start":879,"line_end":879,"column_start":5,"column_end":49}},{"value":"/ # Ok::<(), i32>(()) }).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317889,"byte_end":317925,"line_start":880,"line_end":880,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317930,"byte_end":317937,"line_start":881,"line_end":881,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317942,"byte_end":317945,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ Errors from the underlying stream itself are propagated:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":317950,"byte_end":318010,"line_start":883,"line_end":883,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":318015,"byte_end":318022,"line_start":884,"line_end":884,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":318027,"byte_end":318068,"line_start":885,"line_end":885,"column_start":5,"column_end":46}},{"value":"/ use futures::channel::mpsc;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":318073,"byte_end":318104,"line_start":886,"line_end":886,"column_start":5,"column_end":36}},{"value":"/ use futures::stream::{StreamExt, TryStreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":318109,"byte_end":318160,"line_start":887,"line_end":887,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":318165,"byte_end":318168,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ let (sink, stream_of_futures) = mpsc::unbounded();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":318173,"byte_end":318227,"line_start":889,"line_end":889,"column_start":5,"column_end":59}},{"value":"/ let mut buffered = stream_of_futures.try_buffer_unordered(10);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":318232,"byte_end":318298,"line_start":890,"line_end":890,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":318303,"byte_end":318306,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ sink.unbounded_send(Ok(async { Ok(7i32) }))?;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":318311,"byte_end":318360,"line_start":892,"line_end":892,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(buffered.next().await, Some(Ok(7i32)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":318365,"byte_end":318419,"line_start":893,"line_end":893,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":318424,"byte_end":318427,"line_start":894,"line_end":894,"column_start":5,"column_end":8}},{"value":"/ sink.unbounded_send(Err(\"error in the stream\"))?;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":318432,"byte_end":318485,"line_start":895,"line_end":895,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(buffered.next().await, Some(Err(\"error in the stream\")));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":318490,"byte_end":318562,"line_start":896,"line_end":896,"column_start":5,"column_end":77}},{"value":"/ # Ok::<(), Box<dyn std::error::Error>>(()) }).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":318567,"byte_end":318626,"line_start":897,"line_end":897,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":318631,"byte_end":318638,"line_start":898,"line_end":898,"column_start":5,"column_end":12}},{"value":"cfg(not(futures_no_atomic_cas))","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":318643,"byte_end":318677,"line_start":899,"line_end":899,"column_start":5,"column_end":39}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":318682,"byte_end":318707,"line_start":900,"line_end":900,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":4687},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":321716,"byte_end":321728,"line_start":977,"line_end":977,"column_start":8,"column_end":20},"name":"try_buffered","qualname":"::stream::try_stream::TryStreamExt::try_buffered","value":"pub fn try_buffered(Self, usize) -> TryBuffered<Self> where\nSelf::Ok: TryFuture<Error = Self::Error>, Self: Sized","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" Attempt to execute several futures from a stream concurrently.","sig":null,"attributes":[{"value":"/ Attempt to execute several futures from a stream concurrently.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319012,"byte_end":319078,"line_start":911,"line_end":911,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319083,"byte_end":319086,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ This stream's `Ok` type must be a [`TryFuture`](futures_core::future::TryFuture) with an `Error` type","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319091,"byte_end":319196,"line_start":913,"line_end":913,"column_start":5,"column_end":110}},{"value":"/ that matches the stream's `Error` type.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319201,"byte_end":319244,"line_start":914,"line_end":914,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319249,"byte_end":319252,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ This adaptor will buffer up to `n` futures and then return their","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319257,"byte_end":319325,"line_start":916,"line_end":916,"column_start":5,"column_end":73}},{"value":"/ outputs in the order. If the underlying stream returns an error, it will","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319330,"byte_end":319406,"line_start":917,"line_end":917,"column_start":5,"column_end":81}},{"value":"/ be immediately propagated.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319411,"byte_end":319441,"line_start":918,"line_end":918,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319446,"byte_end":319449,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ The returned stream will be a stream of results, each containing either","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319454,"byte_end":319529,"line_start":920,"line_end":920,"column_start":5,"column_end":80}},{"value":"/ an error or a future's output. An error can be produced either by the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319534,"byte_end":319607,"line_start":921,"line_end":921,"column_start":5,"column_end":78}},{"value":"/ underlying stream itself or by one of the futures it yielded.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319612,"byte_end":319677,"line_start":922,"line_end":922,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319682,"byte_end":319685,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ This method is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319690,"byte_end":319765,"line_start":924,"line_end":924,"column_start":5,"column_end":80}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319770,"byte_end":319827,"line_start":925,"line_end":925,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319832,"byte_end":319835,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319840,"byte_end":319854,"line_start":927,"line_end":927,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319859,"byte_end":319862,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ Results are returned in the order of addition:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319867,"byte_end":319917,"line_start":929,"line_end":929,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319922,"byte_end":319929,"line_start":930,"line_end":930,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319934,"byte_end":319975,"line_start":931,"line_end":931,"column_start":5,"column_end":46}},{"value":"/ use futures::channel::oneshot;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":319980,"byte_end":320014,"line_start":932,"line_end":932,"column_start":5,"column_end":39}},{"value":"/ use futures::future::lazy;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320019,"byte_end":320049,"line_start":933,"line_end":933,"column_start":5,"column_end":35}},{"value":"/ use futures::stream::{self, StreamExt, TryStreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320054,"byte_end":320111,"line_start":934,"line_end":934,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320116,"byte_end":320119,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ let (send_one, recv_one) = oneshot::channel();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320124,"byte_end":320174,"line_start":936,"line_end":936,"column_start":5,"column_end":55}},{"value":"/ let (send_two, recv_two) = oneshot::channel();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320179,"byte_end":320229,"line_start":937,"line_end":937,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320234,"byte_end":320237,"line_start":938,"line_end":938,"column_start":5,"column_end":8}},{"value":"/ let mut buffered = lazy(move |cx| {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320242,"byte_end":320281,"line_start":939,"line_end":939,"column_start":5,"column_end":44}},{"value":"/     let stream_of_futures = stream::iter(vec![Ok(recv_one), Ok(recv_two)]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320286,"byte_end":320365,"line_start":940,"line_end":940,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320370,"byte_end":320373,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/     let mut buffered = stream_of_futures.try_buffered(10);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320378,"byte_end":320440,"line_start":942,"line_end":942,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320445,"byte_end":320448,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/     assert!(buffered.try_poll_next_unpin(cx).is_pending());","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320453,"byte_end":320516,"line_start":944,"line_end":944,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320521,"byte_end":320524,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/     send_two.send(2i32)?;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320529,"byte_end":320558,"line_start":946,"line_end":946,"column_start":5,"column_end":34}},{"value":"/     assert!(buffered.try_poll_next_unpin(cx).is_pending());","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320563,"byte_end":320626,"line_start":947,"line_end":947,"column_start":5,"column_end":68}},{"value":"/     Ok::<_, i32>(buffered)","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320631,"byte_end":320661,"line_start":948,"line_end":948,"column_start":5,"column_end":35}},{"value":"/ }).await?;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320666,"byte_end":320680,"line_start":949,"line_end":949,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320685,"byte_end":320688,"line_start":950,"line_end":950,"column_start":5,"column_end":8}},{"value":"/ send_one.send(1i32)?;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320693,"byte_end":320718,"line_start":951,"line_end":951,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(buffered.next().await, Some(Ok(1i32)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320723,"byte_end":320777,"line_start":952,"line_end":952,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(buffered.next().await, Some(Ok(2i32)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320782,"byte_end":320836,"line_start":953,"line_end":953,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320841,"byte_end":320844,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffered.next().await, None);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320849,"byte_end":320893,"line_start":955,"line_end":955,"column_start":5,"column_end":49}},{"value":"/ # Ok::<(), i32>(()) }).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320898,"byte_end":320934,"line_start":956,"line_end":956,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320939,"byte_end":320946,"line_start":957,"line_end":957,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320951,"byte_end":320954,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ Errors from the underlying stream itself are propagated:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":320959,"byte_end":321019,"line_start":959,"line_end":959,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":321024,"byte_end":321031,"line_start":960,"line_end":960,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":321036,"byte_end":321077,"line_start":961,"line_end":961,"column_start":5,"column_end":46}},{"value":"/ use futures::channel::mpsc;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":321082,"byte_end":321113,"line_start":962,"line_end":962,"column_start":5,"column_end":36}},{"value":"/ use futures::stream::{StreamExt, TryStreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":321118,"byte_end":321169,"line_start":963,"line_end":963,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":321174,"byte_end":321177,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ let (sink, stream_of_futures) = mpsc::unbounded();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":321182,"byte_end":321236,"line_start":965,"line_end":965,"column_start":5,"column_end":59}},{"value":"/ let mut buffered = stream_of_futures.try_buffered(10);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":321241,"byte_end":321299,"line_start":966,"line_end":966,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":321304,"byte_end":321307,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ sink.unbounded_send(Ok(async { Ok(7i32) }))?;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":321312,"byte_end":321361,"line_start":968,"line_end":968,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(buffered.next().await, Some(Ok(7i32)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":321366,"byte_end":321420,"line_start":969,"line_end":969,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":321425,"byte_end":321428,"line_start":970,"line_end":970,"column_start":5,"column_end":8}},{"value":"/ sink.unbounded_send(Err(\"error in the stream\"))?;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":321433,"byte_end":321486,"line_start":971,"line_end":971,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(buffered.next().await, Some(Err(\"error in the stream\")));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":321491,"byte_end":321563,"line_start":972,"line_end":972,"column_start":5,"column_end":77}},{"value":"/ # Ok::<(), Box<dyn std::error::Error>>(()) }).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":321568,"byte_end":321627,"line_start":973,"line_end":973,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":321632,"byte_end":321639,"line_start":974,"line_end":974,"column_start":5,"column_end":12}},{"value":"cfg(not(futures_no_atomic_cas))","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":321644,"byte_end":321678,"line_start":975,"line_end":975,"column_start":5,"column_end":39}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":321683,"byte_end":321708,"line_start":976,"line_end":976,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":4688},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":322183,"byte_end":322202,"line_start":991,"line_end":991,"column_start":8,"column_end":27},"name":"try_poll_next_unpin","qualname":"::stream::try_stream::TryStreamExt::try_poll_next_unpin","value":"pub fn try_poll_next_unpin(&mut Self, &mut Context)\n-> Poll<Option<Result<Self::Ok, Self::Error>>> where Self: Unpin","parent":{"krate":0,"index":4636},"children":[],"decl_id":null,"docs":" A convenience method for calling [`TryStream::try_poll_next`] on [`Unpin`]\n stream types.\n","sig":null,"attributes":[{"value":"/ A convenience method for calling [`TryStream::try_poll_next`] on [`Unpin`]","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":322075,"byte_end":322153,"line_start":989,"line_end":989,"column_start":5,"column_end":83}},{"value":"/ stream types.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":322158,"byte_end":322175,"line_start":990,"line_end":990,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":12155},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":373717,"byte_end":373721,"line_start":9,"line_end":9,"column_start":12,"column_end":16},"name":"Iter","qualname":"::stream::iter::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":12157}],"decl_id":null,"docs":" Stream for the [`iter`] function.\n","sig":null,"attributes":[{"value":"/ Stream for the [`iter`] function.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":373595,"byte_end":373632,"line_start":6,"line_end":6,"column_start":1,"column_end":38}},{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":373657,"byte_end":373705,"line_start":8,"line_end":8,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":4789},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":374239,"byte_end":374243,"line_start":29,"line_end":29,"column_start":8,"column_end":12},"name":"iter","qualname":"::stream::iter::iter","value":"pub fn iter<I>(I) -> Iter<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Converts an `Iterator` into a `Stream` which is always ready\n to yield the next value.","sig":null,"attributes":[{"value":"/ Converts an `Iterator` into a `Stream` which is always ready","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":373773,"byte_end":373837,"line_start":15,"line_end":15,"column_start":1,"column_end":65}},{"value":"/ to yield the next value.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":373838,"byte_end":373866,"line_start":16,"line_end":16,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":373867,"byte_end":373870,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Iterators in Rust don't express the ability to block, so this adapter","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":373871,"byte_end":373944,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"/ simply always calls `iter.next()` and returns that.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":373945,"byte_end":374000,"line_start":19,"line_end":19,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":374001,"byte_end":374004,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":374005,"byte_end":374012,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":374013,"byte_end":374054,"line_start":22,"line_end":22,"column_start":1,"column_end":42}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":374055,"byte_end":374098,"line_start":23,"line_end":23,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":374099,"byte_end":374102,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let stream = stream::iter(vec![17, 19]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":374103,"byte_end":374147,"line_start":25,"line_end":25,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(vec![17, 19], stream.collect::<Vec<i32>>().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":374148,"byte_end":374213,"line_start":26,"line_end":26,"column_start":1,"column_end":66}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":374214,"byte_end":374223,"line_start":27,"line_end":27,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":374224,"byte_end":374231,"line_start":28,"line_end":28,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":12164},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":374934,"byte_end":374940,"line_start":9,"line_end":9,"column_start":12,"column_end":18},"name":"Repeat","qualname":"::stream::repeat::Repeat","value":"Repeat {  }","parent":null,"children":[{"krate":0,"index":12166}],"decl_id":null,"docs":" Stream for the [`repeat`] function.\n","sig":null,"attributes":[{"value":"/ Stream for the [`repeat`] function.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":374810,"byte_end":374849,"line_start":6,"line_end":6,"column_start":1,"column_end":40}},{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":374874,"byte_end":374922,"line_start":8,"line_end":8,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":4824},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":375464,"byte_end":375470,"line_start":27,"line_end":27,"column_start":8,"column_end":14},"name":"repeat","qualname":"::stream::repeat::repeat","value":"pub fn repeat<T>(T) -> Repeat<T> where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Create a stream which produces the same item repeatedly.","sig":null,"attributes":[{"value":"/ Create a stream which produces the same item repeatedly.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":374962,"byte_end":375022,"line_start":13,"line_end":13,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":375023,"byte_end":375026,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The stream never terminates. Note that you likely want to avoid","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":375027,"byte_end":375094,"line_start":15,"line_end":15,"column_start":1,"column_end":68}},{"value":"/ usage of `collect` or such on the returned stream as it will exhaust","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":375095,"byte_end":375167,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/ available memory as it tries to just fill up all RAM.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":375168,"byte_end":375225,"line_start":17,"line_end":17,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":375226,"byte_end":375229,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":375230,"byte_end":375237,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":375238,"byte_end":375279,"line_start":20,"line_end":20,"column_start":1,"column_end":42}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":375280,"byte_end":375323,"line_start":21,"line_end":21,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":375324,"byte_end":375327,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ let stream = stream::repeat(9);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":375328,"byte_end":375363,"line_start":23,"line_end":23,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(vec![9, 9, 9], stream.take(3).collect::<Vec<i32>>().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":375364,"byte_end":375438,"line_start":24,"line_end":24,"column_start":1,"column_end":75}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":375439,"byte_end":375448,"line_start":25,"line_end":25,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":375449,"byte_end":375456,"line_start":26,"line_end":26,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":12173},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":376461,"byte_end":376471,"line_start":13,"line_end":13,"column_start":12,"column_end":22},"name":"RepeatWith","qualname":"::stream::repeat_with::RepeatWith","value":"RepeatWith {  }","parent":null,"children":[{"krate":0,"index":12175}],"decl_id":null,"docs":" An stream that repeats elements of type `A` endlessly by\n applying the provided closure `F: FnMut() -> A`.","sig":null,"attributes":[{"value":"/ An stream that repeats elements of type `A` endlessly by","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":376159,"byte_end":376219,"line_start":6,"line_end":6,"column_start":1,"column_end":61}},{"value":"/ applying the provided closure `F: FnMut() -> A`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":376220,"byte_end":376272,"line_start":7,"line_end":7,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":376273,"byte_end":376276,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`repeat_with()`] function.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":376277,"byte_end":376340,"line_start":9,"line_end":9,"column_start":1,"column_end":64}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":376341,"byte_end":376376,"line_start":10,"line_end":10,"column_start":1,"column_end":36}},{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":376401,"byte_end":376449,"line_start":12,"line_end":12,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":4877},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378759,"byte_end":378770,"line_start":91,"line_end":91,"column_start":8,"column_end":19},"name":"repeat_with","qualname":"::stream::repeat_with::repeat_with","value":"pub fn repeat_with<A, F: FnMut() -> A>(F) -> RepeatWith<F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new stream that repeats elements of type `A` endlessly by\n applying the provided closure, the repeater, `F: FnMut() -> A`.","sig":null,"attributes":[{"value":"/ Creates a new stream that repeats elements of type `A` endlessly by","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":376987,"byte_end":377058,"line_start":37,"line_end":37,"column_start":1,"column_end":72}},{"value":"/ applying the provided closure, the repeater, `F: FnMut() -> A`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377059,"byte_end":377126,"line_start":38,"line_end":38,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377127,"byte_end":377130,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ The `repeat_with()` function calls the repeater over and over again.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377131,"byte_end":377203,"line_start":40,"line_end":40,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377204,"byte_end":377207,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Infinite stream like `repeat_with()` are often used with adapters like","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377208,"byte_end":377282,"line_start":42,"line_end":42,"column_start":1,"column_end":75}},{"value":"/ [`stream.take()`], in order to make them finite.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377283,"byte_end":377335,"line_start":43,"line_end":43,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377336,"byte_end":377339,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ If the element type of the stream you need implements [`Clone`], and","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377340,"byte_end":377412,"line_start":45,"line_end":45,"column_start":1,"column_end":73}},{"value":"/ it is OK to keep the source element in memory, you should instead use","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377413,"byte_end":377486,"line_start":46,"line_end":46,"column_start":1,"column_end":74}},{"value":"/ the [`stream.repeat()`] function.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377487,"byte_end":377524,"line_start":47,"line_end":47,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377525,"byte_end":377528,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377529,"byte_end":377543,"line_start":49,"line_end":49,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377544,"byte_end":377547,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377548,"byte_end":377564,"line_start":51,"line_end":51,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377565,"byte_end":377568,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377569,"byte_end":377576,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377577,"byte_end":377618,"line_start":54,"line_end":54,"column_start":1,"column_end":42}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377619,"byte_end":377662,"line_start":55,"line_end":55,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377663,"byte_end":377666,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ // let's assume we have some value of a type that is not `Clone`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377667,"byte_end":377735,"line_start":57,"line_end":57,"column_start":1,"column_end":69}},{"value":"/ // or which don't want to have in memory just yet because it is expensive:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377736,"byte_end":377814,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/ #[derive(PartialEq, Debug)]","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377815,"byte_end":377846,"line_start":59,"line_end":59,"column_start":1,"column_end":32}},{"value":"/ struct Expensive;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377847,"byte_end":377868,"line_start":60,"line_end":60,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377869,"byte_end":377872,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ // a particular value forever:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377873,"byte_end":377907,"line_start":62,"line_end":62,"column_start":1,"column_end":35}},{"value":"/ let mut things = stream::repeat_with(|| Expensive);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377908,"byte_end":377963,"line_start":63,"line_end":63,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377964,"byte_end":377967,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Some(Expensive), things.next().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":377968,"byte_end":378021,"line_start":65,"line_end":65,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(Some(Expensive), things.next().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378022,"byte_end":378075,"line_start":66,"line_end":66,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(Some(Expensive), things.next().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378076,"byte_end":378129,"line_start":67,"line_end":67,"column_start":1,"column_end":54}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378130,"byte_end":378139,"line_start":68,"line_end":68,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378140,"byte_end":378147,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378148,"byte_end":378151,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ Using mutation and going finite:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378152,"byte_end":378188,"line_start":71,"line_end":71,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378189,"byte_end":378192,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378193,"byte_end":378204,"line_start":73,"line_end":73,"column_start":1,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378205,"byte_end":378246,"line_start":74,"line_end":74,"column_start":1,"column_end":42}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378247,"byte_end":378290,"line_start":75,"line_end":75,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378291,"byte_end":378294,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ // From the zeroth to the third power of two:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378295,"byte_end":378344,"line_start":77,"line_end":77,"column_start":1,"column_end":50}},{"value":"/ let mut curr = 1;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378345,"byte_end":378366,"line_start":78,"line_end":78,"column_start":1,"column_end":22}},{"value":"/ let mut pow2 = stream::repeat_with(|| { let tmp = curr; curr *= 2; tmp })","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378367,"byte_end":378444,"line_start":79,"line_end":79,"column_start":1,"column_end":78}},{"value":"/                     .take(4);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378445,"byte_end":378478,"line_start":80,"line_end":80,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378479,"byte_end":378482,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Some(1), pow2.next().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378483,"byte_end":378526,"line_start":82,"line_end":82,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(Some(2), pow2.next().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378527,"byte_end":378570,"line_start":83,"line_end":83,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(Some(4), pow2.next().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378571,"byte_end":378614,"line_start":84,"line_end":84,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(Some(8), pow2.next().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378615,"byte_end":378658,"line_start":85,"line_end":85,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378659,"byte_end":378662,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ // ... and now we're done","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378663,"byte_end":378692,"line_start":87,"line_end":87,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(None, pow2.next().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378693,"byte_end":378733,"line_start":88,"line_end":88,"column_start":1,"column_end":41}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378734,"byte_end":378743,"line_start":89,"line_end":89,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":378744,"byte_end":378751,"line_start":90,"line_end":90,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":12182},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/empty.rs","byte_start":379161,"byte_end":379166,"line_start":10,"line_end":10,"column_start":12,"column_end":17},"name":"Empty","qualname":"::stream::empty::Empty","value":"Empty {  }","parent":null,"children":[{"krate":0,"index":12184}],"decl_id":null,"docs":" Stream for the [`empty`] function.\n","sig":null,"attributes":[{"value":"/ Stream for the [`empty`] function.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/empty.rs","byte_start":379045,"byte_end":379083,"line_start":7,"line_end":7,"column_start":1,"column_end":39}},{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/empty.rs","byte_start":379101,"byte_end":379149,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":4911},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/empty.rs","byte_start":379335,"byte_end":379340,"line_start":17,"line_end":17,"column_start":8,"column_end":13},"name":"empty","qualname":"::stream::empty::empty","value":"pub fn empty<T>() -> Empty<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a stream which contains no elements.","sig":null,"attributes":[{"value":"/ Creates a stream which contains no elements.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/empty.rs","byte_start":379205,"byte_end":379253,"line_start":14,"line_end":14,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/empty.rs","byte_start":379254,"byte_end":379257,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ The returned stream will always return `Ready(None)` when polled.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/empty.rs","byte_start":379258,"byte_end":379327,"line_start":16,"line_end":16,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":4963},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/once.rs","byte_start":380425,"byte_end":380429,"line_start":20,"line_end":20,"column_start":8,"column_end":12},"name":"once","qualname":"::stream::once::once","value":"pub fn once<Fut: Future>(Fut) -> Once<Fut>","parent":null,"children":[],"decl_id":null,"docs":" Creates a stream of a single element.","sig":null,"attributes":[{"value":"/ Creates a stream of a single element.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/once.rs","byte_start":380118,"byte_end":380159,"line_start":9,"line_end":9,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/once.rs","byte_start":380160,"byte_end":380163,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/once.rs","byte_start":380164,"byte_end":380171,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/once.rs","byte_start":380172,"byte_end":380213,"line_start":12,"line_end":12,"column_start":1,"column_end":42}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/once.rs","byte_start":380214,"byte_end":380257,"line_start":13,"line_end":13,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/once.rs","byte_start":380258,"byte_end":380261,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ let stream = stream::once(async { 17 });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/once.rs","byte_start":380262,"byte_end":380306,"line_start":15,"line_end":15,"column_start":1,"column_end":45}},{"value":"/ let collected = stream.collect::<Vec<i32>>().await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/once.rs","byte_start":380307,"byte_end":380362,"line_start":16,"line_end":16,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(collected, vec![17]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/once.rs","byte_start":380363,"byte_end":380399,"line_start":17,"line_end":17,"column_start":1,"column_end":37}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/once.rs","byte_start":380400,"byte_end":380409,"line_start":18,"line_end":18,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/once.rs","byte_start":380410,"byte_end":380417,"line_start":19,"line_end":19,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":12193},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/once.rs","byte_start":380691,"byte_end":380695,"line_start":28,"line_end":28,"column_start":16,"column_end":20},"name":"Once","qualname":"::stream::once::Once","value":"Once {  }","parent":null,"children":[{"krate":0,"index":12195}],"decl_id":null,"docs":" A stream which emits single element and then EOF.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":12224},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/pending.rs","byte_start":381871,"byte_end":381878,"line_start":10,"line_end":10,"column_start":12,"column_end":19},"name":"Pending","qualname":"::stream::pending::Pending","value":"Pending {  }","parent":null,"children":[{"krate":0,"index":12226}],"decl_id":null,"docs":" Stream for the [`pending()`] function.\n","sig":null,"attributes":[{"value":"/ Stream for the [`pending()`] function.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/pending.rs","byte_start":381751,"byte_end":381793,"line_start":7,"line_end":7,"column_start":1,"column_end":43}},{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/pending.rs","byte_start":381811,"byte_end":381859,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":5007},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/pending.rs","byte_start":382054,"byte_end":382061,"line_start":17,"line_end":17,"column_start":8,"column_end":15},"name":"pending","qualname":"::stream::pending::pending","value":"pub fn pending<T>() -> Pending<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a stream which never returns any elements.","sig":null,"attributes":[{"value":"/ Creates a stream which never returns any elements.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/pending.rs","byte_start":381922,"byte_end":381976,"line_start":14,"line_end":14,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/pending.rs","byte_start":381977,"byte_end":381980,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ The returned stream will always return `Pending` when polled.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/pending.rs","byte_start":381981,"byte_end":382046,"line_start":16,"line_end":16,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":5049},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":382904,"byte_end":382910,"line_start":11,"line_end":11,"column_start":12,"column_end":18},"name":"PollFn","qualname":"::stream::poll_fn::PollFn","value":"PollFn {  }","parent":null,"children":[{"krate":0,"index":5051}],"decl_id":null,"docs":" Stream for the [`poll_fn`] function.\n","sig":null,"attributes":[{"value":"/ Stream for the [`poll_fn`] function.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":382803,"byte_end":382843,"line_start":9,"line_end":9,"column_start":1,"column_end":41}},{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":382844,"byte_end":382892,"line_start":10,"line_end":10,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":5057},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":383598,"byte_end":383605,"line_start":41,"line_end":41,"column_start":8,"column_end":15},"name":"poll_fn","qualname":"::stream::poll_fn::poll_fn","value":"pub fn poll_fn<T, F>(F) -> PollFn<F> where F: FnMut(&mut Context) ->\nPoll<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new stream wrapping a function returning `Poll<Option<T>>`.","sig":null,"attributes":[{"value":"/ Creates a new stream wrapping a function returning `Poll<Option<T>>`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":383110,"byte_end":383183,"line_start":23,"line_end":23,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":383184,"byte_end":383187,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Polling the returned stream calls the wrapped function.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":383188,"byte_end":383247,"line_start":25,"line_end":25,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":383248,"byte_end":383251,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":383252,"byte_end":383266,"line_start":27,"line_end":27,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":383267,"byte_end":383270,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":383271,"byte_end":383278,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use futures::stream::poll_fn;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":383279,"byte_end":383312,"line_start":30,"line_end":30,"column_start":1,"column_end":34}},{"value":"/ use futures::task::Poll;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":383313,"byte_end":383341,"line_start":31,"line_end":31,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":383342,"byte_end":383345,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let mut counter = 1usize;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":383346,"byte_end":383375,"line_start":33,"line_end":33,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":383376,"byte_end":383379,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ let read_stream = poll_fn(move |_| -> Poll<Option<String>> {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":383380,"byte_end":383444,"line_start":35,"line_end":35,"column_start":1,"column_end":65}},{"value":"/     if counter == 0 { return Poll::Ready(None); }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":383445,"byte_end":383498,"line_start":36,"line_end":36,"column_start":1,"column_end":54}},{"value":"/     counter -= 1;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":383499,"byte_end":383520,"line_start":37,"line_end":37,"column_start":1,"column_end":22}},{"value":"/     Poll::Ready(Some(\"Hello, World!\".to_owned()))","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":383521,"byte_end":383574,"line_start":38,"line_end":38,"column_start":1,"column_end":54}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":383575,"byte_end":383582,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":383583,"byte_end":383590,"line_start":40,"line_end":40,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":12235},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":384366,"byte_end":384379,"line_start":12,"line_end":12,"column_start":16,"column_end":29},"name":"PollImmediate","qualname":"::stream::poll_immediate::PollImmediate","value":"PollImmediate {  }","parent":null,"children":[{"krate":0,"index":12237}],"decl_id":null,"docs":" Stream for the [poll_immediate](poll_immediate()) function.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":5098},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":386360,"byte_end":386374,"line_start":78,"line_end":78,"column_start":8,"column_end":22},"name":"poll_immediate","qualname":"::stream::poll_immediate::poll_immediate","value":"pub fn poll_immediate<S: Stream>(S) -> PollImmediate<S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new stream that always immediately returns [Poll::Ready](core::task::Poll::Ready) when awaiting it.","sig":null,"attributes":[{"value":"/ Creates a new stream that always immediately returns [Poll::Ready](core::task::Poll::Ready) when awaiting it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":385479,"byte_end":385592,"line_start":53,"line_end":53,"column_start":1,"column_end":114}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":385593,"byte_end":385596,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ This is useful when immediacy is more important than waiting for the next item to be ready.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":385597,"byte_end":385692,"line_start":55,"line_end":55,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":385693,"byte_end":385696,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":385697,"byte_end":385711,"line_start":57,"line_end":57,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":385712,"byte_end":385715,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":385716,"byte_end":385723,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":385724,"byte_end":385765,"line_start":60,"line_end":60,"column_start":1,"column_end":42}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":385766,"byte_end":385809,"line_start":61,"line_end":61,"column_start":1,"column_end":44}},{"value":"/ use futures::task::Poll;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":385810,"byte_end":385838,"line_start":62,"line_end":62,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":385839,"byte_end":385842,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ let mut r = stream::poll_immediate(Box::pin(stream::iter(1_u32..3)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":385843,"byte_end":385916,"line_start":64,"line_end":64,"column_start":1,"column_end":74}},{"value":"/ assert_eq!(r.next().await, Some(Poll::Ready(1)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":385917,"byte_end":385970,"line_start":65,"line_end":65,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(r.next().await, Some(Poll::Ready(2)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":385971,"byte_end":386024,"line_start":66,"line_end":66,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(r.next().await, None);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":386025,"byte_end":386062,"line_start":67,"line_end":67,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":386063,"byte_end":386066,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ let mut p = stream::poll_immediate(Box::pin(stream::once(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":386067,"byte_end":386135,"line_start":69,"line_end":69,"column_start":1,"column_end":69}},{"value":"/     futures::pending!();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":386136,"byte_end":386164,"line_start":70,"line_end":70,"column_start":1,"column_end":29}},{"value":"/     42_u8","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":386165,"byte_end":386178,"line_start":71,"line_end":71,"column_start":1,"column_end":14}},{"value":"/ })));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":386179,"byte_end":386188,"line_start":72,"line_end":72,"column_start":1,"column_end":10}},{"value":"/ assert_eq!(p.next().await, Some(Poll::Pending));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":386189,"byte_end":386241,"line_start":73,"line_end":73,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(p.next().await, Some(Poll::Ready(42)));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":386242,"byte_end":386296,"line_start":74,"line_end":74,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(p.next().await, None);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":386297,"byte_end":386334,"line_start":75,"line_end":75,"column_start":1,"column_end":38}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":386335,"byte_end":386344,"line_start":76,"line_end":76,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":386345,"byte_end":386352,"line_start":77,"line_end":77,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":12276},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":386907,"byte_end":386913,"line_start":12,"line_end":12,"column_start":16,"column_end":22},"name":"Select","qualname":"::stream::select::Select","value":"Select {  }","parent":null,"children":[{"krate":0,"index":12279}],"decl_id":null,"docs":" Stream for the [`select()`] function.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":5141},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387939,"byte_end":387945,"line_start":47,"line_end":47,"column_start":8,"column_end":14},"name":"select","qualname":"::stream::select::select","value":"pub fn select<St1, St2>(St1, St2) -> Select<St1, St2> where St1: Stream,\nSt2: Stream<Item = St1::Item>","parent":null,"children":[],"decl_id":null,"docs":" This function will attempt to pull items from both streams. Each\n stream will be polled in a round-robin fashion, and whenever a stream is\n ready to yield an item that item is yielded.","sig":null,"attributes":[{"value":"/ This function will attempt to pull items from both streams. Each","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387035,"byte_end":387103,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/ stream will be polled in a round-robin fashion, and whenever a stream is","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387104,"byte_end":387180,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ ready to yield an item that item is yielded.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387181,"byte_end":387229,"line_start":20,"line_end":20,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387230,"byte_end":387233,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ After one of the two input streams completes, the remaining one will be","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387234,"byte_end":387309,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ polled exclusively. The returned stream completes when both input","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387310,"byte_end":387379,"line_start":23,"line_end":23,"column_start":1,"column_end":70}},{"value":"/ streams have completed.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387380,"byte_end":387407,"line_start":24,"line_end":24,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387408,"byte_end":387411,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Note that this function consumes both streams and returns a wrapped","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387412,"byte_end":387483,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/ version of them.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387484,"byte_end":387504,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387505,"byte_end":387508,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387509,"byte_end":387524,"line_start":29,"line_end":29,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387525,"byte_end":387528,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387529,"byte_end":387540,"line_start":31,"line_end":31,"column_start":1,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387541,"byte_end":387582,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/ use futures::stream::{ repeat, select, StreamExt };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387583,"byte_end":387638,"line_start":33,"line_end":33,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387639,"byte_end":387642,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ let left = repeat(1);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387643,"byte_end":387668,"line_start":35,"line_end":35,"column_start":1,"column_end":26}},{"value":"/ let right = repeat(2);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387669,"byte_end":387695,"line_start":36,"line_end":36,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387696,"byte_end":387699,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let mut out = select(left, right);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387700,"byte_end":387738,"line_start":38,"line_end":38,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387739,"byte_end":387742,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ for _ in 0..100 {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387743,"byte_end":387764,"line_start":40,"line_end":40,"column_start":1,"column_end":22}},{"value":"/     // We should be alternating.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387765,"byte_end":387801,"line_start":41,"line_end":41,"column_start":1,"column_end":37}},{"value":"/     assert_eq!(1, out.select_next_some().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387802,"byte_end":387854,"line_start":42,"line_end":42,"column_start":1,"column_end":53}},{"value":"/     assert_eq!(2, out.select_next_some().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387855,"byte_end":387907,"line_start":43,"line_end":43,"column_start":1,"column_end":53}},{"value":"/ }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387908,"byte_end":387913,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387914,"byte_end":387923,"line_start":45,"line_end":45,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":387924,"byte_end":387931,"line_start":46,"line_end":46,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":5148},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":388414,"byte_end":388421,"line_start":64,"line_end":64,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Select<St1, St2>>::get_ref","value":"pub fn get_ref(&Self) -> (&St1, &St2)","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying streams that this combinator is\n pulling from.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying streams that this combinator is","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":388306,"byte_end":388380,"line_start":62,"line_end":62,"column_start":5,"column_end":79}},{"value":"/ pulling from.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":388385,"byte_end":388402,"line_start":63,"line_end":63,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":5149},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":388749,"byte_end":388756,"line_start":73,"line_end":73,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Select<St1, St2>>::get_mut","value":"pub fn get_mut(&mut Self) -> (&mut St1, &mut St2)","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying streams that this\n combinator is pulling from.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying streams that this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":388487,"byte_end":388555,"line_start":68,"line_end":68,"column_start":5,"column_end":73}},{"value":"/ combinator is pulling from.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":388560,"byte_end":388591,"line_start":69,"line_end":69,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":388596,"byte_end":388599,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ Note that care must be taken to avoid tampering with the state of the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":388604,"byte_end":388677,"line_start":71,"line_end":71,"column_start":5,"column_end":78}},{"value":"/ stream which may otherwise confuse this combinator.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":388682,"byte_end":388737,"line_start":72,"line_end":72,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":5150},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":389103,"byte_end":389114,"line_start":82,"line_end":82,"column_start":12,"column_end":23},"name":"get_pin_mut","qualname":"<Select<St1, St2>>::get_pin_mut","value":"pub fn get_pin_mut(Pin<&mut Self>) -> (Pin<&mut St1>, Pin<&mut St2>)","parent":null,"children":[],"decl_id":null,"docs":" Acquires a pinned mutable reference to the underlying streams that this\n combinator is pulling from.","sig":null,"attributes":[{"value":"/ Acquires a pinned mutable reference to the underlying streams that this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":388834,"byte_end":388909,"line_start":77,"line_end":77,"column_start":5,"column_end":80}},{"value":"/ combinator is pulling from.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":388914,"byte_end":388945,"line_start":78,"line_end":78,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":388950,"byte_end":388953,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Note that care must be taken to avoid tampering with the state of the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":388958,"byte_end":389031,"line_start":80,"line_end":80,"column_start":5,"column_end":78}},{"value":"/ stream which may otherwise confuse this combinator.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":389036,"byte_end":389091,"line_start":81,"line_end":81,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":5151},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":389488,"byte_end":389498,"line_start":91,"line_end":91,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Select<St1, St2>>::into_inner","value":"pub fn into_inner(Self) -> (St1, St2)","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying streams.","sig":null,"attributes":[{"value":"/ Consumes this combinator, returning the underlying streams.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":389252,"byte_end":389315,"line_start":87,"line_end":87,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":389320,"byte_end":389323,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ Note that this may discard intermediate state of this combinator, so","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":389328,"byte_end":389400,"line_start":89,"line_end":89,"column_start":5,"column_end":77}},{"value":"/ care should be taken to avoid losing resources when this is called.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":389405,"byte_end":389476,"line_start":90,"line_end":90,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":12315},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":390440,"byte_end":390444,"line_start":12,"line_end":12,"column_start":5,"column_end":9},"name":"Left","qualname":"::stream::select_with_strategy::PollNext::Left","value":"PollNext::Left","parent":{"krate":0,"index":12314},"children":[],"decl_id":null,"docs":" Poll the first stream.\n","sig":null,"attributes":[{"value":"/ Poll the first stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":390409,"byte_end":390435,"line_start":11,"line_end":11,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":12317},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":390482,"byte_end":390487,"line_start":14,"line_end":14,"column_start":5,"column_end":10},"name":"Right","qualname":"::stream::select_with_strategy::PollNext::Right","value":"PollNext::Right","parent":{"krate":0,"index":12314},"children":[],"decl_id":null,"docs":" Poll the second stream.\n","sig":null,"attributes":[{"value":"/ Poll the second stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":390450,"byte_end":390477,"line_start":13,"line_end":13,"column_start":5,"column_end":32}}]},{"kind":"Enum","id":{"krate":0,"index":12314},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":390394,"byte_end":390402,"line_start":10,"line_end":10,"column_start":10,"column_end":18},"name":"PollNext","qualname":"::stream::select_with_strategy::PollNext","value":"pub enum PollNext { Left, Right, }","parent":null,"children":[{"krate":0,"index":12315},{"krate":0,"index":12317}],"decl_id":null,"docs":" Type to tell [`SelectWithStrategy`] which stream to poll next.\n","sig":null,"attributes":[{"value":"/ Type to tell [`SelectWithStrategy`] which stream to poll next.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":390267,"byte_end":390333,"line_start":8,"line_end":8,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":5204},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":390568,"byte_end":390574,"line_start":19,"line_end":19,"column_start":12,"column_end":18},"name":"toggle","qualname":"<PollNext>::toggle","value":"pub fn toggle(&mut Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Toggle the value and return the old one.\n","sig":null,"attributes":[{"value":"/ Toggle the value and return the old one.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":390512,"byte_end":390556,"line_start":18,"line_end":18,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":12333},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":391046,"byte_end":391064,"line_start":40,"line_end":40,"column_start":16,"column_end":34},"name":"SelectWithStrategy","qualname":"::stream::select_with_strategy::SelectWithStrategy","value":"SelectWithStrategy {  }","parent":null,"children":[{"krate":0,"index":12338},{"krate":0,"index":12339},{"krate":0,"index":12340},{"krate":0,"index":12341}],"decl_id":null,"docs":" Stream for the [`select_with_strategy()`] function. See function docs for details.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":5207},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":393356,"byte_end":393376,"line_start":111,"line_end":111,"column_start":8,"column_end":28},"name":"select_with_strategy","qualname":"::stream::select_with_strategy::select_with_strategy","value":"pub fn select_with_strategy<St1, St2, Clos, State>(St1, St2, Clos)\n-> SelectWithStrategy<St1, St2, Clos, State> where St1: Stream,\nSt2: Stream<Item = St1::Item>, Clos: FnMut(&mut State) -> PollNext,\nState: Default","parent":null,"children":[],"decl_id":null,"docs":" This function will attempt to pull items from both streams. You provide a\n closure to tell [`SelectWithStrategy`] which stream to poll. The closure can\n store state on `SelectWithStrategy` to which it will receive a `&mut` on every\n invocation. This allows basing the strategy on prior choices.","sig":null,"attributes":[{"value":"/ This function will attempt to pull items from both streams. You provide a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":391227,"byte_end":391304,"line_start":50,"line_end":50,"column_start":1,"column_end":78}},{"value":"/ closure to tell [`SelectWithStrategy`] which stream to poll. The closure can","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":391305,"byte_end":391385,"line_start":51,"line_end":51,"column_start":1,"column_end":81}},{"value":"/ store state on `SelectWithStrategy` to which it will receive a `&mut` on every","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":391386,"byte_end":391468,"line_start":52,"line_end":52,"column_start":1,"column_end":83}},{"value":"/ invocation. This allows basing the strategy on prior choices.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":391469,"byte_end":391534,"line_start":53,"line_end":53,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":391535,"byte_end":391538,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ After one of the two input streams completes, the remaining one will be","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":391539,"byte_end":391614,"line_start":55,"line_end":55,"column_start":1,"column_end":76}},{"value":"/ polled exclusively. The returned stream completes when both input","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":391615,"byte_end":391684,"line_start":56,"line_end":56,"column_start":1,"column_end":70}},{"value":"/ streams have completed.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":391685,"byte_end":391712,"line_start":57,"line_end":57,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":391713,"byte_end":391716,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ Note that this function consumes both streams and returns a wrapped","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":391717,"byte_end":391788,"line_start":59,"line_end":59,"column_start":1,"column_end":72}},{"value":"/ version of them.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":391789,"byte_end":391809,"line_start":60,"line_end":60,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":391810,"byte_end":391813,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":391814,"byte_end":391829,"line_start":62,"line_end":62,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":391830,"byte_end":391833,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ ### Priority","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":391834,"byte_end":391850,"line_start":64,"line_end":64,"column_start":1,"column_end":17}},{"value":"/ This example shows how to always prioritize the left stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":391851,"byte_end":391915,"line_start":65,"line_end":65,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":391916,"byte_end":391919,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":391920,"byte_end":391931,"line_start":67,"line_end":67,"column_start":1,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":391932,"byte_end":391973,"line_start":68,"line_end":68,"column_start":1,"column_end":42}},{"value":"/ use futures::stream::{ repeat, select_with_strategy, PollNext, StreamExt };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":391974,"byte_end":392053,"line_start":69,"line_end":69,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392054,"byte_end":392057,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ let left = repeat(1);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392058,"byte_end":392083,"line_start":71,"line_end":71,"column_start":1,"column_end":26}},{"value":"/ let right = repeat(2);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392084,"byte_end":392110,"line_start":72,"line_end":72,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392111,"byte_end":392114,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ // We don't need any state, so let's make it an empty tuple.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392115,"byte_end":392179,"line_start":74,"line_end":74,"column_start":1,"column_end":65}},{"value":"/ // We must provide some type here, as there is no way for the compiler","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392180,"byte_end":392254,"line_start":75,"line_end":75,"column_start":1,"column_end":75}},{"value":"/ // to infer it. As we don't need to capture variables, we can just","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392255,"byte_end":392325,"line_start":76,"line_end":76,"column_start":1,"column_end":71}},{"value":"/ // use a function pointer instead of a closure.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392326,"byte_end":392377,"line_start":77,"line_end":77,"column_start":1,"column_end":52}},{"value":"/ fn prio_left(_: &mut ()) -> PollNext { PollNext::Left }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392378,"byte_end":392437,"line_start":78,"line_end":78,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392438,"byte_end":392441,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ let mut out = select_with_strategy(left, right, prio_left);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392442,"byte_end":392505,"line_start":80,"line_end":80,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392506,"byte_end":392509,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ for _ in 0..100 {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392510,"byte_end":392531,"line_start":82,"line_end":82,"column_start":1,"column_end":22}},{"value":"/     // Whenever we poll out, we will alwas get `1`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392532,"byte_end":392587,"line_start":83,"line_end":83,"column_start":1,"column_end":56}},{"value":"/     assert_eq!(1, out.select_next_some().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392588,"byte_end":392640,"line_start":84,"line_end":84,"column_start":1,"column_end":53}},{"value":"/ }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392641,"byte_end":392646,"line_start":85,"line_end":85,"column_start":1,"column_end":6}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392647,"byte_end":392656,"line_start":86,"line_end":86,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392657,"byte_end":392664,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392665,"byte_end":392668,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ ### Round Robin","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392669,"byte_end":392688,"line_start":89,"line_end":89,"column_start":1,"column_end":20}},{"value":"/ This example shows how to select from both streams round robin.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392689,"byte_end":392756,"line_start":90,"line_end":90,"column_start":1,"column_end":68}},{"value":"/ Note: this special case is provided by [`futures-util::stream::select`].","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392757,"byte_end":392833,"line_start":91,"line_end":91,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392834,"byte_end":392837,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392838,"byte_end":392849,"line_start":93,"line_end":93,"column_start":1,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392850,"byte_end":392891,"line_start":94,"line_end":94,"column_start":1,"column_end":42}},{"value":"/ use futures::stream::{ repeat, select_with_strategy, PollNext, StreamExt };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392892,"byte_end":392971,"line_start":95,"line_end":95,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392972,"byte_end":392975,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ let left = repeat(1);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":392976,"byte_end":393001,"line_start":97,"line_end":97,"column_start":1,"column_end":26}},{"value":"/ let right = repeat(2);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":393002,"byte_end":393028,"line_start":98,"line_end":98,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":393029,"byte_end":393032,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ let rrobin = |last: &mut PollNext| last.toggle();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":393033,"byte_end":393086,"line_start":100,"line_end":100,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":393087,"byte_end":393090,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ let mut out = select_with_strategy(left, right, rrobin);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":393091,"byte_end":393151,"line_start":102,"line_end":102,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":393152,"byte_end":393155,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ for _ in 0..100 {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":393156,"byte_end":393177,"line_start":104,"line_end":104,"column_start":1,"column_end":22}},{"value":"/     // We should be alternating now.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":393178,"byte_end":393218,"line_start":105,"line_end":105,"column_start":1,"column_end":41}},{"value":"/     assert_eq!(1, out.select_next_some().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":393219,"byte_end":393271,"line_start":106,"line_end":106,"column_start":1,"column_end":53}},{"value":"/     assert_eq!(2, out.select_next_some().await);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":393272,"byte_end":393324,"line_start":107,"line_end":107,"column_start":1,"column_end":53}},{"value":"/ }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":393325,"byte_end":393330,"line_start":108,"line_end":108,"column_start":1,"column_end":6}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":393331,"byte_end":393340,"line_start":109,"line_end":109,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":393341,"byte_end":393348,"line_start":110,"line_end":110,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":5217},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":393993,"byte_end":394000,"line_start":133,"line_end":133,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<SelectWithStrategy<St1, St2, Clos, State>>::get_ref","value":"pub fn get_ref(&Self) -> (&St1, &St2)","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying streams that this combinator is\n pulling from.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying streams that this combinator is","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":393885,"byte_end":393959,"line_start":131,"line_end":131,"column_start":5,"column_end":79}},{"value":"/ pulling from.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":393964,"byte_end":393981,"line_start":132,"line_end":132,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":5218},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":394356,"byte_end":394363,"line_start":142,"line_end":142,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<SelectWithStrategy<St1, St2, Clos, State>>::get_mut","value":"pub fn get_mut(&mut Self) -> (&mut St1, &mut St2)","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying streams that this\n combinator is pulling from.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying streams that this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":394094,"byte_end":394162,"line_start":137,"line_end":137,"column_start":5,"column_end":73}},{"value":"/ combinator is pulling from.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":394167,"byte_end":394198,"line_start":138,"line_end":138,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":394203,"byte_end":394206,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Note that care must be taken to avoid tampering with the state of the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":394211,"byte_end":394284,"line_start":140,"line_end":140,"column_start":5,"column_end":78}},{"value":"/ stream which may otherwise confuse this combinator.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":394289,"byte_end":394344,"line_start":141,"line_end":141,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":5219},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":394738,"byte_end":394749,"line_start":151,"line_end":151,"column_start":12,"column_end":23},"name":"get_pin_mut","qualname":"<SelectWithStrategy<St1, St2, Clos, State>>::get_pin_mut","value":"pub fn get_pin_mut(Pin<&mut Self>) -> (Pin<&mut St1>, Pin<&mut St2>)","parent":null,"children":[],"decl_id":null,"docs":" Acquires a pinned mutable reference to the underlying streams that this\n combinator is pulling from.","sig":null,"attributes":[{"value":"/ Acquires a pinned mutable reference to the underlying streams that this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":394469,"byte_end":394544,"line_start":146,"line_end":146,"column_start":5,"column_end":80}},{"value":"/ combinator is pulling from.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":394549,"byte_end":394580,"line_start":147,"line_end":147,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":394585,"byte_end":394588,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ Note that care must be taken to avoid tampering with the state of the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":394593,"byte_end":394666,"line_start":149,"line_end":149,"column_start":5,"column_end":78}},{"value":"/ stream which may otherwise confuse this combinator.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":394671,"byte_end":394726,"line_start":150,"line_end":150,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":5220},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":395155,"byte_end":395165,"line_start":160,"line_end":160,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<SelectWithStrategy<St1, St2, Clos, State>>::into_inner","value":"pub fn into_inner(Self) -> (St1, St2)","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying streams.","sig":null,"attributes":[{"value":"/ Consumes this combinator, returning the underlying streams.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":394919,"byte_end":394982,"line_start":156,"line_end":156,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":394987,"byte_end":394990,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ Note that this may discard intermediate state of this combinator, so","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":394995,"byte_end":395067,"line_start":158,"line_end":158,"column_start":5,"column_end":77}},{"value":"/ care should be taken to avoid losing resources when this is called.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":395072,"byte_end":395143,"line_start":159,"line_end":159,"column_start":5,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":5289},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398843,"byte_end":398849,"line_start":50,"line_end":50,"column_start":8,"column_end":14},"name":"unfold","qualname":"::stream::unfold::unfold","value":"pub fn unfold<T, F, Fut, Item>(T, F) -> Unfold<T, F, Fut> where F: FnMut(T) ->\nFut, Fut: Future<Output = Option<(Item, T)>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Stream` from a seed and a closure returning a `Future`.","sig":null,"attributes":[{"value":"/ Creates a `Stream` from a seed and a closure returning a `Future`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":397401,"byte_end":397471,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":397472,"byte_end":397475,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This function is the dual for the `Stream::fold()` adapter: while","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":397476,"byte_end":397545,"line_start":13,"line_end":13,"column_start":1,"column_end":70}},{"value":"/ `Stream::fold()` reduces a `Stream` to one single value, `unfold()` creates a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":397546,"byte_end":397627,"line_start":14,"line_end":14,"column_start":1,"column_end":82}},{"value":"/ `Stream` from a seed value.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":397628,"byte_end":397659,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":397660,"byte_end":397663,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ `unfold()` will call the provided closure with the provided seed, then wait","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":397664,"byte_end":397743,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ for the returned `Future` to complete with `(a, b)`. It will then yield the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":397744,"byte_end":397823,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ value `a`, and use `b` as the next internal state.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":397824,"byte_end":397878,"line_start":19,"line_end":19,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":397879,"byte_end":397882,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ If the closure returns `None` instead of `Some(Future)`, then the `unfold()`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":397883,"byte_end":397963,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/ will stop producing items and return `Poll::Ready(None)` in future","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":397964,"byte_end":398034,"line_start":22,"line_end":22,"column_start":1,"column_end":71}},{"value":"/ calls to `poll()`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398035,"byte_end":398057,"line_start":23,"line_end":23,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398058,"byte_end":398061,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This function can typically be used when wanting to go from the \"world of","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398062,"byte_end":398139,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/ futures\" to the \"world of streams\": the provided closure can build a","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398140,"byte_end":398212,"line_start":26,"line_end":26,"column_start":1,"column_end":73}},{"value":"/ `Future` using other library functions working on futures, and `unfold()`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398213,"byte_end":398290,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/ will turn it into a `Stream` by repeating the operation.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398291,"byte_end":398351,"line_start":28,"line_end":28,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398352,"byte_end":398355,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398356,"byte_end":398369,"line_start":30,"line_end":30,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398370,"byte_end":398373,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398374,"byte_end":398381,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398382,"byte_end":398423,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/ use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398424,"byte_end":398467,"line_start":34,"line_end":34,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398468,"byte_end":398471,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ let stream = stream::unfold(0, |state| async move {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398472,"byte_end":398527,"line_start":36,"line_end":36,"column_start":1,"column_end":56}},{"value":"/     if state <= 2 {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398528,"byte_end":398551,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/         let next_state = state + 1;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398552,"byte_end":398591,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/         let yielded = state  * 2;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398592,"byte_end":398629,"line_start":39,"line_end":39,"column_start":1,"column_end":38}},{"value":"/         Some((yielded, next_state))","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398630,"byte_end":398669,"line_start":40,"line_end":40,"column_start":1,"column_end":40}},{"value":"/     } else {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398670,"byte_end":398686,"line_start":41,"line_end":41,"column_start":1,"column_end":17}},{"value":"/         None","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398687,"byte_end":398703,"line_start":42,"line_end":42,"column_start":1,"column_end":17}},{"value":"/     }","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398704,"byte_end":398713,"line_start":43,"line_end":43,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398714,"byte_end":398721,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398722,"byte_end":398725,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ let result = stream.collect::<Vec<i32>>().await;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398726,"byte_end":398778,"line_start":46,"line_end":46,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(result, vec![0, 2, 4]);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398779,"byte_end":398817,"line_start":47,"line_end":47,"column_start":1,"column_end":39}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398818,"byte_end":398827,"line_start":48,"line_end":48,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":398828,"byte_end":398835,"line_start":49,"line_end":49,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":12402},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":399196,"byte_end":399202,"line_start":61,"line_end":61,"column_start":16,"column_end":22},"name":"Unfold","qualname":"::stream::unfold::Unfold","value":"Unfold {  }","parent":null,"children":[{"krate":0,"index":12406},{"krate":0,"index":12407}],"decl_id":null,"docs":" Stream for the [`unfold`] function.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":5389},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":404253,"byte_end":404267,"line_start":95,"line_end":95,"column_start":12,"column_end":26},"name":"FuturesOrdered","qualname":"::stream::futures_ordered::FuturesOrdered","value":"FuturesOrdered {  }","parent":null,"children":[{"krate":0,"index":5391},{"krate":0,"index":5392},{"krate":0,"index":5393},{"krate":0,"index":5394}],"decl_id":null,"docs":" An unbounded queue of futures.","sig":null,"attributes":[{"value":"/ An unbounded queue of futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":402187,"byte_end":402221,"line_start":59,"line_end":59,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":402222,"byte_end":402225,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ This \"combinator\" is similar to `FuturesUnordered`, but it imposes an order","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":402226,"byte_end":402305,"line_start":61,"line_end":61,"column_start":1,"column_end":80}},{"value":"/ on top of the set of futures. While futures in the set will race to","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":402306,"byte_end":402377,"line_start":62,"line_end":62,"column_start":1,"column_end":72}},{"value":"/ completion in parallel, results will only be returned in the order their","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":402378,"byte_end":402454,"line_start":63,"line_end":63,"column_start":1,"column_end":77}},{"value":"/ originating futures were added to the queue.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":402455,"byte_end":402503,"line_start":64,"line_end":64,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":402504,"byte_end":402507,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Futures are pushed into this queue and their realized values are yielded in","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":402508,"byte_end":402587,"line_start":66,"line_end":66,"column_start":1,"column_end":80}},{"value":"/ order. This structure is optimized to manage a large number of futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":402588,"byte_end":402663,"line_start":67,"line_end":67,"column_start":1,"column_end":76}},{"value":"/ Futures managed by `FuturesOrdered` will only be polled when they generate","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":402664,"byte_end":402742,"line_start":68,"line_end":68,"column_start":1,"column_end":79}},{"value":"/ notifications. This reduces the required amount of work needed to coordinate","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":402743,"byte_end":402823,"line_start":69,"line_end":69,"column_start":1,"column_end":81}},{"value":"/ large numbers of futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":402824,"byte_end":402853,"line_start":70,"line_end":70,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":402854,"byte_end":402857,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ When a `FuturesOrdered` is first created, it does not contain any futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":402858,"byte_end":402936,"line_start":72,"line_end":72,"column_start":1,"column_end":79}},{"value":"/ Calling `poll` in this state will result in `Poll::Ready(None))` to be","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":402937,"byte_end":403011,"line_start":73,"line_end":73,"column_start":1,"column_end":75}},{"value":"/ returned. Futures are submitted to the queue using `push`; however, the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":403012,"byte_end":403087,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"/ future will **not** be polled at this point. `FuturesOrdered` will only","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":403088,"byte_end":403163,"line_start":75,"line_end":75,"column_start":1,"column_end":76}},{"value":"/ poll managed futures when `FuturesOrdered::poll` is called. As such, it","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":403164,"byte_end":403239,"line_start":76,"line_end":76,"column_start":1,"column_end":76}},{"value":"/ is important to call `poll` after pushing new futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":403240,"byte_end":403298,"line_start":77,"line_end":77,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":403299,"byte_end":403302,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ If `FuturesOrdered::poll` returns `Poll::Ready(None)` this means that","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":403303,"byte_end":403376,"line_start":79,"line_end":79,"column_start":1,"column_end":74}},{"value":"/ the queue is currently not managing any futures. A future may be submitted","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":403377,"byte_end":403455,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/ to the queue at a later time. At that point, a call to","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":403456,"byte_end":403514,"line_start":81,"line_end":81,"column_start":1,"column_end":59}},{"value":"/ `FuturesOrdered::poll` will either return the future's resolved value","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":403515,"byte_end":403588,"line_start":82,"line_end":82,"column_start":1,"column_end":74}},{"value":"/ **or** `Poll::Pending` if the future has not yet completed. When","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":403589,"byte_end":403657,"line_start":83,"line_end":83,"column_start":1,"column_end":69}},{"value":"/ multiple futures are submitted to the queue, `FuturesOrdered::poll` will","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":403658,"byte_end":403734,"line_start":84,"line_end":84,"column_start":1,"column_end":77}},{"value":"/ return `Poll::Pending` until the first future completes, even if","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":403735,"byte_end":403803,"line_start":85,"line_end":85,"column_start":1,"column_end":69}},{"value":"/ some of the later futures have already completed.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":403804,"byte_end":403857,"line_start":86,"line_end":86,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":403858,"byte_end":403861,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ Note that you can create a ready-made `FuturesOrdered` via the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":403862,"byte_end":403928,"line_start":88,"line_end":88,"column_start":1,"column_end":67}},{"value":"/ [`collect`](Iterator::collect) method, or you can start with an empty queue","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":403929,"byte_end":404008,"line_start":89,"line_end":89,"column_start":1,"column_end":80}},{"value":"/ with the `FuturesOrdered::new` constructor.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":404009,"byte_end":404056,"line_start":90,"line_end":90,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":404057,"byte_end":404060,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ This type is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":404061,"byte_end":404134,"line_start":92,"line_end":92,"column_start":1,"column_end":74}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":404135,"byte_end":404192,"line_start":93,"line_end":93,"column_start":1,"column_end":58}},{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":404193,"byte_end":404241,"line_start":94,"line_end":94,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":5399},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":404775,"byte_end":404778,"line_start":109,"line_end":109,"column_start":12,"column_end":15},"name":"new","qualname":"<FuturesOrdered<Fut>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty `FuturesOrdered`","sig":null,"attributes":[{"value":"/ Constructs a new, empty `FuturesOrdered`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":404555,"byte_end":404599,"line_start":105,"line_end":105,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":404604,"byte_end":404607,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ The returned `FuturesOrdered` does not contain any futures and, in this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":404612,"byte_end":404687,"line_start":107,"line_end":107,"column_start":5,"column_end":80}},{"value":"/ state, `FuturesOrdered::poll_next` will return `Poll::Ready(None)`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":404692,"byte_end":404763,"line_start":108,"line_end":108,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":5400},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":405275,"byte_end":405278,"line_start":123,"line_end":123,"column_start":12,"column_end":15},"name":"len","qualname":"<FuturesOrdered<Fut>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of futures contained in the queue.","sig":null,"attributes":[{"value":"/ Returns the number of futures contained in the queue.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":405002,"byte_end":405059,"line_start":118,"line_end":118,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":405064,"byte_end":405067,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ This represents the total number of in-flight futures, both","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":405072,"byte_end":405135,"line_start":120,"line_end":120,"column_start":5,"column_end":68}},{"value":"/ those currently processing and those that have completed but","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":405140,"byte_end":405204,"line_start":121,"line_end":121,"column_start":5,"column_end":69}},{"value":"/ which are waiting for earlier futures to complete.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":405209,"byte_end":405263,"line_start":122,"line_end":122,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":5401},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":405436,"byte_end":405444,"line_start":128,"line_end":128,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<FuturesOrdered<Fut>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the queue contains no futures\n","sig":null,"attributes":[{"value":"/ Returns `true` if the queue contains no futures","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":405373,"byte_end":405424,"line_start":127,"line_end":127,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":5402},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":405868,"byte_end":405872,"line_start":138,"line_end":138,"column_start":12,"column_end":16},"name":"push","qualname":"<FuturesOrdered<Fut>>::push","value":"pub fn push(&mut Self, Fut)","parent":null,"children":[],"decl_id":null,"docs":" Push a future into the queue.","sig":null,"attributes":[{"value":"/ Push a future into the queue.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":405549,"byte_end":405582,"line_start":132,"line_end":132,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":405587,"byte_end":405590,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ This function submits the given future to the internal set for managing.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":405595,"byte_end":405671,"line_start":134,"line_end":134,"column_start":5,"column_end":81}},{"value":"/ This function will not call `poll` on the submitted future. The caller","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":405676,"byte_end":405750,"line_start":135,"line_end":135,"column_start":5,"column_end":79}},{"value":"/ must ensure that `FuturesOrdered::poll` is called in order to receive","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":405755,"byte_end":405828,"line_start":136,"line_end":136,"column_start":5,"column_end":78}},{"value":"/ task notifications.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":405833,"byte_end":405856,"line_start":137,"line_end":137,"column_start":5,"column_end":28}}]},{"kind":"Mod","id":{"krate":0,"index":5429},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"futures_unordered","qualname":"::stream::futures_unordered","value":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","parent":null,"children":[{"krate":0,"index":5430},{"krate":0,"index":5433},{"krate":0,"index":5434},{"krate":0,"index":5437},{"krate":0,"index":5440},{"krate":0,"index":5443},{"krate":0,"index":5446},{"krate":0,"index":5447},{"krate":0,"index":5450},{"krate":0,"index":5451},{"krate":0,"index":5453},{"krate":0,"index":5456},{"krate":0,"index":5457},{"krate":0,"index":5459},{"krate":0,"index":5462},{"krate":0,"index":5465},{"krate":0,"index":5468},{"krate":0,"index":5469},{"krate":0,"index":5470},{"krate":0,"index":5472},{"krate":0,"index":5473},{"krate":0,"index":5475},{"krate":0,"index":5476},{"krate":0,"index":5478},{"krate":0,"index":5479},{"krate":0,"index":5481},{"krate":0,"index":5482},{"krate":0,"index":5484},{"krate":0,"index":5485},{"krate":0,"index":5488},{"krate":0,"index":5491},{"krate":0,"index":5494},{"krate":0,"index":5495},{"krate":0,"index":5498},{"krate":0,"index":5501},{"krate":0,"index":5502},{"krate":0,"index":5505},{"krate":0,"index":5508},{"krate":0,"index":5509},{"krate":0,"index":5512},{"krate":0,"index":5515},{"krate":0,"index":5518},{"krate":0,"index":5521},{"krate":0,"index":5524},{"krate":0,"index":5530},{"krate":0,"index":5597},{"krate":0,"index":5598},{"krate":0,"index":5601},{"krate":0,"index":5602},{"krate":0,"index":5604},{"krate":0,"index":5605},{"krate":0,"index":5607},{"krate":0,"index":5610},{"krate":0,"index":5613},{"krate":0,"index":5677},{"krate":0,"index":5680},{"krate":0,"index":5739},{"krate":0,"index":5740},{"krate":0,"index":5743},{"krate":0,"index":5746},{"krate":0,"index":5747},{"krate":0,"index":5752},{"krate":0,"index":5754},{"krate":0,"index":5756},{"krate":0,"index":5758},{"krate":0,"index":5760},{"krate":0,"index":5762},{"krate":0,"index":5765},{"krate":0,"index":5780},{"krate":0,"index":5793},{"krate":0,"index":5796},{"krate":0,"index":5800},{"krate":0,"index":5803},{"krate":0,"index":5809},{"krate":0,"index":5815},{"krate":0,"index":5820},{"krate":0,"index":5825},{"krate":0,"index":5828}],"decl_id":null,"docs":" An unbounded set of futures.","sig":null,"attributes":[{"value":"cfg(not(futures_no_atomic_cas))","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137796,"byte_end":137830,"line_start":110,"line_end":110,"column_start":1,"column_end":35}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137831,"byte_end":137856,"line_start":111,"line_end":111,"column_start":1,"column_end":26}},{"value":"/ An unbounded set of futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":408237,"byte_end":408269,"line_start":1,"line_end":1,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":408270,"byte_end":408273,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":408274,"byte_end":408349,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":408350,"byte_end":408407,"line_start":4,"line_end":4,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":12495},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":436254,"byte_end":436264,"line_start":9,"line_end":9,"column_start":12,"column_end":22},"name":"IterPinMut","qualname":"::stream::futures_unordered::iter::IterPinMut","value":"IterPinMut {  }","parent":null,"children":[{"krate":0,"index":12498},{"krate":0,"index":12499},{"krate":0,"index":12500}],"decl_id":null,"docs":" Mutable iterator over all futures in the unordered set.\n","sig":null,"attributes":[{"value":"/ Mutable iterator over all futures in the unordered set.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":436166,"byte_end":436225,"line_start":7,"line_end":7,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":12505},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":436501,"byte_end":436508,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::stream::futures_unordered::iter::IterMut","value":"","parent":null,"children":[],"decl_id":null,"docs":" Mutable iterator over all futures in the unordered set.\n","sig":null,"attributes":[{"value":"/ Mutable iterator over all futures in the unordered set.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":436413,"byte_end":436472,"line_start":15,"line_end":15,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":12514},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":436649,"byte_end":436659,"line_start":21,"line_end":21,"column_start":12,"column_end":22},"name":"IterPinRef","qualname":"::stream::futures_unordered::iter::IterPinRef","value":"IterPinRef {  }","parent":null,"children":[{"krate":0,"index":12517},{"krate":0,"index":12518},{"krate":0,"index":12519},{"krate":0,"index":12520}],"decl_id":null,"docs":" Immutable iterator over all futures in the unordered set.\n","sig":null,"attributes":[{"value":"/ Immutable iterator over all futures in the unordered set.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":436559,"byte_end":436620,"line_start":19,"line_end":19,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":12525},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":436947,"byte_end":436951,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Iter","qualname":"::stream::futures_unordered::iter::Iter","value":"","parent":null,"children":[],"decl_id":null,"docs":" Immutable iterator over all the futures in the unordered set.\n","sig":null,"attributes":[{"value":"/ Immutable iterator over all the futures in the unordered set.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":436853,"byte_end":436918,"line_start":28,"line_end":28,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":12534},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":437088,"byte_end":437096,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::stream::futures_unordered::iter::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":12536},{"krate":0,"index":12537}],"decl_id":null,"docs":" Owned iterator over all futures in the unordered set.\n","sig":null,"attributes":[{"value":"/ Owned iterator over all futures in the unordered set.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":437002,"byte_end":437059,"line_start":32,"line_end":32,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":5747},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":411677,"byte_end":411693,"line_start":82,"line_end":82,"column_start":12,"column_end":28},"name":"FuturesUnordered","qualname":"::stream::futures_unordered::FuturesUnordered","value":"FuturesUnordered {  }","parent":null,"children":[{"krate":0,"index":5749},{"krate":0,"index":5750},{"krate":0,"index":5751}],"decl_id":null,"docs":" A set of futures which may complete in any order.","sig":null,"attributes":[{"value":"/ A set of futures which may complete in any order.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":410582,"byte_end":410635,"line_start":61,"line_end":61,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":410636,"byte_end":410639,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ This structure is optimized to manage a large number of futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":410640,"byte_end":410708,"line_start":63,"line_end":63,"column_start":1,"column_end":69}},{"value":"/ Futures managed by [`FuturesUnordered`] will only be polled when they","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":410709,"byte_end":410782,"line_start":64,"line_end":64,"column_start":1,"column_end":74}},{"value":"/ generate wake-up notifications. This reduces the required amount of work","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":410783,"byte_end":410859,"line_start":65,"line_end":65,"column_start":1,"column_end":77}},{"value":"/ needed to poll large numbers of futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":410860,"byte_end":410904,"line_start":66,"line_end":66,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":410905,"byte_end":410908,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ [`FuturesUnordered`] can be filled by [`collect`](Iterator::collect)ing an","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":410909,"byte_end":410987,"line_start":68,"line_end":68,"column_start":1,"column_end":79}},{"value":"/ iterator of futures into a [`FuturesUnordered`], or by","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":410988,"byte_end":411046,"line_start":69,"line_end":69,"column_start":1,"column_end":59}},{"value":"/ [`push`](FuturesUnordered::push)ing futures onto an existing","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":411047,"byte_end":411111,"line_start":70,"line_end":70,"column_start":1,"column_end":65}},{"value":"/ [`FuturesUnordered`]. When new futures are added,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":411112,"byte_end":411165,"line_start":71,"line_end":71,"column_start":1,"column_end":54}},{"value":"/ [`poll_next`](Stream::poll_next) must be called in order to begin receiving","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":411166,"byte_end":411245,"line_start":72,"line_end":72,"column_start":1,"column_end":80}},{"value":"/ wake-ups for new futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":411246,"byte_end":411275,"line_start":73,"line_end":73,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":411276,"byte_end":411279,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ Note that you can create a ready-made [`FuturesUnordered`] via the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":411280,"byte_end":411350,"line_start":75,"line_end":75,"column_start":1,"column_end":71}},{"value":"/ [`collect`](Iterator::collect) method, or you can start with an empty set","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":411351,"byte_end":411428,"line_start":76,"line_end":76,"column_start":1,"column_end":78}},{"value":"/ with the [`FuturesUnordered::new`] constructor.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":411429,"byte_end":411480,"line_start":77,"line_end":77,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":411481,"byte_end":411484,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ This type is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":411485,"byte_end":411558,"line_start":79,"line_end":79,"column_start":1,"column_end":74}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":411559,"byte_end":411616,"line_start":80,"line_end":80,"column_start":1,"column_end":58}},{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":411617,"byte_end":411665,"line_start":81,"line_end":81,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":5767},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":414310,"byte_end":414313,"line_start":143,"line_end":143,"column_start":12,"column_end":15},"name":"new","qualname":"<FuturesUnordered<Fut>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty [`FuturesUnordered`].","sig":null,"attributes":[{"value":"/ Constructs a new, empty [`FuturesUnordered`].","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":414039,"byte_end":414088,"line_start":138,"line_end":138,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":414093,"byte_end":414096,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ The returned [`FuturesUnordered`] does not contain any futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":414101,"byte_end":414168,"line_start":140,"line_end":140,"column_start":5,"column_end":72}},{"value":"/ In this state, [`FuturesUnordered::poll_next`](Stream::poll_next) will","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":414173,"byte_end":414247,"line_start":141,"line_end":141,"column_start":5,"column_end":79}},{"value":"/ return [`Poll::Ready(None)`](Poll::Ready).","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":414252,"byte_end":414298,"line_start":142,"line_end":142,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":5768},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":415308,"byte_end":415311,"line_start":171,"line_end":171,"column_start":12,"column_end":15},"name":"len","qualname":"<FuturesUnordered<Fut>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of futures contained in the set.","sig":null,"attributes":[{"value":"/ Returns the number of futures contained in the set.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":415170,"byte_end":415225,"line_start":168,"line_end":168,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":415230,"byte_end":415233,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ This represents the total number of in-flight futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":415238,"byte_end":415296,"line_start":170,"line_end":170,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":5769},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":415475,"byte_end":415483,"line_start":177,"line_end":177,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<FuturesUnordered<Fut>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains no futures.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains no futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":415413,"byte_end":415463,"line_start":176,"line_end":176,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":5770},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":416066,"byte_end":416070,"line_start":189,"line_end":189,"column_start":12,"column_end":16},"name":"push","qualname":"<FuturesUnordered<Fut>>::push","value":"pub fn push(&Self, Fut)","parent":null,"children":[],"decl_id":null,"docs":" Push a future into the set.","sig":null,"attributes":[{"value":"/ Push a future into the set.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":415696,"byte_end":415727,"line_start":183,"line_end":183,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":415732,"byte_end":415735,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ This method adds the given future to the set. This method will not","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":415740,"byte_end":415810,"line_start":185,"line_end":185,"column_start":5,"column_end":75}},{"value":"/ call [`poll`](core::future::Future::poll) on the submitted future. The caller must","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":415815,"byte_end":415901,"line_start":186,"line_end":186,"column_start":5,"column_end":91}},{"value":"/ ensure that [`FuturesUnordered::poll_next`](Stream::poll_next) is called","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":415906,"byte_end":415982,"line_start":187,"line_end":187,"column_start":5,"column_end":81}},{"value":"/ in order to receive wake-up notifications for the given future.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":415987,"byte_end":416054,"line_start":188,"line_end":188,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":5771},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":417345,"byte_end":417349,"line_start":217,"line_end":217,"column_start":12,"column_end":16},"name":"iter","qualname":"<FuturesUnordered<Fut>>::iter","value":"pub fn iter(&Self) -> Iter<, Fut> where Fut: Unpin","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows inspecting each future in the set.\n","sig":null,"attributes":[{"value":"/ Returns an iterator that allows inspecting each future in the set.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":417263,"byte_end":417333,"line_start":216,"line_end":216,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":5772},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":417547,"byte_end":417559,"line_start":225,"line_end":225,"column_start":12,"column_end":24},"name":"iter_pin_ref","qualname":"<FuturesUnordered<Fut>>::iter_pin_ref","value":"pub fn iter_pin_ref(Pin<&Self>) -> IterPinRef<, Fut>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows inspecting each future in the set.\n","sig":null,"attributes":[{"value":"/ Returns an iterator that allows inspecting each future in the set.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":417465,"byte_end":417535,"line_start":224,"line_end":224,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":5773},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":417888,"byte_end":417896,"line_start":233,"line_end":233,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<FuturesUnordered<Fut>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, Fut> where Fut: Unpin","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows modifying each future in the set.\n","sig":null,"attributes":[{"value":"/ Returns an iterator that allows modifying each future in the set.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":417807,"byte_end":417876,"line_start":232,"line_end":232,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":5774},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":418103,"byte_end":418115,"line_start":241,"line_end":241,"column_start":12,"column_end":24},"name":"iter_pin_mut","qualname":"<FuturesUnordered<Fut>>::iter_pin_mut","value":"pub fn iter_pin_mut(Pin<&mut Self>) -> IterPinMut<, Fut>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows modifying each future in the set.\n","sig":null,"attributes":[{"value":"/ Returns an iterator that allows modifying each future in the set.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":418022,"byte_end":418091,"line_start":240,"line_end":240,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":5798},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":432490,"byte_end":432495,"line_start":573,"line_end":573,"column_start":12,"column_end":17},"name":"clear","qualname":"<FuturesUnordered<Fut>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, removing all futures.\n","sig":null,"attributes":[{"value":"/ Clears the set, removing all futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":432437,"byte_end":432478,"line_start":572,"line_end":572,"column_start":5,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":5835},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"select_all","qualname":"::stream::select_all","value":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","parent":null,"children":[{"krate":0,"index":5836},{"krate":0,"index":5837},{"krate":0,"index":5840},{"krate":0,"index":5841},{"krate":0,"index":5843},{"krate":0,"index":5846},{"krate":0,"index":5849},{"krate":0,"index":5852},{"krate":0,"index":5853},{"krate":0,"index":5856},{"krate":0,"index":5859},{"krate":0,"index":5860},{"krate":0,"index":5863},{"krate":0,"index":5866},{"krate":0,"index":5869},{"krate":0,"index":5872},{"krate":0,"index":5873},{"krate":0,"index":5876},{"krate":0,"index":5879},{"krate":0,"index":5882},{"krate":0,"index":12541},{"krate":0,"index":12544},{"krate":0,"index":5885},{"krate":0,"index":5888},{"krate":0,"index":5897},{"krate":0,"index":5900},{"krate":0,"index":5904},{"krate":0,"index":5907},{"krate":0,"index":5909},{"krate":0,"index":5913},{"krate":0,"index":5917},{"krate":0,"index":5922},{"krate":0,"index":5928},{"krate":0,"index":12574},{"krate":0,"index":12579},{"krate":0,"index":12583},{"krate":0,"index":12588},{"krate":0,"index":12592},{"krate":0,"index":12596},{"krate":0,"index":5934},{"krate":0,"index":5940},{"krate":0,"index":5942},{"krate":0,"index":5948},{"krate":0,"index":5950},{"krate":0,"index":5955}],"decl_id":null,"docs":" An unbounded set of streams\n","sig":null,"attributes":[{"value":"cfg(not(futures_no_atomic_cas))","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":138012,"byte_end":138046,"line_start":118,"line_end":118,"column_start":1,"column_end":35}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":138047,"byte_end":138072,"line_start":119,"line_end":119,"column_start":1,"column_end":26}},{"value":"/ An unbounded set of streams","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":449441,"byte_end":449472,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":12541},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":450512,"byte_end":450521,"line_start":30,"line_end":30,"column_start":16,"column_end":25},"name":"SelectAll","qualname":"::stream::select_all::SelectAll","value":"SelectAll {  }","parent":null,"children":[{"krate":0,"index":12543}],"decl_id":null,"docs":" An unbounded set of streams","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":5890},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":451003,"byte_end":451006,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"new","qualname":"<SelectAll<St>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty `SelectAll`","sig":null,"attributes":[{"value":"/ Constructs a new, empty `SelectAll`","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":450803,"byte_end":450842,"line_start":43,"line_end":43,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":450847,"byte_end":450850,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ The returned `SelectAll` does not contain any streams and, in this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":450855,"byte_end":450925,"line_start":45,"line_end":45,"column_start":5,"column_end":75}},{"value":"/ state, `SelectAll::poll` will return `Poll::Ready(None)`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":450930,"byte_end":450991,"line_start":46,"line_end":46,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":5891},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":451216,"byte_end":451219,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"len","qualname":"<SelectAll<St>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of streams contained in the set.","sig":null,"attributes":[{"value":"/ Returns the number of streams contained in the set.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":451078,"byte_end":451133,"line_start":51,"line_end":51,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":451138,"byte_end":451141,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ This represents the total number of in-flight streams.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":451146,"byte_end":451204,"line_start":53,"line_end":53,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":5892},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":451335,"byte_end":451343,"line_start":59,"line_end":59,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SelectAll<St>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains no streams\n","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains no streams","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":451274,"byte_end":451323,"line_start":58,"line_end":58,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":5893},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":451705,"byte_end":451709,"line_start":69,"line_end":69,"column_start":12,"column_end":16},"name":"push","qualname":"<SelectAll<St>>::push","value":"pub fn push(&mut Self, St)","parent":null,"children":[],"decl_id":null,"docs":" Push a stream into the set.","sig":null,"attributes":[{"value":"/ Push a stream into the set.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":451402,"byte_end":451433,"line_start":63,"line_end":63,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":451438,"byte_end":451441,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ This function submits the given stream to the set for managing. This","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":451446,"byte_end":451518,"line_start":65,"line_end":65,"column_start":5,"column_end":77}},{"value":"/ function will not call `poll` on the submitted stream. The caller must","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":451523,"byte_end":451597,"line_start":66,"line_end":66,"column_start":5,"column_end":79}},{"value":"/ ensure that `SelectAll::poll` is called in order to receive task","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":451602,"byte_end":451670,"line_start":67,"line_end":67,"column_start":5,"column_end":73}},{"value":"/ notifications.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":451675,"byte_end":451693,"line_start":68,"line_end":68,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5894},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":451875,"byte_end":451879,"line_start":74,"line_end":74,"column_start":12,"column_end":16},"name":"iter","qualname":"<SelectAll<St>>::iter","value":"pub fn iter(&Self) -> Iter<, St>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows inspecting each stream in the set.\n","sig":null,"attributes":[{"value":"/ Returns an iterator that allows inspecting each stream in the set.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":451793,"byte_end":451863,"line_start":73,"line_end":73,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":5895},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":452029,"byte_end":452037,"line_start":79,"line_end":79,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<SelectAll<St>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, St>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows modifying each stream in the set.\n","sig":null,"attributes":[{"value":"/ Returns an iterator that allows modifying each stream in the set.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":451948,"byte_end":452017,"line_start":78,"line_end":78,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":5896},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":452173,"byte_end":452178,"line_start":84,"line_end":84,"column_start":12,"column_end":17},"name":"clear","qualname":"<SelectAll<St>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, removing all streams.\n","sig":null,"attributes":[{"value":"/ Clears the set, removing all streams.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":452120,"byte_end":452161,"line_start":83,"line_end":83,"column_start":5,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":5907},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":453885,"byte_end":453895,"line_start":135,"line_end":135,"column_start":8,"column_end":18},"name":"select_all","qualname":"::stream::select_all::select_all","value":"pub fn select_all<I>(I) -> SelectAll<I::Item> where I: IntoIterator,\nI::Item: Stream + Unpin","parent":null,"children":[],"decl_id":null,"docs":" Convert a list of streams into a `Stream` of results from the streams.","sig":null,"attributes":[{"value":"/ Convert a list of streams into a `Stream` of results from the streams.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":453264,"byte_end":453338,"line_start":123,"line_end":123,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":453339,"byte_end":453342,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ This essentially takes a list of streams (e.g. a vector, an iterator, etc.)","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":453343,"byte_end":453422,"line_start":125,"line_end":125,"column_start":1,"column_end":80}},{"value":"/ and bundles them together into a single stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":453423,"byte_end":453474,"line_start":126,"line_end":126,"column_start":1,"column_end":52}},{"value":"/ The stream will yield items as they become available on the underlying","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":453475,"byte_end":453549,"line_start":127,"line_end":127,"column_start":1,"column_end":75}},{"value":"/ streams internally, in the order they become available.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":453550,"byte_end":453609,"line_start":128,"line_end":128,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":453610,"byte_end":453613,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ Note that the returned set can also be used to dynamically push more","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":453614,"byte_end":453686,"line_start":130,"line_end":130,"column_start":1,"column_end":73}},{"value":"/ streams into the set as they become available.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":453687,"byte_end":453737,"line_start":131,"line_end":131,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":453738,"byte_end":453741,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ This function is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":453742,"byte_end":453819,"line_start":133,"line_end":133,"column_start":1,"column_end":78}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":453820,"byte_end":453877,"line_start":134,"line_end":134,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":12574},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":455202,"byte_end":455206,"line_start":192,"line_end":192,"column_start":12,"column_end":16},"name":"Iter","qualname":"::stream::select_all::Iter","value":"","parent":null,"children":[],"decl_id":null,"docs":" Immutable iterator over all streams in the unordered set.\n","sig":null,"attributes":[{"value":"/ Immutable iterator over all streams in the unordered set.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":455112,"byte_end":455173,"line_start":190,"line_end":190,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":12583},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":455359,"byte_end":455366,"line_start":196,"line_end":196,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::stream::select_all::IterMut","value":"","parent":null,"children":[],"decl_id":null,"docs":" Mutable iterator over all streams in the unordered set.\n","sig":null,"attributes":[{"value":"/ Mutable iterator over all streams in the unordered set.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":455271,"byte_end":455330,"line_start":194,"line_end":194,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":12592},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":455520,"byte_end":455528,"line_start":200,"line_end":200,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::stream::select_all::IntoIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" Owned iterator over all streams in the unordered set.\n","sig":null,"attributes":[{"value":"/ Owned iterator over all streams in the unordered set.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":455434,"byte_end":455491,"line_start":198,"line_end":198,"column_start":1,"column_end":58}}]},{"kind":"Function","id":{"krate":0,"index":5978},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/abortable.rs","byte_start":457543,"byte_end":457552,"line_start":12,"line_end":12,"column_start":8,"column_end":17},"name":"abortable","qualname":"::stream::abortable::abortable","value":"pub fn abortable<St>(St) -> (Abortable<St>, AbortHandle) where St: Stream","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Abortable` stream and an `AbortHandle` which can be used to stop it.","sig":null,"attributes":[{"value":"/ Creates a new `Abortable` stream and an `AbortHandle` which can be used to stop it.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/abortable.rs","byte_start":457173,"byte_end":457260,"line_start":5,"line_end":5,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/abortable.rs","byte_start":457261,"byte_end":457264,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This function is a convenient (but less flexible) alternative to calling","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/abortable.rs","byte_start":457265,"byte_end":457341,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"/ `AbortHandle::new` and `Abortable::new` manually.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/abortable.rs","byte_start":457342,"byte_end":457395,"line_start":8,"line_end":8,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/abortable.rs","byte_start":457396,"byte_end":457399,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This function is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/abortable.rs","byte_start":457400,"byte_end":457477,"line_start":10,"line_end":10,"column_start":1,"column_end":78}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/abortable.rs","byte_start":457478,"byte_end":457535,"line_start":11,"line_end":11,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":6012},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"task","qualname":"::task","value":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","parent":null,"children":[{"krate":0,"index":6013},{"krate":0,"index":6014},{"krate":0,"index":6017},{"krate":0,"index":6020},{"krate":0,"index":6023},{"krate":0,"index":6026},{"krate":0,"index":6029},{"krate":0,"index":6030},{"krate":0,"index":6033},{"krate":0,"index":6036},{"krate":0,"index":6039},{"krate":0,"index":6042},{"krate":0,"index":6045},{"krate":0,"index":6048},{"krate":0,"index":6051},{"krate":0,"index":6054},{"krate":0,"index":6057},{"krate":0,"index":6060},{"krate":0,"index":6061},{"krate":0,"index":6064},{"krate":0,"index":6067},{"krate":0,"index":6070},{"krate":0,"index":6104},{"krate":0,"index":6105},{"krate":0,"index":6108}],"decl_id":null,"docs":" Tools for working with tasks.","sig":null,"attributes":[{"value":"/ Tools for working with tasks.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":457780,"byte_end":457813,"line_start":1,"line_end":1,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":457814,"byte_end":457817,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module contains:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":457818,"byte_end":457843,"line_start":3,"line_end":3,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":457844,"byte_end":457847,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ - [`Spawn`], a trait for spawning new tasks.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":457848,"byte_end":457896,"line_start":5,"line_end":5,"column_start":1,"column_end":49}},{"value":"/ - [`Context`], a context of an asynchronous task,","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":457897,"byte_end":457950,"line_start":6,"line_end":6,"column_start":1,"column_end":54}},{"value":"/   including a handle for waking up the task.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":457951,"byte_end":457999,"line_start":7,"line_end":7,"column_start":1,"column_end":49}},{"value":"/ - [`Waker`], a handle for waking up a task.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458000,"byte_end":458047,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458048,"byte_end":458051,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ The remaining types and traits in the module are used for implementing","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458052,"byte_end":458126,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ executors or dealing with synchronization issues around task wakeup.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/mod.rs","byte_start":458127,"byte_end":458199,"line_start":11,"line_end":11,"column_start":1,"column_end":73}}]},{"kind":"Trait","id":{"krate":0,"index":6098},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":459449,"byte_end":459457,"line_start":20,"line_end":20,"column_start":11,"column_end":19},"name":"SpawnExt","qualname":"::task::spawn::SpawnExt","value":"SpawnExt: Spawn","parent":null,"children":[{"krate":0,"index":6099}],"decl_id":null,"docs":" Extension trait for `Spawn`.\n","sig":null,"attributes":[{"value":"/ Extension trait for `Spawn`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":459406,"byte_end":459438,"line_start":19,"line_end":19,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":6099},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":460454,"byte_end":460459,"line_start":46,"line_end":46,"column_start":8,"column_end":13},"name":"spawn","qualname":"::task::spawn::SpawnExt::spawn","value":"pub fn spawn<Fut>(&Self, Fut) -> Result<(), SpawnError> where\nFut: Future<Output = ()> + Send + 'static","parent":{"krate":0,"index":6098},"children":[],"decl_id":null,"docs":" Spawns a task that polls the given future with output `()` to\n completion.","sig":null,"attributes":[{"value":"/ Spawns a task that polls the given future with output `()` to","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":459471,"byte_end":459536,"line_start":21,"line_end":21,"column_start":5,"column_end":70}},{"value":"/ completion.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":459541,"byte_end":459556,"line_start":22,"line_end":22,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":459561,"byte_end":459564,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ This method returns a [`Result`] that contains a [`SpawnError`] if","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":459569,"byte_end":459639,"line_start":24,"line_end":24,"column_start":5,"column_end":75}},{"value":"/ spawning fails.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":459644,"byte_end":459663,"line_start":25,"line_end":25,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":459668,"byte_end":459671,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ You can use [`spawn_with_handle`](SpawnExt::spawn_with_handle) if","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":459676,"byte_end":459745,"line_start":27,"line_end":27,"column_start":5,"column_end":74}},{"value":"/ you want to spawn a future with output other than `()` or if you want","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":459750,"byte_end":459823,"line_start":28,"line_end":28,"column_start":5,"column_end":78}},{"value":"/ to be able to await its completion.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":459828,"byte_end":459867,"line_start":29,"line_end":29,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":459872,"byte_end":459875,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Note this method will eventually be replaced with the upcoming","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":459880,"byte_end":459946,"line_start":31,"line_end":31,"column_start":5,"column_end":71}},{"value":"/ `Spawn::spawn` method which will take a `dyn Future` as input.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":459951,"byte_end":460017,"line_start":32,"line_end":32,"column_start":5,"column_end":71}},{"value":"/ Technical limitations prevent `Spawn::spawn` from being implemented","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":460022,"byte_end":460093,"line_start":33,"line_end":33,"column_start":5,"column_end":76}},{"value":"/ today. Feel free to use this method in the meantime.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":460098,"byte_end":460154,"line_start":34,"line_end":34,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":460159,"byte_end":460162,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":460167,"byte_end":460174,"line_start":36,"line_end":36,"column_start":5,"column_end":12}},{"value":"/ use futures::executor::ThreadPool;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":460179,"byte_end":460217,"line_start":37,"line_end":37,"column_start":5,"column_end":43}},{"value":"/ use futures::task::SpawnExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":460222,"byte_end":460254,"line_start":38,"line_end":38,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":460259,"byte_end":460262,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ let executor = ThreadPool::new().unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":460267,"byte_end":460313,"line_start":40,"line_end":40,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":460318,"byte_end":460321,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ let future = async { /* ... */ };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":460326,"byte_end":460363,"line_start":42,"line_end":42,"column_start":5,"column_end":42}},{"value":"/ executor.spawn(future).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":460368,"byte_end":460404,"line_start":43,"line_end":43,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":460409,"byte_end":460416,"line_start":44,"line_end":44,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":460421,"byte_end":460446,"line_start":45,"line_end":45,"column_start":5,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":6101},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":462213,"byte_end":462226,"line_start":97,"line_end":97,"column_start":11,"column_end":24},"name":"LocalSpawnExt","qualname":"::task::spawn::LocalSpawnExt","value":"LocalSpawnExt: LocalSpawn","parent":null,"children":[{"krate":0,"index":6102}],"decl_id":null,"docs":" Extension trait for `LocalSpawn`.\n","sig":null,"attributes":[{"value":"/ Extension trait for `LocalSpawn`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":462165,"byte_end":462202,"line_start":96,"line_end":96,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":6102},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":463269,"byte_end":463280,"line_start":124,"line_end":124,"column_start":8,"column_end":19},"name":"spawn_local","qualname":"::task::spawn::LocalSpawnExt::spawn_local","value":"pub fn spawn_local<Fut>(&Self, Fut) -> Result<(), SpawnError> where\nFut: Future<Output = ()> + 'static","parent":{"krate":0,"index":6101},"children":[],"decl_id":null,"docs":" Spawns a task that polls the given future with output `()` to\n completion.","sig":null,"attributes":[{"value":"/ Spawns a task that polls the given future with output `()` to","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":462245,"byte_end":462310,"line_start":98,"line_end":98,"column_start":5,"column_end":70}},{"value":"/ completion.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":462315,"byte_end":462330,"line_start":99,"line_end":99,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":462335,"byte_end":462338,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ This method returns a [`Result`] that contains a [`SpawnError`] if","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":462343,"byte_end":462413,"line_start":101,"line_end":101,"column_start":5,"column_end":75}},{"value":"/ spawning fails.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":462418,"byte_end":462437,"line_start":102,"line_end":102,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":462442,"byte_end":462445,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ You can use [`spawn_with_handle`](SpawnExt::spawn_with_handle) if","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":462450,"byte_end":462519,"line_start":104,"line_end":104,"column_start":5,"column_end":74}},{"value":"/ you want to spawn a future with output other than `()` or if you want","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":462524,"byte_end":462597,"line_start":105,"line_end":105,"column_start":5,"column_end":78}},{"value":"/ to be able to await its completion.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":462602,"byte_end":462641,"line_start":106,"line_end":106,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":462646,"byte_end":462649,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ Note this method will eventually be replaced with the upcoming","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":462654,"byte_end":462720,"line_start":108,"line_end":108,"column_start":5,"column_end":71}},{"value":"/ `Spawn::spawn` method which will take a `dyn Future` as input.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":462725,"byte_end":462791,"line_start":109,"line_end":109,"column_start":5,"column_end":71}},{"value":"/ Technical limitations prevent `Spawn::spawn` from being implemented","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":462796,"byte_end":462867,"line_start":110,"line_end":110,"column_start":5,"column_end":76}},{"value":"/ today. Feel free to use this method in the meantime.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":462872,"byte_end":462928,"line_start":111,"line_end":111,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":462933,"byte_end":462936,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":462941,"byte_end":462948,"line_start":113,"line_end":113,"column_start":5,"column_end":12}},{"value":"/ use futures::executor::LocalPool;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":462953,"byte_end":462990,"line_start":114,"line_end":114,"column_start":5,"column_end":42}},{"value":"/ use futures::task::LocalSpawnExt;","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":462995,"byte_end":463032,"line_start":115,"line_end":115,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":463037,"byte_end":463040,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ let executor = LocalPool::new();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":463045,"byte_end":463081,"line_start":117,"line_end":117,"column_start":5,"column_end":41}},{"value":"/ let spawner = executor.spawner();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":463086,"byte_end":463123,"line_start":118,"line_end":118,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":463128,"byte_end":463131,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ let future = async { /* ... */ };","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":463136,"byte_end":463173,"line_start":120,"line_end":120,"column_start":5,"column_end":42}},{"value":"/ spawner.spawn_local(future).unwrap();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":463178,"byte_end":463219,"line_start":121,"line_end":121,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":463224,"byte_end":463231,"line_start":122,"line_end":122,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":463236,"byte_end":463261,"line_start":123,"line_end":123,"column_start":5,"column_end":30}}]},{"kind":"Mod","id":{"krate":0,"index":6111},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/never.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"never","qualname":"::never","value":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/never.rs","parent":null,"children":[{"krate":0,"index":6112}],"decl_id":null,"docs":" This module contains the `Never` type.","sig":null,"attributes":[{"value":"/ This module contains the `Never` type.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/never.rs","byte_start":464685,"byte_end":464727,"line_start":1,"line_end":1,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/never.rs","byte_start":464728,"byte_end":464731,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Values of this type can never be created and will never exist.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/never.rs","byte_start":464732,"byte_end":464798,"line_start":3,"line_end":3,"column_start":1,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":6112},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/never.rs","byte_start":465435,"byte_end":465440,"line_start":18,"line_end":18,"column_start":10,"column_end":15},"name":"Never","qualname":"::never::Never","value":"core::convert::Infallible","parent":null,"children":[],"decl_id":null,"docs":" A type with no possible values.","sig":null,"attributes":[{"value":"/ A type with no possible values.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/never.rs","byte_start":464800,"byte_end":464835,"line_start":5,"line_end":5,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/never.rs","byte_start":464836,"byte_end":464839,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This is used to indicate values which can never be created, such as the","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/never.rs","byte_start":464840,"byte_end":464915,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ error type of infallible futures.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/never.rs","byte_start":464916,"byte_end":464953,"line_start":8,"line_end":8,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/never.rs","byte_start":464954,"byte_end":464957,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This type is a stable equivalent to the `!` type from `std`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/never.rs","byte_start":464958,"byte_end":465022,"line_start":10,"line_end":10,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/never.rs","byte_start":465023,"byte_end":465026,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This is currently an alias for [`std::convert::Infallible`], but in","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/never.rs","byte_start":465027,"byte_end":465098,"line_start":12,"line_end":12,"column_start":1,"column_end":72}},{"value":"/ the future it may be an alias for [`!`][never].","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/never.rs","byte_start":465099,"byte_end":465150,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"/ See [\"Future compatibility\" section of `std::convert::Infallible`][infallible] for more.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/never.rs","byte_start":465151,"byte_end":465243,"line_start":14,"line_end":14,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/never.rs","byte_start":465244,"byte_end":465247,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ [never]: https://doc.rust-lang.org/nightly/std/primitive.never.html","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/never.rs","byte_start":465248,"byte_end":465319,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/ [infallible]: https://doc.rust-lang.org/nightly/std/convert/enum.Infallible.html#future-compatibility","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/never.rs","byte_start":465320,"byte_end":465425,"line_start":17,"line_end":17,"column_start":1,"column_end":106}}]},{"kind":"Mod","id":{"krate":0,"index":6113},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lock/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"lock","qualname":"::lock","value":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lock/mod.rs","parent":null,"children":[],"decl_id":null,"docs":" Futures-powered synchronization primitives.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":11428,"byte_end":11453,"line_start":329,"line_end":329,"column_start":1,"column_end":26}},{"value":"/ Futures-powered synchronization primitives.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lock/mod.rs","byte_start":465471,"byte_end":465518,"line_start":1,"line_end":1,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lock/mod.rs","byte_start":465519,"byte_end":465522,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module is only available when the `std` or `alloc` feature of this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lock/mod.rs","byte_start":465523,"byte_end":465598,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lock/mod.rs","byte_start":465599,"byte_end":465656,"line_start":4,"line_end":4,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":12604},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":466910,"byte_end":466919,"line_start":15,"line_end":15,"column_start":16,"column_end":25},"name":"Abortable","qualname":"::abortable::Abortable","value":"Abortable {  }","parent":null,"children":[{"krate":0,"index":12606},{"krate":0,"index":12607}],"decl_id":null,"docs":" A future/stream which can be remotely short-circuited using an `AbortHandle`.\n","sig":null,"attributes":[{"value":"must_use = \"futures/streams do nothing unless you poll them\"","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":10749839,"byte_end":10749848,"line_start":331,"line_end":331,"column_start":11,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":6152},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":468329,"byte_end":468332,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"new","qualname":"<Abortable<T>>::new","value":"pub fn new(T, AbortRegistration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Abortable` future/stream using an existing `AbortRegistration`.\n `AbortRegistration`s can be acquired through `AbortHandle::new`.","sig":null,"attributes":[{"value":"/ Creates a new `Abortable` future/stream using an existing `AbortRegistration`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467025,"byte_end":467107,"line_start":23,"line_end":23,"column_start":5,"column_end":87}},{"value":"/ `AbortRegistration`s can be acquired through `AbortHandle::new`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467112,"byte_end":467180,"line_start":24,"line_end":24,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467185,"byte_end":467188,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ When `abort` is called on the handle tied to `reg` or if `abort` has","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467193,"byte_end":467265,"line_start":26,"line_end":26,"column_start":5,"column_end":77}},{"value":"/ already been called, the future/stream will complete immediately without making","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467270,"byte_end":467353,"line_start":27,"line_end":27,"column_start":5,"column_end":88}},{"value":"/ any further progress.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467358,"byte_end":467383,"line_start":28,"line_end":28,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467388,"byte_end":467391,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ # Examples:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467396,"byte_end":467411,"line_start":30,"line_end":30,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467416,"byte_end":467419,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ Usage with futures:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467424,"byte_end":467447,"line_start":32,"line_end":32,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467452,"byte_end":467455,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467460,"byte_end":467467,"line_start":34,"line_end":34,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467472,"byte_end":467513,"line_start":35,"line_end":35,"column_start":5,"column_end":46}},{"value":"/ use futures::future::{Abortable, AbortHandle, Aborted};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467518,"byte_end":467577,"line_start":36,"line_end":36,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467582,"byte_end":467585,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ let (abort_handle, abort_registration) = AbortHandle::new_pair();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467590,"byte_end":467659,"line_start":38,"line_end":38,"column_start":5,"column_end":74}},{"value":"/ let future = Abortable::new(async { 2 }, abort_registration);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467664,"byte_end":467729,"line_start":39,"line_end":39,"column_start":5,"column_end":70}},{"value":"/ abort_handle.abort();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467734,"byte_end":467759,"line_start":40,"line_end":40,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(future.await, Err(Aborted));","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467764,"byte_end":467807,"line_start":41,"line_end":41,"column_start":5,"column_end":48}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467812,"byte_end":467821,"line_start":42,"line_end":42,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467826,"byte_end":467833,"line_start":43,"line_end":43,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467838,"byte_end":467841,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ Usage with streams:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467846,"byte_end":467869,"line_start":45,"line_end":45,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467874,"byte_end":467877,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467882,"byte_end":467889,"line_start":47,"line_end":47,"column_start":5,"column_end":12}},{"value":"/ # futures::executor::block_on(async {","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467894,"byte_end":467935,"line_start":48,"line_end":48,"column_start":5,"column_end":46}},{"value":"/ # use futures::future::{Abortable, AbortHandle};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467940,"byte_end":467992,"line_start":49,"line_end":49,"column_start":5,"column_end":57}},{"value":"/ # use futures::stream::{self, StreamExt};","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467997,"byte_end":468042,"line_start":50,"line_end":50,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":468047,"byte_end":468050,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ let (abort_handle, abort_registration) = AbortHandle::new_pair();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":468055,"byte_end":468124,"line_start":52,"line_end":52,"column_start":5,"column_end":74}},{"value":"/ let mut stream = Abortable::new(stream::iter(vec![1, 2, 3]), abort_registration);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":468129,"byte_end":468214,"line_start":53,"line_end":53,"column_start":5,"column_end":90}},{"value":"/ abort_handle.abort();","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":468219,"byte_end":468244,"line_start":54,"line_end":54,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(stream.next().await, None);","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":468249,"byte_end":468291,"line_start":55,"line_end":55,"column_start":5,"column_end":47}},{"value":"/ # });","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":468296,"byte_end":468305,"line_start":56,"line_end":56,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":468310,"byte_end":468317,"line_start":57,"line_end":57,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6153},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":468837,"byte_end":468847,"line_start":68,"line_end":68,"column_start":12,"column_end":22},"name":"is_aborted","qualname":"<Abortable<T>>::is_aborted","value":"pub fn is_aborted(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the task has been aborted. Note that all this\n method indicates is whether [`AbortHandle::abort`] was *called*.\n This means that it will return `true` even if:\n * `abort` was called after the task had completed.\n * `abort` was called while the task was being polled - the task may still be running and\n will not be stopped until `poll` returns.\n","sig":null,"attributes":[{"value":"/ Checks whether the task has been aborted. Note that all this","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":468427,"byte_end":468491,"line_start":62,"line_end":62,"column_start":5,"column_end":69}},{"value":"/ method indicates is whether [`AbortHandle::abort`] was *called*.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":468496,"byte_end":468564,"line_start":63,"line_end":63,"column_start":5,"column_end":73}},{"value":"/ This means that it will return `true` even if:","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":468569,"byte_end":468619,"line_start":64,"line_end":64,"column_start":5,"column_end":55}},{"value":"/ * `abort` was called after the task had completed.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":468624,"byte_end":468678,"line_start":65,"line_end":65,"column_start":5,"column_end":59}},{"value":"/ * `abort` was called while the task was being polled - the task may still be running and","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":468683,"byte_end":468775,"line_start":66,"line_end":66,"column_start":5,"column_end":97}},{"value":"/ will not be stopped until `poll` returns.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":468780,"byte_end":468825,"line_start":67,"line_end":67,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":12642},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":469115,"byte_end":469132,"line_start":77,"line_end":77,"column_start":12,"column_end":29},"name":"AbortRegistration","qualname":"::abortable::AbortRegistration","value":"AbortRegistration {  }","parent":null,"children":[{"krate":0,"index":12643}],"decl_id":null,"docs":" A registration handle for an `Abortable` task.\n Values of this type can be acquired from `AbortHandle::new` and are used\n in calls to `Abortable::new`.\n","sig":null,"attributes":[{"value":"/ A registration handle for an `Abortable` task.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":468925,"byte_end":468975,"line_start":73,"line_end":73,"column_start":1,"column_end":51}},{"value":"/ Values of this type can be acquired from `AbortHandle::new` and are used","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":468976,"byte_end":469052,"line_start":74,"line_end":74,"column_start":1,"column_end":77}},{"value":"/ in calls to `Abortable::new`.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":469053,"byte_end":469086,"line_start":75,"line_end":75,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":12646},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":469238,"byte_end":469249,"line_start":83,"line_end":83,"column_start":12,"column_end":23},"name":"AbortHandle","qualname":"::abortable::AbortHandle","value":"AbortHandle {  }","parent":null,"children":[{"krate":0,"index":12647}],"decl_id":null,"docs":" A handle to an `Abortable` task.\n","sig":null,"attributes":[{"value":"/ A handle to an `Abortable` task.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":469166,"byte_end":469202,"line_start":81,"line_end":81,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":6155},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":469520,"byte_end":469528,"line_start":92,"line_end":92,"column_start":12,"column_end":20},"name":"new_pair","qualname":"<AbortHandle>::new_pair","value":"pub fn new_pair() -> (Self, AbortRegistration)","parent":null,"children":[],"decl_id":null,"docs":" Creates an (`AbortHandle`, `AbortRegistration`) pair which can be used\n to abort a running future or stream.","sig":null,"attributes":[{"value":"/ Creates an (`AbortHandle`, `AbortRegistration`) pair which can be used","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":469306,"byte_end":469380,"line_start":88,"line_end":88,"column_start":5,"column_end":79}},{"value":"/ to abort a running future or stream.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":469385,"byte_end":469425,"line_start":89,"line_end":89,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":469430,"byte_end":469433,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ This function is usually paired with a call to [`Abortable::new`].","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":469438,"byte_end":469508,"line_start":91,"line_end":91,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":12657},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":470050,"byte_end":470057,"line_start":110,"line_end":110,"column_start":12,"column_end":19},"name":"Aborted","qualname":"::abortable::Aborted","value":"","parent":null,"children":[],"decl_id":null,"docs":" Indicator that the `Abortable` task was aborted.\n","sig":null,"attributes":[{"value":"/ Indicator that the `Abortable` task was aborted.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":469941,"byte_end":469993,"line_start":108,"line_end":108,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":6174},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":472191,"byte_end":472196,"line_start":181,"line_end":181,"column_start":12,"column_end":17},"name":"abort","qualname":"<AbortHandle>::abort","value":"pub fn abort(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Abort the `Abortable` stream/future associated with this handle.","sig":null,"attributes":[{"value":"/ Abort the `Abortable` stream/future associated with this handle.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":471824,"byte_end":471892,"line_start":175,"line_end":175,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":471897,"byte_end":471900,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Notifies the Abortable task associated with this handle that it","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":471905,"byte_end":471972,"line_start":177,"line_end":177,"column_start":5,"column_end":72}},{"value":"/ should abort. Note that if the task is currently being polled on","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":471977,"byte_end":472045,"line_start":178,"line_end":178,"column_start":5,"column_end":73}},{"value":"/ another thread, it will not immediately stop running. Instead, it will","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":472050,"byte_end":472124,"line_start":179,"line_end":179,"column_start":5,"column_end":79}},{"value":"/ continue to run until its poll method returns.","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":472129,"byte_end":472179,"line_start":180,"line_end":180,"column_start":5,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":6186},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":472379,"byte_end":472386,"line_start":4,"line_end":4,"column_start":11,"column_end":18},"name":"FnOnce1","qualname":"::fns::FnOnce1","value":"FnOnce1<A>","parent":null,"children":[{"krate":0,"index":6188},{"krate":0,"index":6189}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":6188},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":472401,"byte_end":472407,"line_start":5,"line_end":5,"column_start":10,"column_end":16},"name":"Output","qualname":"::fns::FnOnce1::Output","value":"type Output;","parent":{"krate":0,"index":6186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6189},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":472416,"byte_end":472425,"line_start":6,"line_end":6,"column_start":8,"column_end":17},"name":"call_once","qualname":"::fns::FnOnce1::call_once","value":"pub fn call_once(Self, A) -> Self::Output","parent":{"krate":0,"index":6186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":6196},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":472618,"byte_end":472624,"line_start":19,"line_end":19,"column_start":11,"column_end":17},"name":"FnMut1","qualname":"::fns::FnMut1","value":"FnMut1<A>: FnOnce1<A>","parent":null,"children":[{"krate":0,"index":6198}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6198},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":472649,"byte_end":472657,"line_start":20,"line_end":20,"column_start":8,"column_end":16},"name":"call_mut","qualname":"::fns::FnMut1::call_mut","value":"pub fn call_mut(&mut Self, A) -> Self::Output","parent":{"krate":0,"index":6196},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6213},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":473963,"byte_end":473967,"line_start":74,"line_end":74,"column_start":12,"column_end":16},"name":"OkFn","qualname":"::fns::OkFn","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12688},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":474323,"byte_end":474330,"line_start":92,"line_end":92,"column_start":12,"column_end":19},"name":"ChainFn","qualname":"::fns::ChainFn","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12709},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":475064,"byte_end":475077,"line_start":127,"line_end":127,"column_start":12,"column_end":25},"name":"MergeResultFn","qualname":"::fns::MergeResultFn","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12725},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":475419,"byte_end":475428,"line_start":141,"line_end":141,"column_start":12,"column_end":21},"name":"InspectFn","qualname":"::fns::InspectFn","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12740},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":476383,"byte_end":476390,"line_start":179,"line_end":179,"column_start":12,"column_end":19},"name":"MapOkFn","qualname":"::fns::MapOkFn","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12755},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":477101,"byte_end":477109,"line_start":211,"line_end":211,"column_start":12,"column_end":20},"name":"MapErrFn","qualname":"::fns::MapErrFn","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12770},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":477829,"byte_end":477840,"line_start":243,"line_end":243,"column_start":12,"column_end":23},"name":"InspectOkFn","qualname":"::fns::InspectOkFn","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12782},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":478725,"byte_end":478737,"line_start":281,"line_end":281,"column_start":12,"column_end":24},"name":"InspectErrFn","qualname":"::fns::InspectErrFn","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12794},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":479885,"byte_end":479899,"line_start":324,"line_end":324,"column_start":12,"column_end":26},"name":"UnwrapOrElseFn","qualname":"::fns::UnwrapOrElseFn","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6377},"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":480664,"byte_end":480670,"line_start":355,"line_end":355,"column_start":12,"column_end":18},"name":"IntoFn","qualname":"::fns::IntoFn","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/flatten.rs","byte_start":35483,"byte_end":35490,"line_start":20,"line_end":20,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/flatten.rs","byte_start":35620,"byte_end":35627,"line_start":26,"line_end":26,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/flatten.rs","byte_start":35852,"byte_end":35859,"line_start":39,"line_end":39,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/flatten.rs","byte_start":36633,"byte_end":36640,"line_start":64,"line_end":64,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/flatten.rs","byte_start":36865,"byte_end":36872,"line_start":77,"line_end":77,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":39886,"byte_end":39890,"line_start":17,"line_end":17,"column_start":11,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":39997,"byte_end":40001,"line_start":23,"line_end":23,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":41730,"byte_end":41734,"line_start":74,"line_end":74,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":41847,"byte_end":41851,"line_start":80,"line_end":80,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/map.rs","byte_start":42829,"byte_end":42832,"line_start":25,"line_end":25,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/map.rs","byte_start":43001,"byte_end":43004,"line_start":32,"line_end":32,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/map.rs","byte_start":43266,"byte_end":43269,"line_start":45,"line_end":45,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":18634,"byte_end":18635,"line_start":119,"line_end":119,"column_start":31,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/into_future.rs","byte_start":66076,"byte_end":66086,"line_start":16,"line_end":16,"column_start":11,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/into_future.rs","byte_start":66237,"byte_end":66247,"line_start":23,"line_end":23,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/into_future.rs","byte_start":66370,"byte_end":66380,"line_start":29,"line_end":29,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten.rs","byte_start":67089,"byte_end":67099,"line_start":20,"line_end":20,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten.rs","byte_start":67229,"byte_end":67239,"line_start":26,"line_end":26,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten.rs","byte_start":67482,"byte_end":67492,"line_start":39,"line_end":39,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten.rs","byte_start":68445,"byte_end":68455,"line_start":67,"line_end":67,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten.rs","byte_start":68698,"byte_end":68708,"line_start":80,"line_end":80,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":461},{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten_err.rs","byte_start":72032,"byte_end":72045,"line_start":17,"line_end":17,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten_err.rs","byte_start":72175,"byte_end":72188,"line_start":23,"line_end":23,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten_err.rs","byte_start":72431,"byte_end":72444,"line_start":36,"line_end":36,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":499},{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":48622,"byte_end":48625,"line_start":134,"line_end":134,"column_start":48,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":73753,"byte_end":73757,"line_start":14,"line_end":14,"column_start":19,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":74353,"byte_end":74357,"line_start":42,"line_end":42,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":74501,"byte_end":74505,"line_start":51,"line_end":51,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":613},{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75108,"byte_end":75115,"line_start":14,"line_end":14,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75676,"byte_end":75683,"line_start":40,"line_end":40,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":653},{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75828,"byte_end":75835,"line_start":48,"line_end":48,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75861,"byte_end":75868,"line_start":50,"line_end":50,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76622,"byte_end":76631,"line_start":24,"line_end":24,"column_start":37,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":77234,"byte_end":77243,"line_start":47,"line_end":47,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":700},{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":78341,"byte_end":78350,"line_start":79,"line_end":79,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":704}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":78551,"byte_end":78560,"line_start":88,"line_end":88,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":707},{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":79880,"byte_end":79892,"line_start":25,"line_end":25,"column_start":40,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":80118,"byte_end":80130,"line_start":32,"line_end":32,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":752},{"krate":0,"index":753}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":81243,"byte_end":81255,"line_start":64,"line_end":64,"column_start":38,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":81459,"byte_end":81471,"line_start":73,"line_end":73,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":759},{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/option.rs","byte_start":83121,"byte_end":83133,"line_start":34,"line_end":34,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":791}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/option.rs","byte_start":83231,"byte_end":83243,"line_start":40,"line_end":40,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":794},{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/option.rs","byte_start":83557,"byte_end":83569,"line_start":51,"line_end":51,"column_start":38,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/option.rs","byte_start":83756,"byte_end":83768,"line_start":60,"line_end":60,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84206,"byte_end":84212,"line_start":15,"line_end":15,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84906,"byte_end":84912,"line_start":43,"line_end":43,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":85054,"byte_end":85060,"line_start":49,"line_end":49,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":839},{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":85788,"byte_end":85801,"line_start":19,"line_end":19,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":86367,"byte_end":86380,"line_start":40,"line_end":40,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":882}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":87400,"byte_end":87413,"line_start":70,"line_end":70,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":886},{"krate":0,"index":887}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":89585,"byte_end":89590,"line_start":11,"line_end":11,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":921}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":89769,"byte_end":89774,"line_start":19,"line_end":19,"column_start":19,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":89806,"byte_end":89811,"line_start":21,"line_end":21,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":89908,"byte_end":89913,"line_start":27,"line_end":27,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":929},{"krate":0,"index":930}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":97900,"byte_end":97907,"line_start":50,"line_end":50,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1092}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":100668,"byte_end":100675,"line_start":131,"line_end":131,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1097},{"krate":0,"index":1098}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":101663,"byte_end":101670,"line_start":163,"line_end":163,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102166,"byte_end":102172,"line_start":14,"line_end":14,"column_start":36,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":104608,"byte_end":104614,"line_start":94,"line_end":94,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1148},{"krate":0,"index":1149}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":105318,"byte_end":105324,"line_start":116,"line_end":116,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1153}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":105887,"byte_end":105896,"line_start":17,"line_end":17,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":106903,"byte_end":106912,"line_start":44,"line_end":44,"column_start":11,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1196}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":107095,"byte_end":107104,"line_start":51,"line_end":51,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1199},{"krate":0,"index":1200}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":107774,"byte_end":107783,"line_start":70,"line_end":70,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1204}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":116391,"byte_end":116401,"line_start":37,"line_end":37,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1348}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":118231,"byte_end":118241,"line_start":97,"line_end":97,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1353},{"krate":0,"index":1354}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":119389,"byte_end":119399,"line_start":133,"line_end":133,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1358}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":119881,"byte_end":119890,"line_start":13,"line_end":13,"column_start":36,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":121729,"byte_end":121738,"line_start":61,"line_end":61,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1401},{"krate":0,"index":1402}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":123100,"byte_end":123108,"line_start":17,"line_end":17,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":124186,"byte_end":124194,"line_start":45,"line_end":45,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1449},{"krate":0,"index":1450}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":125625,"byte_end":125633,"line_start":81,"line_end":81,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1454}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126612,"byte_end":126618,"line_start":35,"line_end":35,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1491}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126957,"byte_end":126963,"line_start":46,"line_end":46,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1496}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":127348,"byte_end":127354,"line_start":58,"line_end":58,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1501}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":127735,"byte_end":127741,"line_start":70,"line_end":70,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1504}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":127982,"byte_end":127988,"line_start":80,"line_end":80,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1508},{"krate":0,"index":1509}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":128327,"byte_end":128333,"line_start":95,"line_end":95,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1513}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":128609,"byte_end":128615,"line_start":108,"line_end":108,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1517},{"krate":0,"index":1518},{"krate":0,"index":1519}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":129150,"byte_end":129156,"line_start":130,"line_end":130,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1523}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/chain.rs","byte_start":192752,"byte_end":192757,"line_start":20,"line_end":20,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1675}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/chain.rs","byte_start":192983,"byte_end":192988,"line_start":30,"line_end":30,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1679}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/chain.rs","byte_start":193197,"byte_end":193202,"line_start":40,"line_end":40,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1683},{"krate":0,"index":1684},{"krate":0,"index":1685}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/collect.rs","byte_start":194798,"byte_end":194805,"line_start":20,"line_end":20,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1726},{"krate":0,"index":1727}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/collect.rs","byte_start":195070,"byte_end":195077,"line_start":30,"line_end":30,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1731}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/collect.rs","byte_start":195255,"byte_end":195262,"line_start":40,"line_end":40,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1735},{"krate":0,"index":1736}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/unzip.rs","byte_start":196288,"byte_end":196293,"line_start":21,"line_end":21,"column_start":50,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1778},{"krate":0,"index":1779}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/unzip.rs","byte_start":196687,"byte_end":196692,"line_start":32,"line_end":32,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1786}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/unzip.rs","byte_start":196942,"byte_end":196947,"line_start":43,"line_end":43,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1793},{"krate":0,"index":1794}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/concat.rs","byte_start":198072,"byte_end":198078,"line_start":19,"line_end":19,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1831}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/concat.rs","byte_start":198298,"byte_end":198304,"line_start":29,"line_end":29,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1834},{"krate":0,"index":1835}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/concat.rs","byte_start":199012,"byte_end":199018,"line_start":54,"line_end":54,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1838}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/count.rs","byte_start":199744,"byte_end":199749,"line_start":19,"line_end":19,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1878}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/count.rs","byte_start":199970,"byte_end":199975,"line_start":28,"line_end":28,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1881}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/count.rs","byte_start":200107,"byte_end":200112,"line_start":34,"line_end":34,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1884}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/count.rs","byte_start":200230,"byte_end":200235,"line_start":40,"line_end":40,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1887},{"krate":0,"index":1888}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/cycle.rs","byte_start":201041,"byte_end":201046,"line_start":19,"line_end":19,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1921}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/cycle.rs","byte_start":201202,"byte_end":201207,"line_start":28,"line_end":28,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1926}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/cycle.rs","byte_start":201956,"byte_end":201961,"line_start":56,"line_end":56,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1929}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/enumerate.rs","byte_start":202709,"byte_end":202718,"line_start":20,"line_end":20,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1959},{"krate":0,"index":9140},{"krate":0,"index":9141},{"krate":0,"index":9142},{"krate":0,"index":9143}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/enumerate.rs","byte_start":202904,"byte_end":202913,"line_start":28,"line_end":28,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1962}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/enumerate.rs","byte_start":203031,"byte_end":203040,"line_start":34,"line_end":34,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1965},{"krate":0,"index":1966},{"krate":0,"index":1967}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/filter.rs","byte_start":204481,"byte_end":204487,"line_start":27,"line_end":27,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2008}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/filter.rs","byte_start":204960,"byte_end":204966,"line_start":43,"line_end":43,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2014},{"krate":0,"index":9205},{"krate":0,"index":9206},{"krate":0,"index":9207},{"krate":0,"index":9208}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/filter.rs","byte_start":205289,"byte_end":205295,"line_start":56,"line_end":56,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2019}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/filter.rs","byte_start":205632,"byte_end":205638,"line_start":68,"line_end":68,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2025},{"krate":0,"index":2026},{"krate":0,"index":2027}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/filter_map.rs","byte_start":207810,"byte_end":207819,"line_start":24,"line_end":24,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2068}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/filter_map.rs","byte_start":208116,"byte_end":208125,"line_start":37,"line_end":37,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2073},{"krate":0,"index":9266},{"krate":0,"index":9267},{"krate":0,"index":9268},{"krate":0,"index":9269}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/filter_map.rs","byte_start":208392,"byte_end":208401,"line_start":50,"line_end":50,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2079}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/filter_map.rs","byte_start":208668,"byte_end":208677,"line_start":61,"line_end":61,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2085},{"krate":0,"index":2086},{"krate":0,"index":2087}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/flatten.rs","byte_start":210779,"byte_end":210786,"line_start":21,"line_end":21,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2118},{"krate":0,"index":9319},{"krate":0,"index":9320},{"krate":0,"index":9321},{"krate":0,"index":9322}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/flatten.rs","byte_start":210955,"byte_end":210962,"line_start":29,"line_end":29,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2121}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/flatten.rs","byte_start":211154,"byte_end":211161,"line_start":39,"line_end":39,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2124},{"krate":0,"index":2125}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fold.rs","byte_start":212675,"byte_end":212679,"line_start":22,"line_end":22,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2161}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fold.rs","byte_start":213035,"byte_end":213039,"line_start":37,"line_end":37,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2167}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fold.rs","byte_start":213300,"byte_end":213304,"line_start":48,"line_end":48,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2173}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fold.rs","byte_start":213539,"byte_end":213543,"line_start":59,"line_end":59,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2179},{"krate":0,"index":2180}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/any.rs","byte_start":215132,"byte_end":215135,"line_start":22,"line_end":22,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2218}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/any.rs","byte_start":215465,"byte_end":215468,"line_start":36,"line_end":36,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2223}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/any.rs","byte_start":215721,"byte_end":215724,"line_start":47,"line_end":47,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2228}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/any.rs","byte_start":215953,"byte_end":215956,"line_start":58,"line_end":58,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2233},{"krate":0,"index":2234}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/all.rs","byte_start":217708,"byte_end":217711,"line_start":22,"line_end":22,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2272}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/all.rs","byte_start":218041,"byte_end":218044,"line_start":36,"line_end":36,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2277}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/all.rs","byte_start":218296,"byte_end":218299,"line_start":47,"line_end":47,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2282}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/all.rs","byte_start":218528,"byte_end":218531,"line_start":58,"line_end":58,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2287},{"krate":0,"index":2288}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/for_each.rs","byte_start":220285,"byte_end":220292,"line_start":21,"line_end":21,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2330}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/for_each.rs","byte_start":220585,"byte_end":220592,"line_start":34,"line_end":34,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2335}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/for_each.rs","byte_start":220823,"byte_end":220830,"line_start":45,"line_end":45,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2340}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/for_each.rs","byte_start":221069,"byte_end":221076,"line_start":56,"line_end":56,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2345},{"krate":0,"index":2346}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fuse.rs","byte_start":222177,"byte_end":222181,"line_start":20,"line_end":20,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2376},{"krate":0,"index":2377},{"krate":0,"index":9666},{"krate":0,"index":9667},{"krate":0,"index":9668},{"krate":0,"index":9669}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fuse.rs","byte_start":222678,"byte_end":222682,"line_start":37,"line_end":37,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2380}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fuse.rs","byte_start":222780,"byte_end":222784,"line_start":43,"line_end":43,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2383},{"krate":0,"index":2384},{"krate":0,"index":2385}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":223986,"byte_end":223998,"line_start":15,"line_end":15,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2418},{"krate":0,"index":2419},{"krate":0,"index":2420},{"krate":0,"index":2421},{"krate":0,"index":2422}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":226488,"byte_end":226500,"line_start":73,"line_end":73,"column_start":42,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2425}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":226620,"byte_end":226632,"line_start":79,"line_end":79,"column_start":37,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2428},{"krate":0,"index":2429}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/map.rs","byte_start":227517,"byte_end":227520,"line_start":22,"line_end":22,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2466}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/map.rs","byte_start":227709,"byte_end":227712,"line_start":31,"line_end":31,"column_start":13,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2470},{"krate":0,"index":9790},{"krate":0,"index":9791},{"krate":0,"index":9792},{"krate":0,"index":9793}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/map.rs","byte_start":227881,"byte_end":227884,"line_start":39,"line_end":39,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2474}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/map.rs","byte_start":228052,"byte_end":228055,"line_start":49,"line_end":49,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2478},{"krate":0,"index":2479},{"krate":0,"index":2481}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/next.rs","byte_start":229167,"byte_end":229171,"line_start":14,"line_end":14,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/next.rs","byte_start":229222,"byte_end":229226,"line_start":16,"line_end":16,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2518}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/next.rs","byte_start":229377,"byte_end":229381,"line_start":22,"line_end":22,"column_start":56,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2521}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/next.rs","byte_start":229520,"byte_end":229524,"line_start":28,"line_end":28,"column_start":46,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2524},{"krate":0,"index":2525}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/select_next_some.rs","byte_start":230175,"byte_end":230189,"line_start":16,"line_end":16,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2559}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/select_next_some.rs","byte_start":230340,"byte_end":230354,"line_start":22,"line_end":22,"column_start":56,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":2562}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/select_next_some.rs","byte_start":230498,"byte_end":230512,"line_start":28,"line_end":28,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2565},{"krate":0,"index":2566}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":231823,"byte_end":231831,"line_start":29,"line_end":29,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2619},{"krate":0,"index":9933},{"krate":0,"index":9934},{"krate":0,"index":9935},{"krate":0,"index":9936},{"krate":0,"index":2620},{"krate":0,"index":2621},{"krate":0,"index":2622},{"krate":0,"index":2623},{"krate":0,"index":2624},{"krate":0,"index":2626}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":237328,"byte_end":237336,"line_start":189,"line_end":189,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2631}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":237478,"byte_end":237486,"line_start":195,"line_end":195,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2634},{"krate":0,"index":2635},{"krate":0,"index":2636}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":238645,"byte_end":238649,"line_start":237,"line_end":237,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2639}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":238894,"byte_end":238898,"line_start":247,"line_end":247,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2642}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":239009,"byte_end":239013,"line_start":253,"line_end":253,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2646},{"krate":0,"index":2647}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":239710,"byte_end":239717,"line_start":279,"line_end":279,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2650}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":239965,"byte_end":239972,"line_start":289,"line_end":289,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2653}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":240083,"byte_end":240090,"line_start":295,"line_end":295,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2657},{"krate":0,"index":2658}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":240810,"byte_end":240816,"line_start":321,"line_end":321,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2662}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":241168,"byte_end":241174,"line_start":332,"line_end":332,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2668}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":241443,"byte_end":241449,"line_start":343,"line_end":343,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2673},{"krate":0,"index":2674}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":242710,"byte_end":242718,"line_start":381,"line_end":381,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2678}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":243038,"byte_end":243046,"line_start":394,"line_end":394,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2683}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":243230,"byte_end":243238,"line_start":405,"line_end":405,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2687},{"krate":0,"index":2688}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":243609,"byte_end":243619,"line_start":423,"line_end":423,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2698},{"krate":0,"index":2699}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/skip.rs","byte_start":244284,"byte_end":244288,"line_start":20,"line_end":20,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2742},{"krate":0,"index":10157},{"krate":0,"index":10158},{"krate":0,"index":10159},{"krate":0,"index":10160}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/skip.rs","byte_start":244479,"byte_end":244483,"line_start":28,"line_end":28,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2745}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/skip.rs","byte_start":244601,"byte_end":244605,"line_start":34,"line_end":34,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2748},{"krate":0,"index":2749},{"krate":0,"index":2750}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/skip_while.rs","byte_start":246202,"byte_end":246211,"line_start":25,"line_end":25,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2789}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/skip_while.rs","byte_start":246663,"byte_end":246672,"line_start":41,"line_end":41,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2794},{"krate":0,"index":10226},{"krate":0,"index":10227},{"krate":0,"index":10228},{"krate":0,"index":10229}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/skip_while.rs","byte_start":246998,"byte_end":247007,"line_start":54,"line_end":54,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2799}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/skip_while.rs","byte_start":247255,"byte_end":247264,"line_start":65,"line_end":65,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2804},{"krate":0,"index":2805},{"krate":0,"index":2806}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take.rs","byte_start":249564,"byte_end":249568,"line_start":21,"line_end":21,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2839},{"krate":0,"index":10270},{"krate":0,"index":10271},{"krate":0,"index":10272},{"krate":0,"index":10273}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take.rs","byte_start":249741,"byte_end":249745,"line_start":29,"line_end":29,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2842},{"krate":0,"index":2843},{"krate":0,"index":2844}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take.rs","byte_start":250717,"byte_end":250721,"line_start":68,"line_end":68,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2847}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_while.rs","byte_start":251744,"byte_end":251753,"line_start":25,"line_end":25,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2885}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_while.rs","byte_start":252201,"byte_end":252210,"line_start":41,"line_end":41,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2890},{"krate":0,"index":10339},{"krate":0,"index":10340},{"krate":0,"index":10341},{"krate":0,"index":10342}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_while.rs","byte_start":252529,"byte_end":252538,"line_start":54,"line_end":54,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2895},{"krate":0,"index":2896},{"krate":0,"index":2897}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_while.rs","byte_start":254057,"byte_end":254066,"line_start":104,"line_end":104,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2902}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":255450,"byte_end":255459,"line_start":30,"line_end":30,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2939}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":255747,"byte_end":255756,"line_start":41,"line_end":41,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2943},{"krate":0,"index":10396},{"krate":0,"index":10397},{"krate":0,"index":10398},{"krate":0,"index":10399},{"krate":0,"index":2944},{"krate":0,"index":2945},{"krate":0,"index":2946}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257873,"byte_end":257882,"line_start":111,"line_end":111,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2950},{"krate":0,"index":2951},{"krate":0,"index":2952}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":258914,"byte_end":258923,"line_start":150,"line_end":150,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2956}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/then.rs","byte_start":259865,"byte_end":259869,"line_start":23,"line_end":23,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2994}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/then.rs","byte_start":260120,"byte_end":260124,"line_start":33,"line_end":33,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2999},{"krate":0,"index":10457},{"krate":0,"index":10458},{"krate":0,"index":10459},{"krate":0,"index":10460}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/then.rs","byte_start":260370,"byte_end":260374,"line_start":45,"line_end":45,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3004}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/then.rs","byte_start":260600,"byte_end":260604,"line_start":56,"line_end":56,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3009},{"krate":0,"index":3010},{"krate":0,"index":3011}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":262486,"byte_end":262489,"line_start":22,"line_end":22,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3049},{"krate":0,"index":3050},{"krate":0,"index":3051},{"krate":0,"index":3052},{"krate":0,"index":3053}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":264075,"byte_end":264078,"line_start":61,"line_end":61,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3057}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":264273,"byte_end":264276,"line_start":71,"line_end":71,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3061},{"krate":0,"index":3062},{"krate":0,"index":3063}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/chunks.rs","byte_start":266971,"byte_end":266977,"line_start":24,"line_end":24,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3102},{"krate":0,"index":3103},{"krate":0,"index":10562},{"krate":0,"index":10563},{"krate":0,"index":10564},{"krate":0,"index":10565}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/chunks.rs","byte_start":267485,"byte_end":267491,"line_start":46,"line_end":46,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3106},{"krate":0,"index":3107},{"krate":0,"index":3108}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/chunks.rs","byte_start":269107,"byte_end":269113,"line_start":91,"line_end":91,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3111}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/ready_chunks.rs","byte_start":270085,"byte_end":270096,"line_start":23,"line_end":23,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3147},{"krate":0,"index":10610},{"krate":0,"index":10611},{"krate":0,"index":10612},{"krate":0,"index":10613}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/ready_chunks.rs","byte_start":270448,"byte_end":270459,"line_start":40,"line_end":40,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3150},{"krate":0,"index":3151},{"krate":0,"index":3152}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/ready_chunks.rs","byte_start":272628,"byte_end":272639,"line_start":99,"line_end":99,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3155}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/scan.rs","byte_start":273637,"byte_end":273641,"line_start":28,"line_end":28,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3199}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/scan.rs","byte_start":274127,"byte_end":274131,"line_start":45,"line_end":45,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3206}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/scan.rs","byte_start":274295,"byte_end":274299,"line_start":52,"line_end":52,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3213},{"krate":0,"index":10679},{"krate":0,"index":10680},{"krate":0,"index":10681},{"krate":0,"index":10682}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/scan.rs","byte_start":274661,"byte_end":274665,"line_start":65,"line_end":65,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3220},{"krate":0,"index":3221},{"krate":0,"index":3222}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/scan.rs","byte_start":275892,"byte_end":275896,"line_start":108,"line_end":108,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3229}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/buffer_unordered.rs","byte_start":277077,"byte_end":277092,"line_start":26,"line_end":26,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3272}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/buffer_unordered.rs","byte_start":277424,"byte_end":277439,"line_start":39,"line_end":39,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3275},{"krate":0,"index":10724},{"krate":0,"index":10725},{"krate":0,"index":10726},{"krate":0,"index":10727}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/buffer_unordered.rs","byte_start":277826,"byte_end":277841,"line_start":59,"line_end":59,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3278},{"krate":0,"index":3279},{"krate":0,"index":3280}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/buffer_unordered.rs","byte_start":279295,"byte_end":279310,"line_start":104,"line_end":104,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3283}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/buffered.rs","byte_start":280420,"byte_end":280428,"line_start":27,"line_end":27,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3325}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/buffered.rs","byte_start":280775,"byte_end":280783,"line_start":41,"line_end":41,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3328},{"krate":0,"index":10769},{"krate":0,"index":10770},{"krate":0,"index":10771},{"krate":0,"index":10772}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/buffered.rs","byte_start":281063,"byte_end":281071,"line_start":53,"line_end":53,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3331},{"krate":0,"index":3332},{"krate":0,"index":3333}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/for_each_concurrent.rs","byte_start":283408,"byte_end":283425,"line_start":23,"line_end":23,"column_start":33,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3378}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/for_each_concurrent.rs","byte_start":283771,"byte_end":283788,"line_start":37,"line_end":37,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3383}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/for_each_concurrent.rs","byte_start":284221,"byte_end":284238,"line_start":54,"line_end":54,"column_start":34,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3388}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/for_each_concurrent.rs","byte_start":284468,"byte_end":284485,"line_start":65,"line_end":65,"column_start":29,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3393},{"krate":0,"index":3394}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":145662,"byte_end":145663,"line_start":226,"line_end":226,"column_start":31,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/and_then.rs","byte_start":325319,"byte_end":325326,"line_start":23,"line_end":23,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3706}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/and_then.rs","byte_start":325619,"byte_end":325626,"line_start":36,"line_end":36,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3711},{"krate":0,"index":10891},{"krate":0,"index":10892},{"krate":0,"index":10893},{"krate":0,"index":10894}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/and_then.rs","byte_start":325907,"byte_end":325914,"line_start":49,"line_end":49,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3716},{"krate":0,"index":3717},{"krate":0,"index":3718}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/and_then.rs","byte_start":327057,"byte_end":327064,"line_start":85,"line_end":85,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3723}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/into_stream.rs","byte_start":327982,"byte_end":327992,"line_start":18,"line_end":18,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3753},{"krate":0,"index":11138},{"krate":0,"index":11139},{"krate":0,"index":11140},{"krate":0,"index":11141}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/into_stream.rs","byte_start":328185,"byte_end":328195,"line_start":27,"line_end":27,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":3756}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/into_stream.rs","byte_start":328316,"byte_end":328326,"line_start":33,"line_end":33,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3759},{"krate":0,"index":3760},{"krate":0,"index":3761}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/or_else.rs","byte_start":329425,"byte_end":329431,"line_start":23,"line_end":23,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3802}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/or_else.rs","byte_start":329723,"byte_end":329729,"line_start":36,"line_end":36,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3807},{"krate":0,"index":11337},{"krate":0,"index":11338},{"krate":0,"index":11339},{"krate":0,"index":11340}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/or_else.rs","byte_start":330007,"byte_end":330013,"line_start":49,"line_end":49,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3812},{"krate":0,"index":3813},{"krate":0,"index":3814}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/or_else.rs","byte_start":331290,"byte_end":331296,"line_start":89,"line_end":89,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3819}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_next.rs","byte_start":332200,"byte_end":332207,"line_start":14,"line_end":14,"column_start":36,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_next.rs","byte_start":332261,"byte_end":332268,"line_start":16,"line_end":16,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3856}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_next.rs","byte_start":332431,"byte_end":332438,"line_start":22,"line_end":22,"column_start":68,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":3859}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_next.rs","byte_start":332580,"byte_end":332587,"line_start":28,"line_end":28,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3862},{"krate":0,"index":3863}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_for_each.rs","byte_start":333363,"byte_end":333373,"line_start":21,"line_end":21,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3901}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_for_each.rs","byte_start":333669,"byte_end":333679,"line_start":34,"line_end":34,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3906}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_for_each.rs","byte_start":333924,"byte_end":333934,"line_start":45,"line_end":45,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3911},{"krate":0,"index":3912}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_filter.rs","byte_start":335333,"byte_end":335342,"line_start":27,"line_end":27,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3953}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_filter.rs","byte_start":335738,"byte_end":335747,"line_start":42,"line_end":42,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3958},{"krate":0,"index":11467},{"krate":0,"index":11468},{"krate":0,"index":11469},{"krate":0,"index":11470}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_filter.rs","byte_start":335990,"byte_end":335999,"line_start":53,"line_end":53,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3963}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_filter.rs","byte_start":336256,"byte_end":336265,"line_start":64,"line_end":64,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3968},{"krate":0,"index":3969},{"krate":0,"index":3970}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_filter_map.rs","byte_start":338406,"byte_end":338418,"line_start":24,"line_end":24,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4011}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_filter_map.rs","byte_start":338718,"byte_end":338730,"line_start":37,"line_end":37,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4016},{"krate":0,"index":11528},{"krate":0,"index":11529},{"krate":0,"index":11530},{"krate":0,"index":11531}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_filter_map.rs","byte_start":338927,"byte_end":338939,"line_start":45,"line_end":45,"column_start":37,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4022}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_filter_map.rs","byte_start":339217,"byte_end":339229,"line_start":56,"line_end":56,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4028},{"krate":0,"index":4029},{"krate":0,"index":4030}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_flatten.rs","byte_start":341413,"byte_end":341423,"line_start":24,"line_end":24,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4063},{"krate":0,"index":11572},{"krate":0,"index":11573},{"krate":0,"index":11574},{"krate":0,"index":11575}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_flatten.rs","byte_start":341688,"byte_end":341698,"line_start":37,"line_end":37,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4066}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_flatten.rs","byte_start":341944,"byte_end":341954,"line_start":48,"line_end":48,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4069},{"krate":0,"index":4070}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_collect.rs","byte_start":343563,"byte_end":343573,"line_start":20,"line_end":20,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4111}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_collect.rs","byte_start":343713,"byte_end":343723,"line_start":26,"line_end":26,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4115}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_collect.rs","byte_start":343911,"byte_end":343921,"line_start":36,"line_end":36,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4119},{"krate":0,"index":4120}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_concat.rs","byte_start":344919,"byte_end":344928,"line_start":19,"line_end":19,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":4149}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_concat.rs","byte_start":345147,"byte_end":345156,"line_start":29,"line_end":29,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4152},{"krate":0,"index":4153}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_chunks.rs","byte_start":346540,"byte_end":346549,"line_start":25,"line_end":25,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4206},{"krate":0,"index":4207},{"krate":0,"index":11709},{"krate":0,"index":11710},{"krate":0,"index":11711},{"krate":0,"index":11712}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_chunks.rs","byte_start":347044,"byte_end":347053,"line_start":44,"line_end":44,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4210},{"krate":0,"index":4211},{"krate":0,"index":4212}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_chunks.rs","byte_start":349001,"byte_end":349010,"line_start":95,"line_end":95,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4215}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_chunks.rs","byte_start":349669,"byte_end":349683,"line_start":118,"line_end":118,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":4219}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_chunks.rs","byte_start":349828,"byte_end":349842,"line_start":124,"line_end":124,"column_start":43,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":4223}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_fold.rs","byte_start":350653,"byte_end":350660,"line_start":22,"line_end":22,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4269}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_fold.rs","byte_start":351019,"byte_end":351026,"line_start":37,"line_end":37,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4275}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_fold.rs","byte_start":351306,"byte_end":351313,"line_start":48,"line_end":48,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4281}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_fold.rs","byte_start":351567,"byte_end":351574,"line_start":59,"line_end":59,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4287},{"krate":0,"index":4288}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":355437,"byte_end":355446,"line_start":78,"line_end":78,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4330}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":355708,"byte_end":355717,"line_start":88,"line_end":88,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4336},{"krate":0,"index":4337}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_skip_while.rs","byte_start":357463,"byte_end":357475,"line_start":26,"line_end":26,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4382}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_skip_while.rs","byte_start":357931,"byte_end":357943,"line_start":42,"line_end":42,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4387},{"krate":0,"index":11925},{"krate":0,"index":11926},{"krate":0,"index":11927},{"krate":0,"index":11928}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_skip_while.rs","byte_start":358283,"byte_end":358295,"line_start":55,"line_end":55,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4392},{"krate":0,"index":4393},{"krate":0,"index":4394}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_skip_while.rs","byte_start":359794,"byte_end":359806,"line_start":100,"line_end":100,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4399}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_take_while.rs","byte_start":361034,"byte_end":361046,"line_start":29,"line_end":29,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4440}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_take_while.rs","byte_start":361498,"byte_end":361510,"line_start":45,"line_end":45,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4445},{"krate":0,"index":11994},{"krate":0,"index":11995},{"krate":0,"index":11996},{"krate":0,"index":11997}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_take_while.rs","byte_start":361848,"byte_end":361860,"line_start":58,"line_end":58,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4450},{"krate":0,"index":4451},{"krate":0,"index":4452}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_take_while.rs","byte_start":363467,"byte_end":363479,"line_start":109,"line_end":109,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4457}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_buffer_unordered.rs","byte_start":364767,"byte_end":364785,"line_start":26,"line_end":26,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4507},{"krate":0,"index":12042},{"krate":0,"index":12043},{"krate":0,"index":12044},{"krate":0,"index":12045}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_buffer_unordered.rs","byte_start":365124,"byte_end":365142,"line_start":42,"line_end":42,"column_start":21,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4510},{"krate":0,"index":4511}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_buffered.rs","byte_start":367348,"byte_end":367359,"line_start":27,"line_end":27,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":4561},{"krate":0,"index":12090},{"krate":0,"index":12091},{"krate":0,"index":12092},{"krate":0,"index":12093}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_buffered.rs","byte_start":367696,"byte_end":367707,"line_start":43,"line_end":43,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4564},{"krate":0,"index":4565}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_for_each_concurrent.rs","byte_start":369865,"byte_end":369885,"line_start":25,"line_end":25,"column_start":33,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":4613}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_for_each_concurrent.rs","byte_start":370250,"byte_end":370270,"line_start":39,"line_end":39,"column_start":34,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":4618}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_for_each_concurrent.rs","byte_start":370509,"byte_end":370529,"line_start":50,"line_end":50,"column_start":18,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4623}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_for_each_concurrent.rs","byte_start":370977,"byte_end":370997,"line_start":67,"line_end":67,"column_start":29,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4628},{"krate":0,"index":4629}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":291602,"byte_end":291603,"line_start":154,"line_end":154,"column_start":46,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":373761,"byte_end":373765,"line_start":13,"line_end":13,"column_start":19,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":374387,"byte_end":374391,"line_start":36,"line_end":36,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":4793},{"krate":0,"index":4794},{"krate":0,"index":4795}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":375582,"byte_end":375588,"line_start":34,"line_end":34,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":375615,"byte_end":375621,"line_start":36,"line_end":36,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4830},{"krate":0,"index":4831},{"krate":0,"index":4832}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":375929,"byte_end":375935,"line_start":51,"line_end":51,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4835}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":376532,"byte_end":376542,"line_start":17,"line_end":17,"column_start":36,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":376586,"byte_end":376596,"line_start":19,"line_end":19,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4870},{"krate":0,"index":4871},{"krate":0,"index":4872}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":376910,"byte_end":376920,"line_start":31,"line_end":31,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":4876}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/empty.rs","byte_start":379440,"byte_end":379445,"line_start":21,"line_end":21,"column_start":19,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/empty.rs","byte_start":379477,"byte_end":379482,"line_start":23,"line_end":23,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4917}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/empty.rs","byte_start":379567,"byte_end":379572,"line_start":29,"line_end":29,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4920},{"krate":0,"index":4921},{"krate":0,"index":4922}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/empty.rs","byte_start":379821,"byte_end":379826,"line_start":41,"line_end":41,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":4925}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/once.rs","byte_start":380765,"byte_end":380769,"line_start":34,"line_end":34,"column_start":11,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4967}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/once.rs","byte_start":380898,"byte_end":380902,"line_start":40,"line_end":40,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4970},{"krate":0,"index":4971},{"krate":0,"index":4972}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/once.rs","byte_start":381507,"byte_end":381511,"line_start":63,"line_end":63,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4975}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/pending.rs","byte_start":382170,"byte_end":382177,"line_start":21,"line_end":21,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/pending.rs","byte_start":382209,"byte_end":382216,"line_start":23,"line_end":23,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":5013}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/pending.rs","byte_start":382301,"byte_end":382308,"line_start":29,"line_end":29,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5016},{"krate":0,"index":5017},{"krate":0,"index":5018}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/pending.rs","byte_start":382553,"byte_end":382560,"line_start":41,"line_end":41,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":5021}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":382947,"byte_end":382953,"line_start":15,"line_end":15,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":382984,"byte_end":382990,"line_start":17,"line_end":17,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5056}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":383755,"byte_end":383761,"line_start":48,"line_end":48,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":5063},{"krate":0,"index":5064}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":384457,"byte_end":384470,"line_start":18,"line_end":18,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":5092},{"krate":0,"index":5093},{"krate":0,"index":5094}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":385383,"byte_end":385396,"line_start":47,"line_end":47,"column_start":40,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":5097}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":388283,"byte_end":388289,"line_start":61,"line_end":61,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":5148},{"krate":0,"index":5149},{"krate":0,"index":5150},{"krate":0,"index":5151}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":389593,"byte_end":389599,"line_start":96,"line_end":96,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5155}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":389778,"byte_end":389784,"line_start":106,"line_end":106,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":5159},{"krate":0,"index":5160}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":390497,"byte_end":390505,"line_start":17,"line_end":17,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":5204}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":390802,"byte_end":390810,"line_start":31,"line_end":31,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":5206}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":393837,"byte_end":393855,"line_start":130,"line_end":130,"column_start":29,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":5217},{"krate":0,"index":5218},{"krate":0,"index":5219},{"krate":0,"index":5220}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":395304,"byte_end":395322,"line_start":165,"line_end":165,"column_start":45,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":5226}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":395602,"byte_end":395620,"line_start":176,"line_end":176,"column_start":40,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":5232},{"krate":0,"index":5233}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":396732,"byte_end":396750,"line_start":216,"line_end":216,"column_start":44,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":5242}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":399321,"byte_end":399327,"line_start":68,"line_end":68,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5298}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":399567,"byte_end":399573,"line_start":78,"line_end":78,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":5304}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":399853,"byte_end":399859,"line_start":92,"line_end":92,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":5310},{"krate":0,"index":5311}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":401407,"byte_end":401419,"line_start":26,"line_end":26,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5375}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":401524,"byte_end":401536,"line_start":32,"line_end":32,"column_start":16,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":401567,"byte_end":401579,"line_start":34,"line_end":34,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":5380}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":401702,"byte_end":401714,"line_start":40,"line_end":40,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":5383}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":401895,"byte_end":401907,"line_start":47,"line_end":47,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":5386},{"krate":0,"index":5387}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":404489,"byte_end":404503,"line_start":102,"line_end":102,"column_start":27,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":404529,"byte_end":404543,"line_start":104,"line_end":104,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":5399},{"krate":0,"index":5400},{"krate":0,"index":5401},{"krate":0,"index":5402}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":406109,"byte_end":406123,"line_start":145,"line_end":145,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":5405}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":406216,"byte_end":406230,"line_start":151,"line_end":151,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5408},{"krate":0,"index":5409},{"krate":0,"index":5410}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":407392,"byte_end":407406,"line_start":186,"line_end":186,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5413}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":407572,"byte_end":407586,"line_start":192,"line_end":192,"column_start":41,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":5416}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":407866,"byte_end":407880,"line_start":205,"line_end":205,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":5421}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":408050,"byte_end":408064,"line_start":211,"line_end":211,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":5424}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/abort.rs","byte_start":435846,"byte_end":435857,"line_start":4,"line_end":4,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5529}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":437216,"byte_end":437224,"line_start":39,"line_end":39,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5548},{"krate":0,"index":5549},{"krate":0,"index":5550}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":438298,"byte_end":438306,"line_start":71,"line_end":71,"column_start":40,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":438343,"byte_end":438353,"line_start":73,"line_end":73,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5556},{"krate":0,"index":5557},{"krate":0,"index":5558}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":439205,"byte_end":439215,"line_start":100,"line_end":100,"column_start":33,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":439263,"byte_end":439270,"line_start":102,"line_end":102,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":5564},{"krate":0,"index":5565},{"krate":0,"index":5566}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":439533,"byte_end":439540,"line_start":114,"line_end":114,"column_start":40,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":439581,"byte_end":439591,"line_start":116,"line_end":116,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5572},{"krate":0,"index":5573},{"krate":0,"index":5574}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":440460,"byte_end":440470,"line_start":143,"line_end":143,"column_start":33,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":440518,"byte_end":440522,"line_start":145,"line_end":145,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5580},{"krate":0,"index":5581},{"krate":0,"index":5582}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":440781,"byte_end":440785,"line_start":157,"line_end":157,"column_start":40,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":440954,"byte_end":440964,"line_start":161,"line_end":161,"column_start":33,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":441009,"byte_end":441019,"line_start":162,"line_end":162,"column_start":33,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":441065,"byte_end":441075,"line_start":164,"line_end":164,"column_start":33,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":441120,"byte_end":441130,"line_start":165,"line_end":165,"column_start":33,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":441184,"byte_end":441192,"line_start":167,"line_end":167,"column_start":41,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":441241,"byte_end":441249,"line_start":168,"line_end":168,"column_start":41,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/task.rs","byte_start":442734,"byte_end":442738,"line_start":41,"line_end":41,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/task.rs","byte_start":442773,"byte_end":442777,"line_start":42,"line_end":42,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/task.rs","byte_start":442809,"byte_end":442813,"line_start":44,"line_end":44,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5669}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/task.rs","byte_start":443890,"byte_end":443894,"line_start":71,"line_end":71,"column_start":11,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":5672},{"krate":0,"index":5673}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/task.rs","byte_start":444894,"byte_end":444898,"line_start":102,"line_end":102,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":5676}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/ready_to_run_queue.rs","byte_start":446348,"byte_end":446363,"line_start":29,"line_end":29,"column_start":11,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":5732},{"krate":0,"index":5733},{"krate":0,"index":5734},{"krate":0,"index":5735}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/ready_to_run_queue.rs","byte_start":449019,"byte_end":449034,"line_start":111,"line_end":111,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5738}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":411854,"byte_end":411870,"line_start":88,"line_end":88,"column_start":33,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":411911,"byte_end":411927,"line_start":89,"line_end":89,"column_start":33,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":411956,"byte_end":411972,"line_start":90,"line_end":90,"column_start":21,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":411997,"byte_end":412013,"line_start":92,"line_end":92,"column_start":16,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":5759}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":412198,"byte_end":412214,"line_start":99,"line_end":99,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":5761}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":413921,"byte_end":413937,"line_start":131,"line_end":131,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5764}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":414011,"byte_end":414027,"line_start":137,"line_end":137,"column_start":11,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5767},{"krate":0,"index":5768},{"krate":0,"index":5769},{"krate":0,"index":5770},{"krate":0,"index":5771},{"krate":0,"index":5772},{"krate":0,"index":5773},{"krate":0,"index":5774},{"krate":0,"index":5775},{"krate":0,"index":5776},{"krate":0,"index":5777},{"krate":0,"index":5778},{"krate":0,"index":5779}],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":425558,"byte_end":425574,"line_start":410,"line_end":410,"column_start":30,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":5782},{"krate":0,"index":5783},{"krate":0,"index":5792}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":429996,"byte_end":430000,"line_start":508,"line_end":508,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":5791}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":432255,"byte_end":432271,"line_start":565,"line_end":565,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":5795}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":432409,"byte_end":432425,"line_start":571,"line_end":571,"column_start":11,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5798},{"krate":0,"index":5799}],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":432996,"byte_end":433012,"line_start":591,"line_end":591,"column_start":20,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":5802}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":434662,"byte_end":434678,"line_start":632,"line_end":632,"column_start":35,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":5817},{"krate":0,"index":5818},{"krate":0,"index":5819}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":435148,"byte_end":435164,"line_start":646,"line_end":646,"column_start":33,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":5822}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":435440,"byte_end":435456,"line_start":659,"line_end":659,"column_start":35,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":5827}],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":435578,"byte_end":435594,"line_start":665,"line_end":665,"column_start":27,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5830}],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":450629,"byte_end":450638,"line_start":36,"line_end":36,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":5887}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":450783,"byte_end":450792,"line_start":42,"line_end":42,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5890},{"krate":0,"index":5891},{"krate":0,"index":5892},{"krate":0,"index":5893},{"krate":0,"index":5894},{"krate":0,"index":5895},{"krate":0,"index":5896}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":452265,"byte_end":452274,"line_start":89,"line_end":89,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":5899}],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":452373,"byte_end":452382,"line_start":95,"line_end":95,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":5902},{"krate":0,"index":5903}],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":453166,"byte_end":453175,"line_start":117,"line_end":117,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":5906}],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":454193,"byte_end":454202,"line_start":149,"line_end":149,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":5911}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":454347,"byte_end":454356,"line_start":155,"line_end":155,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":5915}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":454539,"byte_end":454548,"line_start":163,"line_end":163,"column_start":43,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":5919},{"krate":0,"index":5920},{"krate":0,"index":5921}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":455631,"byte_end":455635,"line_start":202,"line_end":202,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":5937},{"krate":0,"index":5938},{"krate":0,"index":5939}],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":456068,"byte_end":456072,"line_start":218,"line_end":218,"column_start":48,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":456127,"byte_end":456134,"line_start":220,"line_end":220,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":5945},{"krate":0,"index":5946},{"krate":0,"index":5947}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":456571,"byte_end":456578,"line_start":236,"line_end":236,"column_start":48,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":456629,"byte_end":456637,"line_start":238,"line_end":238,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":5952},{"krate":0,"index":5953},{"krate":0,"index":5954}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":457065,"byte_end":457073,"line_start":254,"line_end":254,"column_start":48,"column_end":56},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":459321,"byte_end":459323,"line_start":16,"line_end":16,"column_start":31,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":459378,"byte_end":459380,"line_start":17,"line_end":17,"column_start":36,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467006,"byte_end":467015,"line_start":22,"line_end":22,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":6152},{"krate":0,"index":6153}],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":469288,"byte_end":469299,"line_start":87,"line_end":87,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":6155}],"docs":"","sig":null,"attributes":[]},{"id":379,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":470082,"byte_end":470089,"line_start":112,"line_end":112,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":6157}],"docs":"","sig":null,"attributes":[]},{"id":380,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":470292,"byte_end":470301,"line_start":121,"line_end":121,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":6160}],"docs":"","sig":null,"attributes":[]},{"id":381,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":471290,"byte_end":471299,"line_start":152,"line_end":152,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":6165},{"krate":0,"index":6166}],"docs":"","sig":null,"attributes":[]},{"id":382,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":471538,"byte_end":471547,"line_start":163,"line_end":163,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":6170},{"krate":0,"index":6171}],"docs":"","sig":null,"attributes":[]},{"id":383,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":471806,"byte_end":471817,"line_start":174,"line_end":174,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":6174}],"docs":"","sig":null,"attributes":[]},{"id":384,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":472489,"byte_end":472490,"line_start":9,"line_end":9,"column_start":30,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":6194},{"krate":0,"index":6195}],"docs":"","sig":null,"attributes":[]},{"id":385,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":472725,"byte_end":472726,"line_start":23,"line_end":23,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":6203}],"docs":"","sig":null,"attributes":[]},{"id":386,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":472996,"byte_end":472997,"line_start":38,"line_end":38,"column_start":26,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":6211}],"docs":"","sig":null,"attributes":[]},{"id":387,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":474013,"byte_end":474017,"line_start":76,"line_end":76,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":6219}],"docs":"","sig":null,"attributes":[]},{"id":388,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":474111,"byte_end":474115,"line_start":82,"line_end":82,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":6223},{"krate":0,"index":6224}],"docs":"","sig":null,"attributes":[]},{"id":394,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":474374,"byte_end":474381,"line_start":94,"line_end":94,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":6229},{"krate":0,"index":6230}],"docs":"","sig":null,"attributes":[]},{"id":395,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":474604,"byte_end":474611,"line_start":104,"line_end":104,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":6235}],"docs":"","sig":null,"attributes":[]},{"id":396,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":474802,"byte_end":474809,"line_start":113,"line_end":113,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":6240}],"docs":"","sig":null,"attributes":[]},{"id":397,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":475114,"byte_end":475127,"line_start":129,"line_end":129,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":6246},{"krate":0,"index":6247}],"docs":"","sig":null,"attributes":[]},{"id":403,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":475544,"byte_end":475553,"line_start":144,"line_end":144,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":6252},{"krate":0,"index":6253}],"docs":"","sig":null,"attributes":[]},{"id":404,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":475837,"byte_end":475846,"line_start":155,"line_end":155,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":6258}],"docs":"","sig":null,"attributes":[]},{"id":405,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":476108,"byte_end":476117,"line_start":165,"line_end":165,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":6263}],"docs":"","sig":null,"attributes":[]},{"id":406,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":476439,"byte_end":476446,"line_start":181,"line_end":181,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":6270},{"krate":0,"index":6271}],"docs":"","sig":null,"attributes":[]},{"id":407,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":476665,"byte_end":476672,"line_start":190,"line_end":190,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":6277}],"docs":"","sig":null,"attributes":[]},{"id":408,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":476850,"byte_end":476857,"line_start":198,"line_end":198,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":6283}],"docs":"","sig":null,"attributes":[]},{"id":409,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":477158,"byte_end":477166,"line_start":213,"line_end":213,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":6291},{"krate":0,"index":6292}],"docs":"","sig":null,"attributes":[]},{"id":410,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":477389,"byte_end":477397,"line_start":222,"line_end":222,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":6298}],"docs":"","sig":null,"attributes":[]},{"id":411,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":477579,"byte_end":477587,"line_start":230,"line_end":230,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":6304}],"docs":"","sig":null,"attributes":[]},{"id":412,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":477897,"byte_end":477908,"line_start":245,"line_end":245,"column_start":49,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":6313},{"krate":0,"index":6314}],"docs":"","sig":null,"attributes":[]},{"id":413,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":478168,"byte_end":478179,"line_start":256,"line_end":256,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":6320}],"docs":"","sig":null,"attributes":[]},{"id":414,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":478416,"byte_end":478427,"line_start":266,"line_end":266,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":6326}],"docs":"","sig":null,"attributes":[]},{"id":415,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":478794,"byte_end":478806,"line_start":283,"line_end":283,"column_start":49,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":6334},{"krate":0,"index":6335}],"docs":"","sig":null,"attributes":[]},{"id":416,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":479067,"byte_end":479079,"line_start":294,"line_end":294,"column_start":48,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":6341}],"docs":"","sig":null,"attributes":[]},{"id":417,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":479317,"byte_end":479329,"line_start":304,"line_end":304,"column_start":45,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":6347}],"docs":"","sig":null,"attributes":[]},{"id":418,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":479948,"byte_end":479962,"line_start":326,"line_end":326,"column_start":41,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":6360},{"krate":0,"index":6361}],"docs":"","sig":null,"attributes":[]},{"id":419,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":480185,"byte_end":480199,"line_start":335,"line_end":335,"column_start":40,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":6367}],"docs":"","sig":null,"attributes":[]},{"id":420,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":480400,"byte_end":480414,"line_start":343,"line_end":343,"column_start":37,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":6373}],"docs":"","sig":null,"attributes":[]},{"id":421,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":480720,"byte_end":480726,"line_start":357,"line_end":357,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":6383}],"docs":"","sig":null,"attributes":[]},{"id":422,"kind":"Direct","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":480819,"byte_end":480825,"line_start":362,"line_end":362,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":6387},{"krate":0,"index":6388}],"docs":"","sig":null,"attributes":[]},{"id":428,"kind":"Inherent","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/unfold_state.rs","byte_start":481430,"byte_end":481441,"line_start":22,"line_end":22,"column_start":12,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":6399},{"krate":0,"index":6400}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":10623,"byte_end":10629,"line_start":294,"line_end":294,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":15}},{"kind":"Mod","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":10727,"byte_end":10733,"line_start":298,"line_end":298,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1578}},{"kind":"Mod","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":137865,"byte_end":137882,"line_start":112,"line_end":112,"column_start":9,"column_end":26},"ref_id":{"krate":0,"index":5429}},{"kind":"Mod","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/mod.rs","byte_start":138081,"byte_end":138091,"line_start":120,"line_end":120,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":5835}},{"kind":"Mod","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":11000,"byte_end":11004,"line_start":309,"line_end":309,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":6012}},{"kind":"Mod","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":11015,"byte_end":11020,"line_start":311,"line_end":311,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":6111}},{"kind":"Mod","span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/lib.rs","byte_start":11462,"byte_end":11466,"line_start":330,"line_end":330,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":6113}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/flatten.rs","byte_start":35483,"byte_end":35490,"line_start":20,"line_end":20,"column_start":18,"column_end":25},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":6405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/flatten.rs","byte_start":35620,"byte_end":35627,"line_start":26,"line_end":26,"column_start":27,"column_end":34},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":6405},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/flatten.rs","byte_start":35852,"byte_end":35859,"line_start":39,"line_end":39,"column_start":22,"column_end":29},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":6405},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/flatten.rs","byte_start":36633,"byte_end":36640,"line_start":64,"line_end":64,"column_start":27,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":6405},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/flatten.rs","byte_start":36865,"byte_end":36872,"line_start":77,"line_end":77,"column_start":22,"column_end":29},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":6405},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":39886,"byte_end":39890,"line_start":17,"line_end":17,"column_start":11,"column_end":15},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":6453},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":39997,"byte_end":40001,"line_start":23,"line_end":23,"column_start":19,"column_end":23},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":6453},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":41730,"byte_end":41734,"line_start":74,"line_end":74,"column_start":35,"column_end":39},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":6453},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/fuse.rs","byte_start":41847,"byte_end":41851,"line_start":80,"line_end":80,"column_start":30,"column_end":34},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":6453},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/map.rs","byte_start":42829,"byte_end":42832,"line_start":25,"line_end":25,"column_start":14,"column_end":17},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":6488},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/map.rs","byte_start":43001,"byte_end":43004,"line_start":32,"line_end":32,"column_start":33,"column_end":36},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":6488},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/map.rs","byte_start":43266,"byte_end":43269,"line_start":45,"line_end":45,"column_start":28,"column_end":31},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":6488},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":18634,"byte_end":18635,"line_start":119,"line_end":119,"column_start":31,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":238},"to":{"krate":0,"index":239}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/future/mod.rs","byte_start":18766,"byte_end":18772,"line_start":123,"line_end":123,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":12613},"to":{"krate":0,"index":239}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/into_future.rs","byte_start":66076,"byte_end":66086,"line_start":16,"line_end":16,"column_start":11,"column_end":21},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":7041},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/into_future.rs","byte_start":66237,"byte_end":66247,"line_start":23,"line_end":23,"column_start":52,"column_end":62},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":7041},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/into_future.rs","byte_start":66370,"byte_end":66380,"line_start":29,"line_end":29,"column_start":33,"column_end":43},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":7041},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten.rs","byte_start":67089,"byte_end":67099,"line_start":20,"line_end":20,"column_start":18,"column_end":28},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":7076},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten.rs","byte_start":67229,"byte_end":67239,"line_start":26,"line_end":26,"column_start":27,"column_end":37},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":7076},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten.rs","byte_start":67482,"byte_end":67492,"line_start":39,"line_end":39,"column_start":22,"column_end":32},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":7076},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten.rs","byte_start":68445,"byte_end":68455,"line_start":67,"line_end":67,"column_start":27,"column_end":37},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":7076},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten.rs","byte_start":68698,"byte_end":68708,"line_start":80,"line_end":80,"column_start":22,"column_end":32},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":7076},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten_err.rs","byte_start":72032,"byte_end":72045,"line_start":17,"line_end":17,"column_start":18,"column_end":31},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":7123},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten_err.rs","byte_start":72175,"byte_end":72188,"line_start":23,"line_end":23,"column_start":27,"column_end":40},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":7123},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/try_flatten_err.rs","byte_start":72431,"byte_end":72444,"line_start":36,"line_end":36,"column_start":22,"column_end":35},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":7123},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":48622,"byte_end":48625,"line_start":134,"line_end":134,"column_start":48,"column_end":51},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":505},"to":{"krate":0,"index":506}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_future/mod.rs","byte_start":48708,"byte_end":48717,"line_start":137,"line_end":137,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":5,"index":44},"to":{"krate":0,"index":506}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":73753,"byte_end":73757,"line_start":14,"line_end":14,"column_start":19,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":7986},"to":{"krate":1,"index":3045}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":74353,"byte_end":74357,"line_start":42,"line_end":42,"column_start":28,"column_end":32},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":7986},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/lazy.rs","byte_start":74501,"byte_end":74505,"line_start":51,"line_end":51,"column_start":23,"column_end":27},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":7986},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75108,"byte_end":75115,"line_start":14,"line_end":14,"column_start":25,"column_end":32},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":7992},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75676,"byte_end":75683,"line_start":40,"line_end":40,"column_start":20,"column_end":27},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":7992},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75828,"byte_end":75835,"line_start":48,"line_end":48,"column_start":19,"column_end":26},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":7992},"to":{"krate":1,"index":3045}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/pending.rs","byte_start":75861,"byte_end":75868,"line_start":50,"line_end":50,"column_start":19,"column_end":26},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":7992},"to":{"krate":1,"index":2625}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":76622,"byte_end":76631,"line_start":24,"line_end":24,"column_start":37,"column_end":46},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":7998},"to":{"krate":1,"index":3045}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":77234,"byte_end":77243,"line_start":47,"line_end":47,"column_start":19,"column_end":28},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":7998},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":78341,"byte_end":78350,"line_start":79,"line_end":79,"column_start":35,"column_end":44},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":7998},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/maybe_done.rs","byte_start":78551,"byte_end":78560,"line_start":88,"line_end":88,"column_start":30,"column_end":39},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":7998},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":79880,"byte_end":79892,"line_start":25,"line_end":25,"column_start":40,"column_end":52},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":8011},"to":{"krate":1,"index":3045}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":80118,"byte_end":80130,"line_start":32,"line_end":32,"column_start":22,"column_end":34},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":8011},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":81243,"byte_end":81255,"line_start":64,"line_end":64,"column_start":38,"column_end":50},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":8011},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_maybe_done.rs","byte_start":81459,"byte_end":81471,"line_start":73,"line_end":73,"column_start":33,"column_end":45},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":8011},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/option.rs","byte_start":83121,"byte_end":83133,"line_start":34,"line_end":34,"column_start":21,"column_end":33},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":8029},"to":{"krate":1,"index":2982}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/option.rs","byte_start":83231,"byte_end":83243,"line_start":40,"line_end":40,"column_start":28,"column_end":40},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":8029},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/option.rs","byte_start":83557,"byte_end":83569,"line_start":51,"line_end":51,"column_start":38,"column_end":50},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":8029},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/option.rs","byte_start":83756,"byte_end":83768,"line_start":60,"line_end":60,"column_start":29,"column_end":41},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":8029},"to":{"krate":1,"index":2910}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84206,"byte_end":84212,"line_start":15,"line_end":15,"column_start":19,"column_end":25},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":825},"to":{"krate":1,"index":3045}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":84906,"byte_end":84912,"line_start":43,"line_end":43,"column_start":24,"column_end":30},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":825},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_fn.rs","byte_start":85054,"byte_end":85060,"line_start":49,"line_end":49,"column_start":23,"column_end":29},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":825},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":85788,"byte_end":85801,"line_start":19,"line_end":19,"column_start":23,"column_end":36},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":8068},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":86367,"byte_end":86380,"line_start":40,"line_end":40,"column_start":33,"column_end":46},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":8068},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/poll_immediate.rs","byte_start":87400,"byte_end":87413,"line_start":70,"line_end":70,"column_start":23,"column_end":36},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":8068},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":89585,"byte_end":89590,"line_start":11,"line_end":11,"column_start":9,"column_end":14},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":8102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":89769,"byte_end":89774,"line_start":19,"line_end":19,"column_start":19,"column_end":24},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":8102},"to":{"krate":1,"index":3045}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":89806,"byte_end":89811,"line_start":21,"line_end":21,"column_start":25,"column_end":30},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":8102},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/ready.rs","byte_start":89908,"byte_end":89913,"line_start":27,"line_end":27,"column_start":20,"column_end":25},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":8102},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":97900,"byte_end":97907,"line_start":50,"line_end":50,"column_start":24,"column_end":31},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1080},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":100668,"byte_end":100675,"line_start":131,"line_end":131,"column_start":20,"column_end":27},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1080},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/join_all.rs","byte_start":101663,"byte_end":101670,"line_start":163,"line_end":163,"column_start":37,"column_end":44},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1080},"to":{"krate":1,"index":7416}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":102166,"byte_end":102172,"line_start":14,"line_end":14,"column_start":36,"column_end":42},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":8456},"to":{"krate":1,"index":3045}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":104608,"byte_end":104614,"line_start":94,"line_end":94,"column_start":23,"column_end":29},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":8456},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select.rs","byte_start":105318,"byte_end":105324,"line_start":116,"line_end":116,"column_start":28,"column_end":34},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":8456},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":105887,"byte_end":105896,"line_start":17,"line_end":17,"column_start":28,"column_end":37},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":8464},"to":{"krate":1,"index":3045}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":106903,"byte_end":106912,"line_start":44,"line_end":44,"column_start":11,"column_end":20},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":8464},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":107095,"byte_end":107104,"line_start":51,"line_end":51,"column_start":38,"column_end":47},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":8464},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_all.rs","byte_start":107774,"byte_end":107783,"line_start":70,"line_end":70,"column_start":49,"column_end":58},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":8464},"to":{"krate":1,"index":7416}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":116391,"byte_end":116401,"line_start":37,"line_end":37,"column_start":24,"column_end":34},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1343},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":118231,"byte_end":118241,"line_start":97,"line_end":97,"column_start":20,"column_end":30},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1343},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_join_all.rs","byte_start":119389,"byte_end":119399,"line_start":133,"line_end":133,"column_start":40,"column_end":50},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1343},"to":{"krate":1,"index":7416}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":119881,"byte_end":119890,"line_start":13,"line_end":13,"column_start":36,"column_end":45},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":8792},"to":{"krate":1,"index":3045}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/try_select.rs","byte_start":121729,"byte_end":121738,"line_start":61,"line_end":61,"column_start":37,"column_end":46},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":8792},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":123100,"byte_end":123108,"line_start":17,"line_end":17,"column_start":28,"column_end":36},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":8800},"to":{"krate":1,"index":3045}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":124186,"byte_end":124194,"line_start":45,"line_end":45,"column_start":41,"column_end":49},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":8800},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/select_ok.rs","byte_start":125625,"byte_end":125633,"line_start":81,"line_end":81,"column_start":52,"column_end":60},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":8800},"to":{"krate":1,"index":7416}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126612,"byte_end":126618,"line_start":35,"line_end":35,"column_start":12,"column_end":18},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":8806},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":126957,"byte_end":126963,"line_start":46,"line_end":46,"column_start":15,"column_end":21},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":8806},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":127348,"byte_end":127354,"line_start":58,"line_end":58,"column_start":15,"column_end":21},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":8806},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":127735,"byte_end":127741,"line_start":70,"line_end":70,"column_start":9,"column_end":15},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":8806},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":127982,"byte_end":127988,"line_start":80,"line_end":80,"column_start":23,"column_end":29},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":8806},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":128327,"byte_end":128333,"line_start":95,"line_end":95,"column_start":28,"column_end":34},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":8806},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":128609,"byte_end":128615,"line_start":108,"line_end":108,"column_start":23,"column_end":29},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":8806},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/future/either.rs","byte_start":129150,"byte_end":129156,"line_start":130,"line_end":130,"column_start":28,"column_end":34},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":8806},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/chain.rs","byte_start":192752,"byte_end":192757,"line_start":20,"line_end":20,"column_start":16,"column_end":21},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":8830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/chain.rs","byte_start":192983,"byte_end":192988,"line_start":30,"line_end":30,"column_start":32,"column_end":37},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":8830},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/chain.rs","byte_start":193197,"byte_end":193202,"line_start":40,"line_end":40,"column_start":27,"column_end":32},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":8830},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/collect.rs","byte_start":194798,"byte_end":194805,"line_start":20,"line_end":20,"column_start":30,"column_end":37},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":8879},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/collect.rs","byte_start":195070,"byte_end":195077,"line_start":30,"line_end":30,"column_start":29,"column_end":36},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":8879},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/collect.rs","byte_start":195255,"byte_end":195262,"line_start":40,"line_end":40,"column_start":24,"column_end":31},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":8879},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/unzip.rs","byte_start":196288,"byte_end":196293,"line_start":21,"line_end":21,"column_start":50,"column_end":55},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":8930},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/unzip.rs","byte_start":196687,"byte_end":196692,"line_start":32,"line_end":32,"column_start":46,"column_end":51},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":8930},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/unzip.rs","byte_start":196942,"byte_end":196947,"line_start":43,"line_end":43,"column_start":41,"column_end":46},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":8930},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/concat.rs","byte_start":198072,"byte_end":198078,"line_start":19,"line_end":19,"column_start":10,"column_end":16},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":8988},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/concat.rs","byte_start":198298,"byte_end":198304,"line_start":29,"line_end":29,"column_start":21,"column_end":27},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":8988},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/concat.rs","byte_start":199012,"byte_end":199018,"line_start":54,"line_end":54,"column_start":26,"column_end":32},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":8988},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/count.rs","byte_start":199744,"byte_end":199749,"line_start":19,"line_end":19,"column_start":25,"column_end":30},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":9023},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/count.rs","byte_start":199970,"byte_end":199975,"line_start":28,"line_end":28,"column_start":18,"column_end":23},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":9023},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/count.rs","byte_start":200107,"byte_end":200112,"line_start":34,"line_end":34,"column_start":39,"column_end":44},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":9023},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/count.rs","byte_start":200230,"byte_end":200235,"line_start":40,"line_end":40,"column_start":29,"column_end":34},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":9023},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/cycle.rs","byte_start":201041,"byte_end":201046,"line_start":19,"line_end":19,"column_start":10,"column_end":15},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":9065},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/cycle.rs","byte_start":201202,"byte_end":201207,"line_start":28,"line_end":28,"column_start":21,"column_end":26},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":9065},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/cycle.rs","byte_start":201956,"byte_end":201961,"line_start":56,"line_end":56,"column_start":26,"column_end":31},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":9065},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/enumerate.rs","byte_start":202709,"byte_end":202718,"line_start":20,"line_end":20,"column_start":18,"column_end":27},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":9105},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/enumerate.rs","byte_start":202904,"byte_end":202913,"line_start":28,"line_end":28,"column_start":48,"column_end":57},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":9105},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/enumerate.rs","byte_start":203031,"byte_end":203040,"line_start":34,"line_end":34,"column_start":29,"column_end":38},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":9105},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/filter.rs","byte_start":204481,"byte_end":204487,"line_start":27,"line_end":27,"column_start":33,"column_end":39},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":9144},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/filter.rs","byte_start":204960,"byte_end":204966,"line_start":43,"line_end":43,"column_start":18,"column_end":24},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":9144},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/filter.rs","byte_start":205289,"byte_end":205295,"line_start":56,"line_end":56,"column_start":34,"column_end":40},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":9144},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/filter.rs","byte_start":205632,"byte_end":205638,"line_start":68,"line_end":68,"column_start":29,"column_end":35},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":9144},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/filter_map.rs","byte_start":207810,"byte_end":207819,"line_start":24,"line_end":24,"column_start":33,"column_end":42},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":9209},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/filter_map.rs","byte_start":208116,"byte_end":208125,"line_start":37,"line_end":37,"column_start":18,"column_end":27},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":9209},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/filter_map.rs","byte_start":208392,"byte_end":208401,"line_start":50,"line_end":50,"column_start":37,"column_end":46},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":9209},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/filter_map.rs","byte_start":208668,"byte_end":208677,"line_start":61,"line_end":61,"column_start":32,"column_end":41},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":9209},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/flatten.rs","byte_start":210779,"byte_end":210786,"line_start":21,"line_end":21,"column_start":13,"column_end":20},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":9277},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/flatten.rs","byte_start":210955,"byte_end":210962,"line_start":29,"line_end":29,"column_start":26,"column_end":33},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":9277},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/flatten.rs","byte_start":211154,"byte_end":211161,"line_start":39,"line_end":39,"column_start":21,"column_end":28},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":9277},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fold.rs","byte_start":212675,"byte_end":212679,"line_start":22,"line_end":22,"column_start":36,"column_end":40},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":9378},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fold.rs","byte_start":213035,"byte_end":213039,"line_start":37,"line_end":37,"column_start":21,"column_end":25},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":9378},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fold.rs","byte_start":213300,"byte_end":213304,"line_start":48,"line_end":48,"column_start":37,"column_end":41},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":9378},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fold.rs","byte_start":213539,"byte_end":213543,"line_start":59,"line_end":59,"column_start":32,"column_end":36},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":9378},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/any.rs","byte_start":215132,"byte_end":215135,"line_start":22,"line_end":22,"column_start":33,"column_end":36},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":9447},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/any.rs","byte_start":215465,"byte_end":215468,"line_start":36,"line_end":36,"column_start":18,"column_end":21},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":9447},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/any.rs","byte_start":215721,"byte_end":215724,"line_start":47,"line_end":47,"column_start":34,"column_end":37},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":9447},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/any.rs","byte_start":215953,"byte_end":215956,"line_start":58,"line_end":58,"column_start":29,"column_end":32},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":9447},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/all.rs","byte_start":217708,"byte_end":217711,"line_start":22,"line_end":22,"column_start":33,"column_end":36},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":9508},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/all.rs","byte_start":218041,"byte_end":218044,"line_start":36,"line_end":36,"column_start":18,"column_end":21},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":9508},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/all.rs","byte_start":218296,"byte_end":218299,"line_start":47,"line_end":47,"column_start":34,"column_end":37},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":9508},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/all.rs","byte_start":218528,"byte_end":218531,"line_start":58,"line_end":58,"column_start":29,"column_end":32},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":9508},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/for_each.rs","byte_start":220285,"byte_end":220292,"line_start":21,"line_end":21,"column_start":33,"column_end":40},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":9569},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/for_each.rs","byte_start":220585,"byte_end":220592,"line_start":34,"line_end":34,"column_start":18,"column_end":25},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":9569},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/for_each.rs","byte_start":220823,"byte_end":220830,"line_start":45,"line_end":45,"column_start":34,"column_end":41},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":9569},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/for_each.rs","byte_start":221069,"byte_end":221076,"line_start":56,"line_end":56,"column_start":29,"column_end":36},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":9569},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fuse.rs","byte_start":222177,"byte_end":222181,"line_start":20,"line_end":20,"column_start":10,"column_end":14},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":9631},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fuse.rs","byte_start":222678,"byte_end":222682,"line_start":37,"line_end":37,"column_start":33,"column_end":37},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":9631},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/fuse.rs","byte_start":222780,"byte_end":222784,"line_start":43,"line_end":43,"column_start":28,"column_end":32},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":9631},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":223986,"byte_end":223998,"line_start":15,"line_end":15,"column_start":26,"column_end":38},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":9670},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":226488,"byte_end":226500,"line_start":73,"line_end":73,"column_start":42,"column_end":54},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":9670},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/into_future.rs","byte_start":226620,"byte_end":226632,"line_start":79,"line_end":79,"column_start":37,"column_end":49},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":9670},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/map.rs","byte_start":227517,"byte_end":227520,"line_start":22,"line_end":22,"column_start":28,"column_end":31},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":9745},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/map.rs","byte_start":227709,"byte_end":227712,"line_start":31,"line_end":31,"column_start":13,"column_end":16},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":9745},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/map.rs","byte_start":227881,"byte_end":227884,"line_start":39,"line_end":39,"column_start":29,"column_end":32},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":9745},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/map.rs","byte_start":228052,"byte_end":228055,"line_start":49,"line_end":49,"column_start":24,"column_end":27},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":9745},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/next.rs","byte_start":229167,"byte_end":229171,"line_start":14,"line_end":14,"column_start":36,"column_end":40},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":9877},"to":{"krate":1,"index":3045}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/next.rs","byte_start":229222,"byte_end":229226,"line_start":16,"line_end":16,"column_start":39,"column_end":43},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":9877},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/next.rs","byte_start":229377,"byte_end":229381,"line_start":22,"line_end":22,"column_start":56,"column_end":60},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":9877},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/next.rs","byte_start":229520,"byte_end":229524,"line_start":28,"line_end":28,"column_start":46,"column_end":50},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":9877},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/select_next_some.rs","byte_start":230175,"byte_end":230189,"line_start":16,"line_end":16,"column_start":22,"column_end":36},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":9885},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/select_next_some.rs","byte_start":230340,"byte_end":230354,"line_start":22,"line_end":22,"column_start":56,"column_end":70},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":9885},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/select_next_some.rs","byte_start":230498,"byte_end":230512,"line_start":28,"line_end":28,"column_start":51,"column_end":65},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":9885},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":231823,"byte_end":231831,"line_start":29,"line_end":29,"column_start":18,"column_end":26},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":9898},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":237328,"byte_end":237336,"line_start":189,"line_end":189,"column_start":34,"column_end":42},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":9898},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":237478,"byte_end":237486,"line_start":195,"line_end":195,"column_start":28,"column_end":36},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":9898},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":238645,"byte_end":238649,"line_start":237,"line_end":237,"column_start":25,"column_end":29},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":9937},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":238894,"byte_end":238898,"line_start":247,"line_end":247,"column_start":34,"column_end":38},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":9937},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":239009,"byte_end":239013,"line_start":253,"line_end":253,"column_start":25,"column_end":29},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":9937},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":239710,"byte_end":239717,"line_start":279,"line_end":279,"column_start":25,"column_end":32},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":9978},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":239965,"byte_end":239972,"line_start":289,"line_end":289,"column_start":34,"column_end":41},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":9978},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":240083,"byte_end":240090,"line_start":295,"line_end":295,"column_start":25,"column_end":32},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":9978},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":240810,"byte_end":240816,"line_start":321,"line_end":321,"column_start":28,"column_end":34},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":10019},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":241168,"byte_end":241174,"line_start":332,"line_end":332,"column_start":29,"column_end":35},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":10019},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":241443,"byte_end":241449,"line_start":343,"line_end":343,"column_start":24,"column_end":30},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":10019},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":242710,"byte_end":242718,"line_start":381,"line_end":381,"column_start":28,"column_end":36},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":10068},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":243038,"byte_end":243046,"line_start":394,"line_end":394,"column_start":29,"column_end":37},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":10068},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":243230,"byte_end":243238,"line_start":405,"line_end":405,"column_start":24,"column_end":32},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":10068},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/peek.rs","byte_start":243609,"byte_end":243619,"line_start":423,"line_end":423,"column_start":34,"column_end":44},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":2689},"to":{"krate":0,"index":6186}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/skip.rs","byte_start":244284,"byte_end":244288,"line_start":20,"line_end":20,"column_start":18,"column_end":22},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":10122},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/skip.rs","byte_start":244479,"byte_end":244483,"line_start":28,"line_end":28,"column_start":39,"column_end":43},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":10122},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/skip.rs","byte_start":244601,"byte_end":244605,"line_start":34,"line_end":34,"column_start":29,"column_end":33},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":10122},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/skip_while.rs","byte_start":246202,"byte_end":246211,"line_start":25,"line_end":25,"column_start":33,"column_end":42},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":10161},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/skip_while.rs","byte_start":246663,"byte_end":246672,"line_start":41,"line_end":41,"column_start":18,"column_end":27},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":10161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/skip_while.rs","byte_start":246998,"byte_end":247007,"line_start":54,"line_end":54,"column_start":34,"column_end":43},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":10161},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/skip_while.rs","byte_start":247255,"byte_end":247264,"line_start":65,"line_end":65,"column_start":29,"column_end":38},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":10161},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take.rs","byte_start":249564,"byte_end":249568,"line_start":21,"line_end":21,"column_start":18,"column_end":22},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":10235},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take.rs","byte_start":249741,"byte_end":249745,"line_start":29,"line_end":29,"column_start":21,"column_end":25},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":10235},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take.rs","byte_start":250717,"byte_end":250721,"line_start":68,"line_end":68,"column_start":26,"column_end":30},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":10235},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_while.rs","byte_start":251744,"byte_end":251753,"line_start":25,"line_end":25,"column_start":33,"column_end":42},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":10274},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_while.rs","byte_start":252201,"byte_end":252210,"line_start":41,"line_end":41,"column_start":18,"column_end":27},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":10274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_while.rs","byte_start":252529,"byte_end":252538,"line_start":54,"line_end":54,"column_start":29,"column_end":38},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":10274},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_while.rs","byte_start":254057,"byte_end":254066,"line_start":104,"line_end":104,"column_start":34,"column_end":43},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":10274},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":255450,"byte_end":255459,"line_start":30,"line_end":30,"column_start":30,"column_end":39},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":10343},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":255747,"byte_end":255756,"line_start":41,"line_end":41,"column_start":15,"column_end":24},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":10343},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":257873,"byte_end":257882,"line_start":111,"line_end":111,"column_start":26,"column_end":35},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":10343},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/take_until.rs","byte_start":258914,"byte_end":258923,"line_start":150,"line_end":150,"column_start":31,"column_end":40},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":10343},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/then.rs","byte_start":259865,"byte_end":259869,"line_start":23,"line_end":23,"column_start":33,"column_end":37},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":10400},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/then.rs","byte_start":260120,"byte_end":260124,"line_start":33,"line_end":33,"column_start":18,"column_end":22},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":10400},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/then.rs","byte_start":260370,"byte_end":260374,"line_start":45,"line_end":45,"column_start":34,"column_end":38},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":10400},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/then.rs","byte_start":260600,"byte_end":260604,"line_start":56,"line_end":56,"column_start":29,"column_end":33},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":10400},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":262486,"byte_end":262489,"line_start":22,"line_end":22,"column_start":32,"column_end":35},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":10468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":264075,"byte_end":264078,"line_start":61,"line_end":61,"column_start":32,"column_end":35},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":10468},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/zip.rs","byte_start":264273,"byte_end":264276,"line_start":71,"line_end":71,"column_start":27,"column_end":30},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":10468},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/chunks.rs","byte_start":266971,"byte_end":266977,"line_start":24,"line_end":24,"column_start":18,"column_end":24},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":10523},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/chunks.rs","byte_start":267485,"byte_end":267491,"line_start":46,"line_end":46,"column_start":29,"column_end":35},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":10523},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/chunks.rs","byte_start":269107,"byte_end":269113,"line_start":91,"line_end":91,"column_start":39,"column_end":45},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":10523},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/ready_chunks.rs","byte_start":270085,"byte_end":270096,"line_start":23,"line_end":23,"column_start":18,"column_end":29},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":10571},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/ready_chunks.rs","byte_start":270448,"byte_end":270459,"line_start":40,"line_end":40,"column_start":29,"column_end":40},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":10571},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/ready_chunks.rs","byte_start":272628,"byte_end":272639,"line_start":99,"line_end":99,"column_start":39,"column_end":50},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":10571},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/scan.rs","byte_start":273637,"byte_end":273641,"line_start":28,"line_end":28,"column_start":36,"column_end":40},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":10614},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/scan.rs","byte_start":274127,"byte_end":274131,"line_start":45,"line_end":45,"column_start":29,"column_end":33},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":10614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/scan.rs","byte_start":274295,"byte_end":274299,"line_start":52,"line_end":52,"column_start":24,"column_end":28},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":10614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/scan.rs","byte_start":274661,"byte_end":274665,"line_start":65,"line_end":65,"column_start":35,"column_end":39},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":10614},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/scan.rs","byte_start":275892,"byte_end":275896,"line_start":108,"line_end":108,"column_start":40,"column_end":44},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":10614},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/buffer_unordered.rs","byte_start":277077,"byte_end":277092,"line_start":26,"line_end":26,"column_start":25,"column_end":40},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":10683},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/buffer_unordered.rs","byte_start":277424,"byte_end":277439,"line_start":39,"line_end":39,"column_start":10,"column_end":25},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":10683},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/buffer_unordered.rs","byte_start":277826,"byte_end":277841,"line_start":59,"line_end":59,"column_start":21,"column_end":36},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":10683},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/buffer_unordered.rs","byte_start":279295,"byte_end":279310,"line_start":104,"line_end":104,"column_start":26,"column_end":41},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":10683},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/buffered.rs","byte_start":280420,"byte_end":280428,"line_start":27,"line_end":27,"column_start":25,"column_end":33},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":10728},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/buffered.rs","byte_start":280775,"byte_end":280783,"line_start":41,"line_end":41,"column_start":10,"column_end":18},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":10728},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/buffered.rs","byte_start":281063,"byte_end":281071,"line_start":53,"line_end":53,"column_start":21,"column_end":29},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":10728},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/for_each_concurrent.rs","byte_start":283408,"byte_end":283425,"line_start":23,"line_end":23,"column_start":33,"column_end":50},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":10773},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/for_each_concurrent.rs","byte_start":283771,"byte_end":283788,"line_start":37,"line_end":37,"column_start":18,"column_end":35},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":10773},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/for_each_concurrent.rs","byte_start":284221,"byte_end":284238,"line_start":54,"line_end":54,"column_start":34,"column_end":51},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":10773},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/for_each_concurrent.rs","byte_start":284468,"byte_end":284485,"line_start":65,"line_end":65,"column_start":29,"column_end":46},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":10773},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":145662,"byte_end":145663,"line_start":226,"line_end":226,"column_start":31,"column_end":32},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":3400},"to":{"krate":0,"index":3401}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/stream/mod.rs","byte_start":145806,"byte_end":145812,"line_start":230,"line_end":230,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":5,"index":96},"to":{"krate":0,"index":3401}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/and_then.rs","byte_start":325319,"byte_end":325326,"line_start":23,"line_end":23,"column_start":33,"column_end":40},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":10834},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/and_then.rs","byte_start":325619,"byte_end":325626,"line_start":36,"line_end":36,"column_start":18,"column_end":25},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":10834},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/and_then.rs","byte_start":325907,"byte_end":325914,"line_start":49,"line_end":49,"column_start":29,"column_end":36},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":10834},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/and_then.rs","byte_start":327057,"byte_end":327064,"line_start":85,"line_end":85,"column_start":34,"column_end":41},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":10834},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/into_stream.rs","byte_start":327982,"byte_end":327992,"line_start":18,"line_end":18,"column_start":10,"column_end":20},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":11107},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/into_stream.rs","byte_start":328185,"byte_end":328195,"line_start":27,"line_end":27,"column_start":51,"column_end":61},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":11107},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/into_stream.rs","byte_start":328316,"byte_end":328326,"line_start":33,"line_end":33,"column_start":32,"column_end":42},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":11107},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/or_else.rs","byte_start":329425,"byte_end":329431,"line_start":23,"line_end":23,"column_start":33,"column_end":39},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":11280},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/or_else.rs","byte_start":329723,"byte_end":329729,"line_start":36,"line_end":36,"column_start":18,"column_end":24},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":11280},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/or_else.rs","byte_start":330007,"byte_end":330013,"line_start":49,"line_end":49,"column_start":29,"column_end":35},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":11280},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/or_else.rs","byte_start":331290,"byte_end":331296,"line_start":89,"line_end":89,"column_start":34,"column_end":40},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":11280},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_next.rs","byte_start":332200,"byte_end":332207,"line_start":14,"line_end":14,"column_start":36,"column_end":43},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":11341},"to":{"krate":1,"index":3045}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_next.rs","byte_start":332261,"byte_end":332268,"line_start":16,"line_end":16,"column_start":42,"column_end":49},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":11341},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_next.rs","byte_start":332431,"byte_end":332438,"line_start":22,"line_end":22,"column_start":68,"column_end":75},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":11341},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_next.rs","byte_start":332580,"byte_end":332587,"line_start":28,"line_end":28,"column_start":49,"column_end":56},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":11341},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_for_each.rs","byte_start":333363,"byte_end":333373,"line_start":21,"line_end":21,"column_start":33,"column_end":43},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":11349},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_for_each.rs","byte_start":333669,"byte_end":333679,"line_start":34,"line_end":34,"column_start":18,"column_end":28},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":11349},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_for_each.rs","byte_start":333924,"byte_end":333934,"line_start":45,"line_end":45,"column_start":29,"column_end":39},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":11349},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_filter.rs","byte_start":335333,"byte_end":335342,"line_start":27,"line_end":27,"column_start":33,"column_end":42},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":11406},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_filter.rs","byte_start":335738,"byte_end":335747,"line_start":42,"line_end":42,"column_start":18,"column_end":27},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":11406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_filter.rs","byte_start":335990,"byte_end":335999,"line_start":53,"line_end":53,"column_start":34,"column_end":43},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":11406},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_filter.rs","byte_start":336256,"byte_end":336265,"line_start":64,"line_end":64,"column_start":29,"column_end":38},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":11406},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_filter_map.rs","byte_start":338406,"byte_end":338418,"line_start":24,"line_end":24,"column_start":33,"column_end":45},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":11471},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_filter_map.rs","byte_start":338718,"byte_end":338730,"line_start":37,"line_end":37,"column_start":18,"column_end":30},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":11471},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_filter_map.rs","byte_start":338927,"byte_end":338939,"line_start":45,"line_end":45,"column_start":37,"column_end":49},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":11471},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_filter_map.rs","byte_start":339217,"byte_end":339229,"line_start":56,"line_end":56,"column_start":32,"column_end":44},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":11471},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_flatten.rs","byte_start":341413,"byte_end":341423,"line_start":24,"line_end":24,"column_start":10,"column_end":20},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":11537},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_flatten.rs","byte_start":341688,"byte_end":341698,"line_start":37,"line_end":37,"column_start":26,"column_end":36},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":11537},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_flatten.rs","byte_start":341944,"byte_end":341954,"line_start":48,"line_end":48,"column_start":21,"column_end":31},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":11537},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_collect.rs","byte_start":343563,"byte_end":343573,"line_start":20,"line_end":20,"column_start":33,"column_end":43},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":11583},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_collect.rs","byte_start":343713,"byte_end":343723,"line_start":26,"line_end":26,"column_start":29,"column_end":39},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":11583},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_collect.rs","byte_start":343911,"byte_end":343921,"line_start":36,"line_end":36,"column_start":24,"column_end":34},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":11583},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_concat.rs","byte_start":344919,"byte_end":344928,"line_start":19,"line_end":19,"column_start":10,"column_end":19},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":11630},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_concat.rs","byte_start":345147,"byte_end":345156,"line_start":29,"line_end":29,"column_start":21,"column_end":30},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":11630},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_chunks.rs","byte_start":346540,"byte_end":346549,"line_start":25,"line_end":25,"column_start":21,"column_end":30},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":11670},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_chunks.rs","byte_start":347044,"byte_end":347053,"line_start":44,"line_end":44,"column_start":32,"column_end":41},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":11670},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_chunks.rs","byte_start":349001,"byte_end":349010,"line_start":95,"line_end":95,"column_start":51,"column_end":60},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":11670},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_chunks.rs","byte_start":349669,"byte_end":349683,"line_start":118,"line_end":118,"column_start":39,"column_end":53},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":11713},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_chunks.rs","byte_start":349828,"byte_end":349842,"line_start":124,"line_end":124,"column_start":43,"column_end":57},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":11713},"to":{"krate":1,"index":9352}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_fold.rs","byte_start":350653,"byte_end":350660,"line_start":22,"line_end":22,"column_start":36,"column_end":43},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":11734},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_fold.rs","byte_start":351019,"byte_end":351026,"line_start":37,"line_end":37,"column_start":21,"column_end":28},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":11734},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_fold.rs","byte_start":351306,"byte_end":351313,"line_start":48,"line_end":48,"column_start":37,"column_end":44},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":11734},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_fold.rs","byte_start":351567,"byte_end":351574,"line_start":59,"line_end":59,"column_start":32,"column_end":39},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":11734},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":355437,"byte_end":355446,"line_start":78,"line_end":78,"column_start":32,"column_end":41},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":11803},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_unfold.rs","byte_start":355708,"byte_end":355717,"line_start":88,"line_end":88,"column_start":34,"column_end":43},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":11803},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_skip_while.rs","byte_start":357463,"byte_end":357475,"line_start":26,"line_end":26,"column_start":33,"column_end":45},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":11860},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_skip_while.rs","byte_start":357931,"byte_end":357943,"line_start":42,"line_end":42,"column_start":18,"column_end":30},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":11860},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_skip_while.rs","byte_start":358283,"byte_end":358295,"line_start":55,"line_end":55,"column_start":29,"column_end":41},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":11860},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_skip_while.rs","byte_start":359794,"byte_end":359806,"line_start":100,"line_end":100,"column_start":34,"column_end":46},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":11860},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_take_while.rs","byte_start":361034,"byte_end":361046,"line_start":29,"line_end":29,"column_start":33,"column_end":45},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":11929},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_take_while.rs","byte_start":361498,"byte_end":361510,"line_start":45,"line_end":45,"column_start":18,"column_end":30},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":11929},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_take_while.rs","byte_start":361848,"byte_end":361860,"line_start":58,"line_end":58,"column_start":29,"column_end":41},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":11929},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_take_while.rs","byte_start":363467,"byte_end":363479,"line_start":109,"line_end":109,"column_start":34,"column_end":46},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":11929},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_buffer_unordered.rs","byte_start":364767,"byte_end":364785,"line_start":26,"line_end":26,"column_start":10,"column_end":28},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":12003},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_buffer_unordered.rs","byte_start":365124,"byte_end":365142,"line_start":42,"line_end":42,"column_start":21,"column_end":39},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":12003},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_buffered.rs","byte_start":367348,"byte_end":367359,"line_start":27,"line_end":27,"column_start":10,"column_end":21},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":12051},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_buffered.rs","byte_start":367696,"byte_end":367707,"line_start":43,"line_end":43,"column_start":21,"column_end":32},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":12051},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_for_each_concurrent.rs","byte_start":369865,"byte_end":369885,"line_start":25,"line_end":25,"column_start":33,"column_end":53},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":12094},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_for_each_concurrent.rs","byte_start":370250,"byte_end":370270,"line_start":39,"line_end":39,"column_start":34,"column_end":54},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":12094},"to":{"krate":5,"index":27}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_for_each_concurrent.rs","byte_start":370509,"byte_end":370529,"line_start":50,"line_end":50,"column_start":18,"column_end":38},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":12094},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/try_for_each_concurrent.rs","byte_start":370977,"byte_end":370997,"line_start":67,"line_end":67,"column_start":29,"column_end":49},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":12094},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":291602,"byte_end":291603,"line_start":154,"line_end":154,"column_start":46,"column_end":47},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":4635},"to":{"krate":0,"index":4636}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/try_stream/mod.rs","byte_start":291684,"byte_end":291693,"line_start":157,"line_end":157,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":5,"index":127},"to":{"krate":0,"index":4636}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":373761,"byte_end":373765,"line_start":13,"line_end":13,"column_start":19,"column_end":23},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":12155},"to":{"krate":1,"index":3045}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/iter.rs","byte_start":374387,"byte_end":374391,"line_start":36,"line_end":36,"column_start":20,"column_end":24},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":12155},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":375582,"byte_end":375588,"line_start":34,"line_end":34,"column_start":19,"column_end":25},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":12164},"to":{"krate":1,"index":3045}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":375615,"byte_end":375621,"line_start":36,"line_end":36,"column_start":20,"column_end":26},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":12164},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat.rs","byte_start":375929,"byte_end":375935,"line_start":51,"line_end":51,"column_start":25,"column_end":31},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":12164},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":376532,"byte_end":376542,"line_start":17,"line_end":17,"column_start":36,"column_end":46},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":12173},"to":{"krate":1,"index":3045}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":376586,"byte_end":376596,"line_start":19,"line_end":19,"column_start":37,"column_end":47},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":12173},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/repeat_with.rs","byte_start":376910,"byte_end":376920,"line_start":31,"line_end":31,"column_start":42,"column_end":52},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":12173},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/empty.rs","byte_start":379440,"byte_end":379445,"line_start":21,"line_end":21,"column_start":19,"column_end":24},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":12182},"to":{"krate":1,"index":3045}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/empty.rs","byte_start":379477,"byte_end":379482,"line_start":23,"line_end":23,"column_start":25,"column_end":30},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":12182},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/empty.rs","byte_start":379567,"byte_end":379572,"line_start":29,"line_end":29,"column_start":20,"column_end":25},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":12182},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/empty.rs","byte_start":379821,"byte_end":379826,"line_start":41,"line_end":41,"column_start":19,"column_end":24},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":12182},"to":{"krate":1,"index":2625}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/once.rs","byte_start":380765,"byte_end":380769,"line_start":34,"line_end":34,"column_start":11,"column_end":15},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":12193},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/once.rs","byte_start":380898,"byte_end":380902,"line_start":40,"line_end":40,"column_start":30,"column_end":34},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":12193},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/once.rs","byte_start":381507,"byte_end":381511,"line_start":63,"line_end":63,"column_start":35,"column_end":39},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":12193},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/pending.rs","byte_start":382170,"byte_end":382177,"line_start":21,"line_end":21,"column_start":19,"column_end":26},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":12224},"to":{"krate":1,"index":3045}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/pending.rs","byte_start":382209,"byte_end":382216,"line_start":23,"line_end":23,"column_start":25,"column_end":32},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":12224},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/pending.rs","byte_start":382301,"byte_end":382308,"line_start":29,"line_end":29,"column_start":20,"column_end":27},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":12224},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/pending.rs","byte_start":382553,"byte_end":382560,"line_start":41,"line_end":41,"column_start":19,"column_end":26},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":12224},"to":{"krate":1,"index":2625}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":382947,"byte_end":382953,"line_start":15,"line_end":15,"column_start":19,"column_end":25},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":5049},"to":{"krate":1,"index":3045}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":382984,"byte_end":382990,"line_start":17,"line_end":17,"column_start":24,"column_end":30},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":5049},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_fn.rs","byte_start":383755,"byte_end":383761,"line_start":48,"line_end":48,"column_start":23,"column_end":29},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":5049},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":384457,"byte_end":384470,"line_start":18,"line_end":18,"column_start":23,"column_end":36},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":12235},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/poll_immediate.rs","byte_start":385383,"byte_end":385396,"line_start":47,"line_end":47,"column_start":40,"column_end":53},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":12235},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":388283,"byte_end":388289,"line_start":61,"line_end":61,"column_start":16,"column_end":22},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":12276},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":389593,"byte_end":389599,"line_start":96,"line_end":96,"column_start":32,"column_end":38},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":12276},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select.rs","byte_start":389778,"byte_end":389784,"line_start":106,"line_end":106,"column_start":27,"column_end":33},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":12276},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":390497,"byte_end":390505,"line_start":17,"line_end":17,"column_start":6,"column_end":14},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":12314},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":390802,"byte_end":390810,"line_start":31,"line_end":31,"column_start":18,"column_end":26},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":12314},"to":{"krate":1,"index":2982}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":393837,"byte_end":393855,"line_start":130,"line_end":130,"column_start":29,"column_end":47},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":12333},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":395304,"byte_end":395322,"line_start":165,"line_end":165,"column_start":45,"column_end":63},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":12333},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":395602,"byte_end":395620,"line_start":176,"line_end":176,"column_start":40,"column_end":58},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":12333},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_with_strategy.rs","byte_start":396732,"byte_end":396750,"line_start":216,"line_end":216,"column_start":44,"column_end":62},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":12333},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":399321,"byte_end":399327,"line_start":68,"line_end":68,"column_start":32,"column_end":38},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":12402},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":399567,"byte_end":399573,"line_start":78,"line_end":78,"column_start":39,"column_end":45},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":12402},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/unfold.rs","byte_start":399853,"byte_end":399859,"line_start":92,"line_end":92,"column_start":34,"column_end":40},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":12402},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":401407,"byte_end":401419,"line_start":26,"line_end":26,"column_start":23,"column_end":35},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":12460},"to":{"krate":1,"index":2655}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":401524,"byte_end":401536,"line_start":32,"line_end":32,"column_start":16,"column_end":28},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":12460},"to":{"krate":1,"index":2660}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":401567,"byte_end":401579,"line_start":34,"line_end":34,"column_start":24,"column_end":36},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":12460},"to":{"krate":1,"index":2702}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":401702,"byte_end":401714,"line_start":40,"line_end":40,"column_start":17,"column_end":29},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":12460},"to":{"krate":1,"index":2691}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":401895,"byte_end":401907,"line_start":47,"line_end":47,"column_start":20,"column_end":32},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":12460},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":404489,"byte_end":404503,"line_start":102,"line_end":102,"column_start":27,"column_end":41},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":5389},"to":{"krate":1,"index":3045}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":404529,"byte_end":404543,"line_start":104,"line_end":104,"column_start":19,"column_end":33},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":5389},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":406109,"byte_end":406123,"line_start":145,"line_end":145,"column_start":31,"column_end":45},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":5389},"to":{"krate":1,"index":2982}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":406216,"byte_end":406230,"line_start":151,"line_end":151,"column_start":30,"column_end":44},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":5389},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":407392,"byte_end":407406,"line_start":186,"line_end":186,"column_start":29,"column_end":43},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":5389},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":407572,"byte_end":407586,"line_start":192,"line_end":192,"column_start":41,"column_end":55},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":5389},"to":{"krate":1,"index":7416}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":407866,"byte_end":407880,"line_start":205,"line_end":205,"column_start":35,"column_end":49},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":5389},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_ordered.rs","byte_start":408050,"byte_end":408064,"line_start":211,"line_end":211,"column_start":35,"column_end":49},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":5389},"to":{"krate":1,"index":7429}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/abort.rs","byte_start":435846,"byte_end":435857,"line_start":4,"line_end":4,"column_start":19,"column_end":30},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":5526},"to":{"krate":1,"index":3239}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":437216,"byte_end":437224,"line_start":39,"line_end":39,"column_start":31,"column_end":39},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":12534},"to":{"krate":1,"index":7600}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":438298,"byte_end":438306,"line_start":71,"line_end":71,"column_start":40,"column_end":48},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":12534},"to":{"krate":1,"index":7489}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":438343,"byte_end":438353,"line_start":73,"line_end":73,"column_start":28,"column_end":38},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":12495},"to":{"krate":1,"index":7600}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":439205,"byte_end":439215,"line_start":100,"line_end":100,"column_start":33,"column_end":43},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":12495},"to":{"krate":1,"index":7489}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":439263,"byte_end":439270,"line_start":102,"line_end":102,"column_start":35,"column_end":42},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":12505},"to":{"krate":1,"index":7600}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":439533,"byte_end":439540,"line_start":114,"line_end":114,"column_start":40,"column_end":47},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":12505},"to":{"krate":1,"index":7489}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":439581,"byte_end":439591,"line_start":116,"line_end":116,"column_start":28,"column_end":38},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":12514},"to":{"krate":1,"index":7600}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":440460,"byte_end":440470,"line_start":143,"line_end":143,"column_start":33,"column_end":43},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":12514},"to":{"krate":1,"index":7489}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":440518,"byte_end":440522,"line_start":145,"line_end":145,"column_start":35,"column_end":39},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":12525},"to":{"krate":1,"index":7600}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":440781,"byte_end":440785,"line_start":157,"line_end":157,"column_start":40,"column_end":44},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":12525},"to":{"krate":1,"index":7489}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":440954,"byte_end":440964,"line_start":161,"line_end":161,"column_start":33,"column_end":43},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":12514},"to":{"krate":1,"index":3004}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":441009,"byte_end":441019,"line_start":162,"line_end":162,"column_start":33,"column_end":43},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":12514},"to":{"krate":1,"index":3016}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":441065,"byte_end":441075,"line_start":164,"line_end":164,"column_start":33,"column_end":43},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":12495},"to":{"krate":1,"index":3004}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":441120,"byte_end":441130,"line_start":165,"line_end":165,"column_start":33,"column_end":43},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":12495},"to":{"krate":1,"index":3016}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":441184,"byte_end":441192,"line_start":167,"line_end":167,"column_start":41,"column_end":49},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":12534},"to":{"krate":1,"index":3004}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/iter.rs","byte_start":441241,"byte_end":441249,"line_start":168,"line_end":168,"column_start":41,"column_end":49},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":12534},"to":{"krate":1,"index":3016}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/task.rs","byte_start":442734,"byte_end":442738,"line_start":41,"line_end":41,"column_start":27,"column_end":31},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":5654},"to":{"krate":1,"index":3004}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/task.rs","byte_start":442773,"byte_end":442777,"line_start":42,"line_end":42,"column_start":27,"column_end":31},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":5654},"to":{"krate":1,"index":3016}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/task.rs","byte_start":442809,"byte_end":442813,"line_start":44,"line_end":44,"column_start":23,"column_end":27},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":5654},"to":{"krate":20,"index":94}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/task.rs","byte_start":443890,"byte_end":443894,"line_start":71,"line_end":71,"column_start":11,"column_end":15},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":5654},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/task.rs","byte_start":444894,"byte_end":444898,"line_start":102,"line_end":102,"column_start":20,"column_end":24},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":5654},"to":{"krate":1,"index":3239}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/ready_to_run_queue.rs","byte_start":446348,"byte_end":446363,"line_start":29,"line_end":29,"column_start":11,"column_end":26},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":5724},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/ready_to_run_queue.rs","byte_start":449019,"byte_end":449034,"line_start":111,"line_end":111,"column_start":20,"column_end":35},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":5724},"to":{"krate":1,"index":3239}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":411854,"byte_end":411870,"line_start":88,"line_end":88,"column_start":33,"column_end":49},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":5747},"to":{"krate":1,"index":3004}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":411911,"byte_end":411927,"line_start":89,"line_end":89,"column_start":33,"column_end":49},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":5747},"to":{"krate":1,"index":3016}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":411956,"byte_end":411972,"line_start":90,"line_end":90,"column_start":21,"column_end":37},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":5747},"to":{"krate":1,"index":3045}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":411997,"byte_end":412013,"line_start":92,"line_end":92,"column_start":16,"column_end":32},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":5747},"to":{"krate":20,"index":16}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":412198,"byte_end":412214,"line_start":99,"line_end":99,"column_start":21,"column_end":37},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":5747},"to":{"krate":20,"index":19}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":413921,"byte_end":413937,"line_start":131,"line_end":131,"column_start":23,"column_end":39},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":5747},"to":{"krate":1,"index":2982}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":414011,"byte_end":414027,"line_start":137,"line_end":137,"column_start":11,"column_end":27},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":5747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":425558,"byte_end":425574,"line_start":410,"line_end":410,"column_start":30,"column_end":46},"kind":{"Impl":{"id":352}},"from":{"krate":0,"index":5747},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":429996,"byte_end":430000,"line_start":508,"line_end":508,"column_start":32,"column_end":36},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":5784},"to":{"krate":1,"index":3239}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":432255,"byte_end":432271,"line_start":565,"line_end":565,"column_start":21,"column_end":37},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":5747},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":432409,"byte_end":432425,"line_start":571,"line_end":571,"column_start":11,"column_end":27},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":5747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":432996,"byte_end":433012,"line_start":591,"line_end":591,"column_start":20,"column_end":36},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":5747},"to":{"krate":1,"index":3239}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":434662,"byte_end":434678,"line_start":632,"line_end":632,"column_start":35,"column_end":51},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":5747},"to":{"krate":1,"index":7420}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":435148,"byte_end":435164,"line_start":646,"line_end":646,"column_start":33,"column_end":49},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":5747},"to":{"krate":1,"index":7416}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":435440,"byte_end":435456,"line_start":659,"line_end":659,"column_start":35,"column_end":51},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":5747},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/futures_unordered/mod.rs","byte_start":435578,"byte_end":435594,"line_start":665,"line_end":665,"column_start":27,"column_end":43},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":5747},"to":{"krate":1,"index":7429}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":450629,"byte_end":450638,"line_start":36,"line_end":36,"column_start":27,"column_end":36},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":12541},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":450783,"byte_end":450792,"line_start":42,"line_end":42,"column_start":26,"column_end":35},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":12541},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":452265,"byte_end":452274,"line_start":89,"line_end":89,"column_start":38,"column_end":47},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":12541},"to":{"krate":1,"index":2982}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":452373,"byte_end":452382,"line_start":95,"line_end":95,"column_start":37,"column_end":46},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":12541},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":453166,"byte_end":453175,"line_start":117,"line_end":117,"column_start":42,"column_end":51},"kind":{"Impl":{"id":365}},"from":{"krate":0,"index":12541},"to":{"krate":5,"index":110}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":454193,"byte_end":454202,"line_start":149,"line_end":149,"column_start":47,"column_end":56},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":12541},"to":{"krate":1,"index":7416}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":454347,"byte_end":454356,"line_start":155,"line_end":155,"column_start":41,"column_end":50},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":12541},"to":{"krate":1,"index":7429}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":454539,"byte_end":454548,"line_start":163,"line_end":163,"column_start":43,"column_end":52},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":12541},"to":{"krate":1,"index":7420}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":455631,"byte_end":455635,"line_start":202,"line_end":202,"column_start":43,"column_end":47},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":12574},"to":{"krate":1,"index":7600}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":456068,"byte_end":456072,"line_start":218,"line_end":218,"column_start":48,"column_end":52},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":12574},"to":{"krate":1,"index":7489}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":456127,"byte_end":456134,"line_start":220,"line_end":220,"column_start":43,"column_end":50},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":12583},"to":{"krate":1,"index":7600}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":456571,"byte_end":456578,"line_start":236,"line_end":236,"column_start":48,"column_end":55},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":12583},"to":{"krate":1,"index":7489}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":456629,"byte_end":456637,"line_start":238,"line_end":238,"column_start":39,"column_end":47},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":12592},"to":{"krate":1,"index":7600}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/stream/select_all.rs","byte_start":457065,"byte_end":457073,"line_start":254,"line_end":254,"column_start":48,"column_end":56},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":12592},"to":{"krate":1,"index":7489}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":459321,"byte_end":459323,"line_start":16,"line_end":16,"column_start":31,"column_end":33},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":6095},"to":{"krate":0,"index":6098}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":459378,"byte_end":459380,"line_start":17,"line_end":17,"column_start":36,"column_end":38},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":6097},"to":{"krate":0,"index":6101}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":459459,"byte_end":459464,"line_start":20,"line_end":20,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":20,"index":16},"to":{"krate":0,"index":6098}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/task/spawn.rs","byte_start":462228,"byte_end":462238,"line_start":97,"line_end":97,"column_start":26,"column_end":36},"kind":"SuperTrait","from":{"krate":20,"index":19},"to":{"krate":0,"index":6101}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":467006,"byte_end":467015,"line_start":22,"line_end":22,"column_start":9,"column_end":18},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":12604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":469288,"byte_end":469299,"line_start":87,"line_end":87,"column_start":6,"column_end":17},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":12646},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":470082,"byte_end":470089,"line_start":112,"line_end":112,"column_start":23,"column_end":30},"kind":{"Impl":{"id":379}},"from":{"krate":0,"index":12657},"to":{"krate":1,"index":9352}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":470292,"byte_end":470301,"line_start":121,"line_end":121,"column_start":9,"column_end":18},"kind":{"Impl":{"id":380}},"from":{"krate":0,"index":12604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":471290,"byte_end":471299,"line_start":152,"line_end":152,"column_start":22,"column_end":31},"kind":{"Impl":{"id":381}},"from":{"krate":0,"index":12604},"to":{"krate":1,"index":12613}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":471538,"byte_end":471547,"line_start":163,"line_end":163,"column_start":21,"column_end":30},"kind":{"Impl":{"id":382}},"from":{"krate":0,"index":12604},"to":{"krate":5,"index":96}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/abortable.rs","byte_start":471806,"byte_end":471817,"line_start":174,"line_end":174,"column_start":6,"column_end":17},"kind":{"Impl":{"id":383}},"from":{"krate":0,"index":12646},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":472489,"byte_end":472490,"line_start":9,"line_end":9,"column_start":30,"column_end":31},"kind":{"Impl":{"id":384}},"from":{"krate":0,"index":6191},"to":{"krate":0,"index":6186}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":472629,"byte_end":472636,"line_start":19,"line_end":19,"column_start":22,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":6186},"to":{"krate":0,"index":6196}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":472725,"byte_end":472726,"line_start":23,"line_end":23,"column_start":29,"column_end":30},"kind":{"Impl":{"id":385}},"from":{"krate":0,"index":6200},"to":{"krate":0,"index":6196}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":472912,"byte_end":472918,"line_start":34,"line_end":34,"column_start":19,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":6196},"to":{"krate":0,"index":6204}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":472996,"byte_end":472997,"line_start":38,"line_end":38,"column_start":26,"column_end":27},"kind":{"Impl":{"id":386}},"from":{"krate":0,"index":6208},"to":{"krate":0,"index":6204}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":474013,"byte_end":474017,"line_start":76,"line_end":76,"column_start":21,"column_end":25},"kind":{"Impl":{"id":387}},"from":{"krate":0,"index":6213},"to":{"krate":1,"index":2982}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":474111,"byte_end":474115,"line_start":82,"line_end":82,"column_start":27,"column_end":31},"kind":{"Impl":{"id":388}},"from":{"krate":0,"index":6213},"to":{"krate":0,"index":6186}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":474374,"byte_end":474381,"line_start":94,"line_end":94,"column_start":30,"column_end":37},"kind":{"Impl":{"id":394}},"from":{"krate":0,"index":12688},"to":{"krate":0,"index":6186}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":474604,"byte_end":474611,"line_start":104,"line_end":104,"column_start":29,"column_end":36},"kind":{"Impl":{"id":395}},"from":{"krate":0,"index":12688},"to":{"krate":0,"index":6196}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":474802,"byte_end":474809,"line_start":113,"line_end":113,"column_start":26,"column_end":33},"kind":{"Impl":{"id":396}},"from":{"krate":0,"index":12688},"to":{"krate":0,"index":6204}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":475114,"byte_end":475127,"line_start":129,"line_end":129,"column_start":35,"column_end":48},"kind":{"Impl":{"id":397}},"from":{"krate":0,"index":12709},"to":{"krate":0,"index":6186}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":475544,"byte_end":475553,"line_start":144,"line_end":144,"column_start":27,"column_end":36},"kind":{"Impl":{"id":403}},"from":{"krate":0,"index":12725},"to":{"krate":0,"index":6186}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":475837,"byte_end":475846,"line_start":155,"line_end":155,"column_start":26,"column_end":35},"kind":{"Impl":{"id":404}},"from":{"krate":0,"index":12725},"to":{"krate":0,"index":6196}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":476108,"byte_end":476117,"line_start":165,"line_end":165,"column_start":23,"column_end":32},"kind":{"Impl":{"id":405}},"from":{"krate":0,"index":12725},"to":{"krate":0,"index":6204}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":476439,"byte_end":476446,"line_start":181,"line_end":181,"column_start":41,"column_end":48},"kind":{"Impl":{"id":406}},"from":{"krate":0,"index":12740},"to":{"krate":0,"index":6186}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":476665,"byte_end":476672,"line_start":190,"line_end":190,"column_start":40,"column_end":47},"kind":{"Impl":{"id":407}},"from":{"krate":0,"index":12740},"to":{"krate":0,"index":6196}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":476850,"byte_end":476857,"line_start":198,"line_end":198,"column_start":37,"column_end":44},"kind":{"Impl":{"id":408}},"from":{"krate":0,"index":12740},"to":{"krate":0,"index":6204}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":477158,"byte_end":477166,"line_start":213,"line_end":213,"column_start":41,"column_end":49},"kind":{"Impl":{"id":409}},"from":{"krate":0,"index":12755},"to":{"krate":0,"index":6186}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":477389,"byte_end":477397,"line_start":222,"line_end":222,"column_start":40,"column_end":48},"kind":{"Impl":{"id":410}},"from":{"krate":0,"index":12755},"to":{"krate":0,"index":6196}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":477579,"byte_end":477587,"line_start":230,"line_end":230,"column_start":37,"column_end":45},"kind":{"Impl":{"id":411}},"from":{"krate":0,"index":12755},"to":{"krate":0,"index":6204}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":477897,"byte_end":477908,"line_start":245,"line_end":245,"column_start":49,"column_end":60},"kind":{"Impl":{"id":412}},"from":{"krate":0,"index":12770},"to":{"krate":0,"index":6186}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":478168,"byte_end":478179,"line_start":256,"line_end":256,"column_start":48,"column_end":59},"kind":{"Impl":{"id":413}},"from":{"krate":0,"index":12770},"to":{"krate":0,"index":6196}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":478416,"byte_end":478427,"line_start":266,"line_end":266,"column_start":45,"column_end":56},"kind":{"Impl":{"id":414}},"from":{"krate":0,"index":12770},"to":{"krate":0,"index":6204}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":478794,"byte_end":478806,"line_start":283,"line_end":283,"column_start":49,"column_end":61},"kind":{"Impl":{"id":415}},"from":{"krate":0,"index":12782},"to":{"krate":0,"index":6186}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":479067,"byte_end":479079,"line_start":294,"line_end":294,"column_start":48,"column_end":60},"kind":{"Impl":{"id":416}},"from":{"krate":0,"index":12782},"to":{"krate":0,"index":6196}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":479317,"byte_end":479329,"line_start":304,"line_end":304,"column_start":45,"column_end":57},"kind":{"Impl":{"id":417}},"from":{"krate":0,"index":12782},"to":{"krate":0,"index":6204}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":479948,"byte_end":479962,"line_start":326,"line_end":326,"column_start":41,"column_end":55},"kind":{"Impl":{"id":418}},"from":{"krate":0,"index":12794},"to":{"krate":0,"index":6186}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":480185,"byte_end":480199,"line_start":335,"line_end":335,"column_start":40,"column_end":54},"kind":{"Impl":{"id":419}},"from":{"krate":0,"index":12794},"to":{"krate":0,"index":6196}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":480400,"byte_end":480414,"line_start":343,"line_end":343,"column_start":37,"column_end":51},"kind":{"Impl":{"id":420}},"from":{"krate":0,"index":12794},"to":{"krate":0,"index":6204}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":480720,"byte_end":480726,"line_start":357,"line_end":357,"column_start":21,"column_end":27},"kind":{"Impl":{"id":421}},"from":{"krate":0,"index":6377},"to":{"krate":1,"index":2982}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/fns.rs","byte_start":480819,"byte_end":480825,"line_start":362,"line_end":362,"column_start":27,"column_end":33},"kind":{"Impl":{"id":422}},"from":{"krate":0,"index":6377},"to":{"krate":0,"index":6186}},{"span":{"file_name":"/Users/idealmine/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.19/src/unfold_state.rs","byte_start":481430,"byte_end":481441,"line_start":22,"line_end":22,"column_start":12,"column_end":23},"kind":{"Impl":{"id":428}},"from":{"krate":0,"index":12831},"to":{"krate":4294967295,"index":4294967295}}]}